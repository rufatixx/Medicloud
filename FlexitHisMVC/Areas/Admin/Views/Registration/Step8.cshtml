@using Medicloud.DAL.DAO

@{
    Layout = "~/Areas/Admin/Views/Shared/_BusinessLayout.cshtml";
}


@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}


@model Medicloud.ViewModels.CreateOrganizationVM
<style>
    .form-switch {
        cursor: pointer;
    }

        .form-switch input {
            cursor: pointer
        }
</style>



<div class="">
    <div class="row  text-center justify-content-center ">
        <div class="">
            <div class="card-header   align-items-center">
                <a class="btn btn-sm" asp-action="Step7" asp-route-organizationId="@Model.id" asp-area="Admin">
                    <svg width="32px" height="32px" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" fill="#737373">
                        <path fill="#737373" d="M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z"></path>
                        <path fill="#737373" d="m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z"></path>
                    </svg>
                </a>

                <div class="text-center flex-grow-1">
                    <h1>İş saatlarınız</h1>
                </div>
            </div>
            <form id="step9Form" asp-route-organizationId="@Model.id" method="get" asp-action="step9" asp-controller="registration" asp-area="admin">

                <div class="card-body ">


                    @{
                        var cultureInfo = new System.Globalization.CultureInfo("az-AZ");

                    }
                    @foreach (var item in Model.WorkHours)
                    {
                        var dayName = cultureInfo.DateTimeFormat.GetDayName((System.DayOfWeek)(item.dayOfWeek % 7));
                        var capitalizedDayName = cultureInfo.TextInfo.ToTitleCase(dayName);
                        string isChecked = "";
                        string displayTime = "";
                        string startTime = item.startTime?.ToString(@"hh\:mm")!;
                        string endTime = item.endTime?.ToString(@"hh\:mm")!;
                        if (item.startTime == null && item.endTime == null)
                        {
                            isChecked = "";
                            displayTime = "Bağlı";
                        }
                        else
                        {
                            isChecked = "checked";
                            displayTime = $"{startTime} - {endTime}";
                        }
                        <div class="row form-switch align-items-center mb-3">
                            <div class="col-6 row align-items-center">
                                <div class="col-4">
                                    <input class="form-check-input toggle-checkbox" @isChecked type="checkbox" id="@item.id">

                                </div>

                                <div class="col-8 text-start">
                                    <label class="form-check-label text-start" style="cursor:pointer;" for="@item.id">@capitalizedDayName</label>

                                </div>

                            </div>
                            <div class="col-6 row align-items-center item-row" data-day="@capitalizedDayName" data-item-id="@item.id" data-start="@startTime" data-end="@endTime">
                                <div class="col-8">
                                    <span class="text-muted" id="time-@item.id">@displayTime</span>

                                </div>
                                <div class="col-4">
                                    <btn class="btn btn-sm">
                                        <svg width="20px" height="20px" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#908e8e">
                                            <path d="M9 5L16 12L9 19" stroke="#737373" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                        </svg>
                                    </btn>
                                </div>

                            </div>
                        </div>
                    }

                </div>


                <div class="mb-3 mb-0 text-center">
                    <a asp-action="Step9" asp-route-organizationId="@Model.id" asp-area="Admin" class="btn btn-primary" id="nextButton"> Növbəti</a>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="editTimeModal" tabindex="-1" aria-labelledby="editTimeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTimeModalLabel"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editTimeForm">
                    <input type="hidden" id="selectedDay">
                    <div class="row">
                        <span class="col-4">İş saatları</span>
                        <div class="col-4">
                            <select id="startTimeSelect" class="form-select"></select>
                        </div>
                        <div class="col-4">
                            <select id="endTimeSelect" class="form-select"></select>
                        </div>
                    </div>
                    <div class="row" id="breaksContainer">
                    </div>

                </form>
            </div>
            <button id="addBreakButton">Add break</button>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" id="saveTimeButton">Yadda saxla</button>
            </div>
        </div>
    </div>
</div>


<script>

    let selectedStart;
    let selectedEnd;
    let selectedId;


    $(document).ready(function () {

        function populateTimeOptions(start, end) {
            const $startTimeSelect = $("#startTimeSelect");
            const $endTimeSelect = $("#endTimeSelect");
            $startTimeSelect.empty();
            $endTimeSelect.empty();

            let startHour = 0;
            let endHour = 23;

            for (let hour = startHour; hour <= endHour; hour++) {
                for (let minute = 0; minute < 60; minute += 15) {
                    const time = `${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}`;
                    $startTimeSelect.append(`<option value="${time}">${time}</option>`);
                    $endTimeSelect.append(`<option value="${time}">${time}</option>`);
                }
            }

            $startTimeSelect.val(start);
            $endTimeSelect.val(end);
        }


        $("#startTimeSelect").on("change", function () {
            const selectedTime = $(this).val();
            const [selectedHour, selectedMinute] = selectedTime.split(":").map(Number);
            const $endTimeSelect = $("#endTimeSelect");
            $endTimeSelect.empty();

            let endHour = 23;


            if (selectedHour >= 23) {
                endHour = selectedHour;
            }

            for (let hour = selectedHour; hour <= endHour; hour++) {
                for (let minute = (hour === selectedHour ? selectedMinute + 15 : 0); minute < 60; minute += 15) {
                    const time = `${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}`;
                    // Eğer şu anki saat 18:00 ise, bunu değiştirmiyoruz
                    if (time === selectedEnd) {
                        $endTimeSelect.append(`<option value="${time}" selected>${time}</option>`);
                    } else {
                        $endTimeSelect.append(`<option value="${time}">${time}</option>`);
                    }
                }
            }

            if (selectedEnd !== $endTimeSelect.val()) {
                selectedEnd = $endTimeSelect.val();
            }
        });


        $("#startTimeSelect").on("change", function (event) {
            selectedStart = $(this).val();
            console.log(selectedEnd)
        });
        $("#endTimeSelect").on("change", function (event) {
            selectedEnd = $(this).val();
            console.log(selectedEnd)
        });

        $(".toggle-checkbox").on("click", function (event) {
            console.log("Clciked")
            event.stopPropagation(); // Checkbox tıklamasında row tıklamasını engelle
            const id = $(this).attr("id");
            const $timeLabel = $(`#time-${id}`);
            const $itemRow = $(this).closest(".row").next(".item-row");
            const start = $itemRow.data("start");
            const end = $itemRow.data("end");

            if ($(this).is(":checked")) {
                $timeLabel.text(`${start || '09:00'} - ${end || '18:00'}`);
            } else {
                $timeLabel.text("Bağlı");
            }
        });


        $(".item-row").on("click", function () {
            const $checkbox = $(this).prev().find(".toggle-checkbox"); // Get the checkbox from the previous sibling (.col-6)
            if ($checkbox.is(":checked")) { // Check if the checkbox is checked
                const day = $(this).data("day");
                selectedStart = $(this).data("start") || '09:00';
                selectedEnd = $(this).data("end") || '18:00';
                $("#selectedDay").val(day);
                $("#editTimeModalLabel").text(`${day}`);
                populateTimeOptions(selectedStart, selectedEnd);
                $("#editTimeModal").modal("show");
            }
        });


        // Modal'da saat kaydetme işlemi
        $("#saveTimeButton").on("click", function () {
            const day = $("#selectedDay").val();
            const newTime = $("#dayTimeInput").val();
            if (newTime) {
                $(`#time-${day}`).text(newTime); // Yeni saati ilgili elemana yaz
                $("#editTimeForm")[0].reset(); // Formu sıfırla
                $("#editTimeModal").modal("hide"); // Modalı kapat
            } else {
                alert("Lütfen geçerli bir saat girin!");
            }
        });




        //let startTime = "09:00";
        //let endTime = "18:00";
        //let breaks = [{start:'10:10',end:'10:50'}];

        //updateBreakOptions();

        //function generateTimeOptions(start, end) {
        //    const options = [];
        //    let currentTime = new Date(`1970-01-01T${start}:00`);
        //    const endTimeMoment = new Date(`1970-01-01T${end}:00`);

        //    while (currentTime <= endTimeMoment) {
        //        options.push(currentTime.toTimeString().substring(0, 5));
        //        currentTime.setMinutes(currentTime.getMinutes() + 5);
        //    }
        //    return options;
        //}

        //function updateBreakOptions() {
        //    const $breaksContainer = $("#breaksContainer");
        //    $breaksContainer.empty();

        //    breaks.forEach((brk, index) => {
        //        const breakHtml = `
        //    <div class="row mb-2" data-index="${index}">
        //        <span class="col-4">Break ${index + 1}</span>
        //        <div class="col-3">
        //            <select class="form-select break-start" data-index="${index}">
        //            </select>
        //        </div>
        //        <div class="col-3">
        //            <select class="form-select break-end" data-index="${index}">
        //            </select>
        //        </div>
        //        <div class="col-2">
        //            <button class="btn btn-danger btn-sm remove-break" data-index="${index}">X</button>
        //        </div>
        //    </div>
        //`;
        //        $breaksContainer.append(breakHtml);
        //    });

        //    updateBreakTimes();
        //}


        //function updateBreakTimes() {
        //    $(".break-start").each((index, el) => {
        //        const $startSelect = $(el);
        //        const $endSelect = $(`.break-end[data-index="${index}"]`);

        //        const previousStart = breaks[index]?.start || startTime;
        //        const previousEnd = breaks[index]?.end || endTime;

        //        let availableTimes = generateTimeOptions(startTime, endTime);

        //        // Önceki break'lerin zamanlarını engelle
        //        breaks.forEach((brk, i) => {
        //            if (i !== index) {
        //                availableTimes = availableTimes.filter(time => !(time >= brk.start && time <= brk.end));
        //            }
        //        });

        //        // Başlangıç dropdown'unu güncelle
        //        $startSelect.empty();
        //        availableTimes.forEach(option => {
        //            $startSelect.append(new Option(option, option, false, option === previousStart));
        //        });

        //        const selectedStartTime = $startSelect.val() || availableTimes[0];

        //        let availableEndTimes = availableTimes.filter(time => time > selectedStartTime);

        //        // Bitiş dropdown'unu güncelle
        //        $endSelect.empty();
        //        availableEndTimes.forEach(option => {
        //            $endSelect.append(new Option(option, option, false, option === previousEnd));
        //        });

        //        breaks[index].start = $startSelect.val();
        //        breaks[index].end = $endSelect.val();
        //    });
        //}

        //function addBreak() {
        //    const lastBreak = breaks.length > 0 ? breaks[breaks.length - 1] : null;

        //    let newStartTime = lastBreak ? lastBreak.end : startTime;
        //    let availableTimes = generateTimeOptions(newStartTime, endTime);

        //    // Mevcut molaların zaman aralıklarını engelle
        //    breaks.forEach(brk => {
        //        availableTimes = availableTimes.filter(time => !(time >= brk.start && time <= brk.end));
        //    });

        //    if (availableTimes.length < 2) return;

        //    const newBreak = {
        //        start: availableTimes[0],
        //        end: availableTimes[1]
        //    };

        //    breaks.push(newBreak);
        //    updateBreakOptions();
        //}

        //function removeBreak(index) {
        //    breaks.splice(index, 1);
        //    updateBreakOptions();
        //}

        //// Event Listeners
        //$(document).on("click", ".remove-break", function () {
        //    const index = $(this).data("index");
        //    removeBreak(index);
        //});


        //$(document).on("change", ".break-start", function () {
        //    const index = $(this).data("index");
        //    breaks[index].start = $(this).val();

        //    let availableEndTimes = generateTimeOptions(breaks[index].start, endTime).filter(time => time > breaks[index].start);
        //    breaks[index].end = availableEndTimes[0] || breaks[index].start;
        //    console.log(breaks)
        //    updateBreakOptions();
        //});

        //$(document).on("change", ".break-end", function () {
        //    const index = $(this).data("index");
        //    breaks[index].end = $(this).val();
        //    updateBreakOptions();
        //});

        //$("#addBreakButton").on("click", function () {
        //    addBreak();
        //});

        let startTime = selectedStart;
        let endTime = selectedEnd;
        let breaks = [];

        console.log(selectedStart)
        console.log(selectedEnd)

        updateBreakOptions();

        function generateTimeOptions(start, end) {
            const options = [];
            let currentTime = new Date(`1970-01-01T${start}:00`);
            const endTimeMoment = new Date(`1970-01-01T${end}:00`);

            while (currentTime <= endTimeMoment) {
                options.push(currentTime.toTimeString().substring(0, 5));
                currentTime.setMinutes(currentTime.getMinutes() + 5);
            }
            return options;
        }

        function updateBreakOptions() {
            const $breaksContainer = $("#breaksContainer");
            $breaksContainer.empty();

            breaks.forEach((brk, index) => {
                const breakHtml =
                    `<div class="row mb-2" data-index="${index}">
            <span class="col-4">Break ${index + 1}</span>
            <div class="col-3">
                <select class="form-select break-start" data-index="${index}">
                </select>
            </div>
            <div class="col-3">
                <select class="form-select break-end" data-index="${index}">
                </select>
            </div>
            <div class="col-2">
                <button class="btn btn-danger btn-sm remove-break" data-index="${index}">X</button>
            </div>
        </div>`;
                $breaksContainer.append(breakHtml);
            });

            updateBreakTimes();
        }

        function updateBreakTimes() {
            $(".break-start").each((index, el) => {
                const $startSelect = $(el);
                const $endSelect = $(`.break-end[data-index="${index}"]`);

                const previousStart = breaks[index]?.start || startTime;
                const previousEnd = breaks[index]?.end || endTime;

                let availableTimes = generateTimeOptions(startTime, endTime);

                // Önceki ve sonraki break'lerin zamanlarını engelle
                breaks.forEach((brk, i) => {
                    if (i !== index) {
                        availableTimes = availableTimes.filter(time => !(time >= brk.start && time <= brk.end));
                    }
                });

                // Başlangıç dropdown'unu güncelle
                $startSelect.empty();
                availableTimes.forEach(option => {
                    $startSelect.append(new Option(option, option, false, option === previousStart));
                });

                const selectedStartTime = $startSelect.val() || availableTimes[0];

                let availableEndTimes = availableTimes.filter(time => time > selectedStartTime);

                // Bitiş dropdown'unu güncelle
                $endSelect.empty();
                availableEndTimes.forEach(option => {
                    $endSelect.append(new Option(option, option, false, option === previousEnd));
                });

                breaks[index].start = $startSelect.val();
                breaks[index].end = $endSelect.val();
            });
        }


        //function updateBreakTimes() {
        //    $(".break-start").each((index, el) => {
        //        const $startSelect = $(el);
        //        const $endSelect = $(`.break-end[data-index="${index}"]`);

        //        const previousStart = breaks[index]?.start || startTime;
        //        const previousEnd = breaks[index]?.end || endTime;

        //        let availableTimes = generateTimeOptions(startTime, endTime);

        //        // Mevcut molaların zaman aralıklarını engelle
        //        breaks.forEach((brk, i) => {
        //            if (i !== index) {
        //                availableTimes = availableTimes.filter(time => !(time >= brk.start && time < brk.end));
        //            }
        //        });

        //        // Başlangıç dropdown'unu güncelle
        //        $startSelect.empty();
        //        availableTimes.forEach(option => {
        //            $startSelect.append(new Option(option, option, false, option === previousStart));
        //        });

        //        const selectedStartTime = $startSelect.val() || availableTimes[0];

        //        // Mevcut başlangıç saatinden itibaren ilk çakışan saate kadar olanları al
        //        let availableEndTimes = generateTimeOptions(selectedStartTime, endTime)
        //            .filter(time => time > selectedStartTime)
        //            .filter(time => {
        //                return !breaks.some((brk, i) => i !== index && time >= brk.start && time < brk.end);
        //            });

        //        // Bitiş dropdown'unu güncelle
        //        $endSelect.empty();
        //        availableEndTimes.forEach(option => {
        //            $endSelect.append(new Option(option, option, false, option === previousEnd));
        //        });

        //        breaks[index].start = $startSelect.val();
        //        breaks[index].end = $endSelect.val();
        //    });
        //}

        function addBreak() {
            const lastBreak = breaks.length > 0 ? breaks[breaks.length - 1] : null;

            let newStartTime = lastBreak ? lastBreak.end : startTime;
            let availableTimes = generateTimeOptions(newStartTime, endTime);

            // Mevcut molaların zaman aralıklarını engelle
            breaks.forEach(brk => {
                availableTimes = availableTimes.filter(time => !(time >= brk.start && time <= brk.end));
            });

            if (availableTimes.length < 2) return;

            const newBreak = {
                start: availableTimes[0],
                end: availableTimes[1]
            };

            breaks.push(newBreak);
            updateBreakOptions();
        }

        function removeBreak(index) {
            breaks.splice(index, 1);
            updateBreakOptions();
        }

        // Event Listeners
        $(document).on("click", ".remove-break", function () {
            const index = $(this).data("index");
            removeBreak(index);
        });

        $(document).on("change", ".break-start", function () {
            const index = $(this).data("index");
            breaks[index].start = $(this).val();

            let availableEndTimes = generateTimeOptions(breaks[index].start, endTime).filter(time => time > breaks[index].start);
            breaks[index].end = availableEndTimes[0] || breaks[index].start;
            updateBreakOptions();
        });

        $(document).on("change", ".break-end", function () {
            const index = $(this).data("index");
            breaks[index].end = $(this).val();
            updateBreakOptions();
        });

        $("#addBreakButton").on("click", function () {
            addBreak();
        });

        //let startTime = "09:00";
        //let endTime = "18:00";
        //let breaks = [];

        //updateBreakOptions();

        //function generateTimeOptions(start, end) {
        //    const options = [];
        //    let currentTime = new Date(`1970-01-01T${start}:00`);
        //    const endTimeMoment = new Date(`1970-01-01T${end}:00`);

        //    while (currentTime <= endTimeMoment) {
        //        options.push(currentTime.toTimeString().substring(0, 5));
        //        currentTime.setMinutes(currentTime.getMinutes() + 5);
        //    }
        //    return options;
        //}

        //function updateBreakOptions() {
        //    const $breaksContainer = $("#breaksContainer");
        //    $breaksContainer.empty();

        //    breaks.forEach((brk, index) => {
        //        const breakHtml = `
        //<div class="row mb-2" data-index="${index}">
        //    <span class="col-4">Break ${index + 1}</span>
        //    <div class="col-3">
        //        <select class="form-select break-start" data-index="${index}">
        //        </select>
        //    </div>
        //    <div class="col-3">
        //        <select class="form-select break-end" data-index="${index}">
        //        </select>
        //    </div>
        //    <div class="col-2">
        //        <button class="btn btn-danger btn-sm remove-break" data-index="${index}">X</button>
        //    </div>
        //</div>
        //`;
        //        $breaksContainer.append(breakHtml);
        //    });

        //    updateBreakTimes();
        //}

        //function updateBreakTimes() {
        //    $(".break-start").each((index, el) => {
        //        const $startSelect = $(el);
        //        const $endSelect = $(`.break-end[data-index="${index}"]`);

        //        let availableTimes = generateTimeOptions(startTime, endTime);

        //        // Önceki ve sonraki break'leri dikkate alarak seçenekleri kısıtlayalım
        //        const prevBreakEnd = index > 0 ? breaks[index - 1].end : startTime;
        //        const nextBreakStart = index < breaks.length - 1 ? breaks[index + 1].start : endTime;

        //        availableTimes = availableTimes.filter(time => time >= prevBreakEnd && time < nextBreakStart);

        //        $startSelect.empty();
        //        availableTimes.forEach(option => {
        //            $startSelect.append(new Option(option, option, false, option === breaks[index]?.start));
        //        });

        //        const selectedStartTime = $startSelect.val() || availableTimes[0];

        //        let availableEndTimes = generateTimeOptions(selectedStartTime, endTime)
        //            .filter(time => time > selectedStartTime && time <= nextBreakStart);

        //        $endSelect.empty();
        //        availableEndTimes.forEach(option => {
        //            $endSelect.append(new Option(option, option, false, option === breaks[index]?.end));
        //        });

        //        breaks[index].start = $startSelect.val();
        //        breaks[index].end = $endSelect.val();
        //    });
        //}

        //function addBreak() {
        //    let availableTimes = generateTimeOptions(startTime, endTime);

        //    breaks.forEach(brk => {
        //        availableTimes = availableTimes.filter(time => time < brk.start || time >= brk.end);
        //    });

        //    if (availableTimes.length < 2) return;

        //    const newBreak = {
        //        start: availableTimes[0],
        //        end: availableTimes[1]
        //    };

        //    breaks.push(newBreak);
        //    updateBreakOptions();
        //}

        //function removeBreak(index) {
        //    breaks.splice(index, 1);
        //    updateBreakOptions();
        //}

        //// Event Listeners
        //$(document).on("click", ".remove-break", function () {
        //    const index = $(this).data("index");
        //    removeBreak(index);
        //});

        //$(document).on("change", ".break-start", function () {
        //    const index = $(this).data("index");
        //    breaks[index].start = $(this).val();

        //    let availableEndTimes = generateTimeOptions(breaks[index].start, endTime)
        //        .filter(time => time > breaks[index].start && (index === breaks.length - 1 || time <= breaks[index + 1].start));

        //    breaks[index].end = availableEndTimes[0] || breaks[index].start;
        //    updateBreakOptions();
        //});

        //$(document).on("change", ".break-end", function () {
        //    const index = $(this).data("index");
        //    breaks[index].end = $(this).val();
        //    updateBreakOptions();
        //});

        //$("#addBreakButton").on("click", function () {
        //    addBreak();
        //});



        //let startTime = "09:00";
        //let endTime = "18:00";
        //let breaks = [{ start: "10:10", end: "10:50" }];

        //updateBreakOptions();

        //function generateTimeOptions(start, end) {
        //    const options = [];
        //    let currentTime = new Date(`1970-01-01T${start}:00`);
        //    const endTimeMoment = new Date(`1970-01-01T${end}:00`);

        //    while (currentTime <= endTimeMoment) {
        //        options.push(currentTime.toTimeString().substring(0, 5));
        //        currentTime.setMinutes(currentTime.getMinutes() + 5);
        //    }
        //    return options;
        //}

        //function updateBreakOptions() {
        //    const $breaksContainer = $("#breaksContainer");
        //    $breaksContainer.empty();

        //    breaks.forEach((brk, index) => {
        //        const breakHtml = `
        //<div class="row mb-2" data-index="${index}">
        //    <span class="col-4">Break ${index + 1}</span>
        //    <div class="col-3">
        //        <select class="form-select break-start" data-index="${index}"></select>
        //    </div>
        //    <div class="col-3">
        //        <select class="form-select break-end" data-index="${index}"></select>
        //    </div>
        //    <div class="col-2">
        //        <button class="btn btn-danger btn-sm remove-break" data-index="${index}">X</button>
        //    </div>
        //</div>`;
        //        $breaksContainer.append(breakHtml);
        //    });

        //    updateBreakTimes();
        //}

        //function updateBreakTimes() {
        //    $(".break-start").each((index, el) => {
        //        const $startSelect = $(el);
        //        const $endSelect = $(`.break-end[data-index="${index}"]`);

        //        const previousStart = breaks[index]?.start || startTime;
        //        const previousEnd = breaks[index]?.end || endTime;

        //        let availableTimes = generateTimeOptions(startTime, endTime);

        //        // Önceki ve sonraki molaları kontrol ederek kullanılabilir zamanları belirle
        //        breaks.forEach((brk, i) => {
        //            if (i !== index) {
        //                availableTimes = availableTimes.filter(time => !(time >= brk.start && time < brk.end));
        //            }
        //        });

        //        // Başlangıç dropdown'unu güncelle
        //        $startSelect.empty();
        //        availableTimes.forEach(option => {
        //            $startSelect.append(new Option(option, option, false, option === previousStart));
        //        });

        //        const selectedStartTime = $startSelect.val() || availableTimes[0];

        //        // Mevcut başlangıç zamanına göre uygun bitiş saatlerini belirle
        //        let availableEndTimes = availableTimes.filter(time => time > selectedStartTime);

        //        // Bitiş dropdown'unu güncelle
        //        $endSelect.empty();
        //        availableEndTimes.forEach(option => {
        //            $endSelect.append(new Option(option, option, false, option === previousEnd));
        //        });

        //        breaks[index].start = $startSelect.val();
        //        breaks[index].end = $endSelect.val();
        //    });
        //}

        //function addBreak() {
        //    const lastBreak = breaks.length > 0 ? breaks[breaks.length - 1] : null;
        //    let newStartTime = lastBreak ? lastBreak.end : startTime;
        //    let availableTimes = generateTimeOptions(newStartTime, endTime);

        //    // Mevcut molaların zaman aralıklarını engelle
        //    breaks.forEach(brk => {
        //        availableTimes = availableTimes.filter(time => !(time >= brk.start && time < brk.end));
        //    });

        //    if (availableTimes.length < 2) return;

        //    const newBreak = {
        //        start: availableTimes[0],
        //        end: availableTimes[1]
        //    };

        //    breaks.push(newBreak);
        //    updateBreakOptions();
        //}

        //function removeBreak(index) {
        //    breaks.splice(index, 1);
        //    updateBreakOptions();
        //}

        //// Event Listeners
        //$(document).on("click", ".remove-break", function () {
        //    const index = $(this).data("index");
        //    removeBreak(index);
        //});

        //$(document).on("change", ".break-start", function () {
        //    const index = $(this).data("index");
        //    breaks[index].start = $(this).val();

        //    let availableEndTimes = generateTimeOptions(breaks[index].start, endTime).filter(time => time > breaks[index].start);
        //    breaks[index].end = availableEndTimes[0] || breaks[index].start;

        //    updateBreakOptions();
        //});

        //$(document).on("change", ".break-end", function () {
        //    const index = $(this).data("index");
        //    breaks[index].end = $(this).val();
        //    updateBreakOptions();
        //});

        //$("#addBreakButton").on("click", function () {
        //    addBreak();
        //});
    });
</script>

