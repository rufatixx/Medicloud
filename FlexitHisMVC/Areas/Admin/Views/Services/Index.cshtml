@using Medicloud.Areas.Admin.ViewModels

@{
    ViewData["Title"] = "- Xidmətlər";
}

@model ServicesViewModel
@{
    var headingGroups = Model.ServiceGroups.Where(g => g.isHeading).ToList();
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between my-2 flex-column flex-md-row">
            <h4 class="page-title">Xidmətlər</h4>

            <div class="">
                <form class="d-flex">
                    <button type="button" class="btn btn-primary ms-md-2" onclick=" $('#addGroup').modal('show')"><i class="mdi mdi-plus-circle"></i> Qrup əlavə et</button>

                    <button type="button" class="btn btn-primary ms-2" onclick=" $('#addServiceToGroup').modal('show')"><i class="mdi mdi-plus-circle"></i> Xidmət əlavə et</button>

                </form>
            </div>
        </div>
    </div>
</div>


<div class="row">

    <div class="col-md-2">
        <div class="card">
            <ul class="nav nav-tabs nav-bordered" role="tablist">
                <li class="nav-item" role="presentation">
                    <a data-bs-toggle="tab" aria-expanded="false" class="nav-link active py-2" aria-selected="true" role="tab">
                        Qruplar
                    </a>
                </li>


            </ul>

            <div class="list-group" style="max-height:55vh;overflow:auto;" id="cGroups">

                <div class="accordion" id="accordionExample">
                    @foreach (var heading in headingGroups)
                    {
                        var childGroups = Model.ServiceGroups.Where(g => !g.isHeading && g.parent == heading.ID).ToList();

                        <div class="accordion-item">
                            <h2 class="accordion-header" id="heading@(heading.ID)">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse@(heading.ID)" aria-expanded="false" aria-controls="collapse@(heading.ID)">
                                    @heading.name
                                </button>
                            </h2>
                            <div id="collapse@(heading.ID)" class="accordion-collapse collapse" aria-labelledby="heading@(heading.ID)" data-bs-parent="#accordionExample">
                                <div class="accordion-body">
                                    @foreach (var child in childGroups)
                                    {
                                        <div class="accordion-item">
                                            <a class="list-group-item list-group-item-action group-item" href="#" data-child-id="@child.ID">
                                                @child.name
                                            </a>

                                            <div class="accordion-collapse collapse" id="collapse@(child.ID)" aria-labelledby="heading@(child.ID)" data-bs-parent="#collapse@(heading.ID)">
                                                <div class="accordion-body">
                                                </div>
                                            </div>


                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>


    </div>
    <div class="col-md-6">
        <div class="card">
            <ul class="nav nav-tabs nav-bordered" role="tablist">
                <li class="nav-item" role="presentation">
                    <a data-bs-toggle="tab" aria-expanded="false" class="nav-link active generalSettingsButton py-2" aria-selected="true" role="tab" onclick="settingsBoxClicked(1)">
                        Xidmətlər
                    </a>
                </li>


            </ul>
            <div class="card-header ">
                <div class="row align-items-center ">
                    <div class="col-md-10">
                        <!-- start search box -->
                        <div class="app-search">
                            <form>
                                <div class="mb-2 w-100 position-relative">
                                    <input type="search" class="form-control" id="serviceSearch" placeholder="Axtar...">
                                    <span class="mdi mdi-magnify search-icon"></span>
                                </div>
                            </form>
                        </div>
                        <!-- end search box -->
                    </div>
                    <div class="col-md-2">
                        <div class="form-check text-md-end">
                            <input class="form-check-input" type="checkbox" id="showAllServices" checked>
                            <label class="form-check-label" for="showAllServices">Hamısı</label>
                        </div>
                    </div>
                </div>

            </div>



            <div class="table-responsive">
                <div class="row border-top p-2">
                    <div class="col-md-6 text-left">
                        <strong class="text-primary">ADI</strong>
                    </div>
                    <div class="col-md-6 d-flex justify-content-end">
                        <strong class="text-primary">KODU</strong>
                    </div>
                </div>
                <ul class="list-group rounded-0 " style="max-height:55vh;overflow:auto;" id="servicesInGroup">
                    @if (Model.Services != null)
                    {
                        foreach (var service in Model.Services)
                        {
                            <li class="list-group-item list-group-item-action d-flex justify-content-between"
                                data-id="@service.ID"
                                data-name="@service.name"
                                data-price="@service.price"
                                data-code="@service.code"
                                data-servicetypeid="@service.serviceTypeID"
                                data-depid=""
                                data-servicegroupid="@service.serviceGroupID"
                                data-isactive="@service.isActive.ToString().ToLower()">
                                <div>@service.name</div>
                                <div>@(string.IsNullOrEmpty(service.code) ? "-" : service.code)</div>
                            </li>
                        }
                    }

                    <!-- Service items here -->
                </ul>
            </div>

        </div>
    </div>



    <!--<div class="col-md-6">
    <div class="card">
    <ul class="nav nav-tabs nav-bordered" role="tablist">
    <li class="nav-item" role="presentation">
    <a data-bs-toggle="tab" aria-expanded="false" class="nav-link active py-2" aria-selected="true" role="tab">
    Xidmət siyahısı
    </a>
    </li>


    </ul>
    <div class="card-header">

    <div class="row align-items-center
    ">

    <div class="col-md-10 ">-->
    <!-- start search box -->
    <!--<div class="app-search">
    <form>
    <div class="mb-2 w-100 position-relative">
    <input type="search" class="form-control" id="serviceSearch" placeholder="Axtar...">
    <span class="mdi mdi-magnify search-icon"></span>
    </div>
    </form>
    </div>-->
    <!-- end search box -->
    <!--</div>
    <div class="col-md-2">
    <div class="form-check text-md-end">
    <input class="form-check-input" type="checkbox" id="showAllServices" checked>
    <label class="form-check-label" for="showAllServices">Hamısı</label>
    </div>
    </div>
    </div>
    </div>
    <div class="row ">
    <div class="col-md-6 text-center">
    <strong>Xidmətin adı</strong>
    </div>
    <div class="col-md-6 text-center">
    <strong>Kodu</strong>
    </div>
    </div>
    <div class="list-group" id="servicesInGroup">-->
    <!-- Service items here -->
    <!--</div>
    </div>





    </div>-->
    <div class="col-md-4 ">

        <div class="card serviceSettings">
            <ul class="nav nav-tabs nav-bordered" role="tablist">
                <li class="nav-item" role="presentation">
                    <a data-bs-toggle="tab" aria-expanded="false" class="nav-link active generalSettingsButton py-2" aria-selected="true" role="tab" onclick="settingsBoxClicked(1)">
                        Ümumi
                    </a>
                </li>
                <li class="nav-item" role="presentation">
                    <a data-bs-toggle="tab" aria-expanded="false" class="nav-link accessSettingsButton py-2" aria-selected="true" role="tab" onclick="settingsBoxClicked(2)">
                        İcazələr
                    </a>
                </li>

            </ul>
            @*<div class="card-header">
                    <ul class="nav nav-tabs card-header-tabs">
                        <li class="nav-item">
                            <a class="nav-link active generalSettingsButton" onclick="settingsBoxClicked(1)">Ümumi</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link accessSettingsButton" onclick="settingsBoxClicked(2)">İcazələr</a>
                        </li>

                    </ul>
                </div>*@
            <div class="card-body">
                <div class="generalSettings">
                    <form id="updateServiceForm" novalidate>

                        <div class="form-group">
                            <div class="row align-items-center">
                                <div class="col-md-12 mb-3">
                                    <label class="form-label">Xidmətin adı</label>
                                    <input type="text" class="form-control" required id="serviceNameInSettings"
                                           placeholder="Xidmətin adı">

                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Kod</label>
                                    <input type="text" class="form-control" required id="serviceCodeInSettings"
                                           placeholder="Xidmətin kodu">

                                </div>
                                <div class="col-md-6 mb-3">

                                    <label class="form-label">Tip</label>
                                    <select class="form-control cGroupsAll" id="serviceTypeInSettings" required>
                                    </select>


                                </div>
                                <div class="col-md-6 mb-3">

                                    <label class="form-label">Qrup</label>
                                    <select class="form-control cGroupsAll" id="selectedServiceGroupInSettings" required>
                                        @if (Model.ServiceGroups != null)
                                        {
                                            <option value="0">Seçin</option>
                                            foreach (var item in Model.ServiceGroups.Where(c => c.parent!=0))
                                            {
                                                <option value="@item.ID">@item.name</option>
                                            }
                                        }
                                    </select>


                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Qiymət</label>
                                    <input type="number" class="form-control" required id="servicePriceInSettings"
                                           placeholder="Xidmətin qiyməti">

                                </div>
                                <div class="col-md-9 mb-3">

                                    <label class="form-label">Şöbələr</label>
                                    <select class="form-control " id="serviceDepInSettings">
                                    </select>


                                </div>
                                <div class="col-md-2 d-flex align-items-center">

                                    <button type="button" class="btn btn-primary" id="addDepBtn" style="display:none;" onclick="{$('#addDepToServiceModal').modal('show');}">
                                        <i class="ri-add-circle-fill"></i>
                                    </button>

                                    <button type="button" class="btn btn-danger ms-2" style="display:none;" id="deleteDepBtn">
                                        <i class="ri-delete-bin-line"></i>
                                    </button>
                                </div>

                                <button id="updateButton" style="display:none;" class="btn btn-primary justify-content-center">
                                    Yadda saxla
                                </button>
                            </div>
                        </div>
                    </form>


                </div>
                <div class="accessSettings">

                    <div class="form-group">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox"  id="serviceIsActive">
                            <label class="form-check-label">
                                Aktiv
                            </label>
                        </div>

                    </div>


                </div>
            </div>

        </div>


    </div>



</div>




<!--<div class="modal fade" id="addCompanyGroup" data-backdrop="static" data-keyboard="false" tabindex="-1"
aria-labelledby="staticBackdropLabel" aria-hidden="true">
<div class="modal-dialog modal-xl modal-dialog-scrollable">
<div class="modal-content">
<div class="modal-header border-0">
<h5 class="modal-title" id="warningTitle">Qruplar</h5>
<button type="button" class="close" data-dismiss="modal" aria-label="Close">
<span aria-hidden="true">&times;</span>
</button>
</div>
<div class="modal-body pb-0 pt-0">



<div class="row">

<div class="col-md-6 border-right">
<div class="row ">
<div class="col-12">
<div class="row align-items-end">
<div class="col-md-6"><label>Başlıq</label></div>
<div class="col-md-6 text-right">
<button type="button" class="btn" onclick="{$('#addOrganization').modal('show');}">
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
<path fill-rule="evenodd" clip-rule="evenodd" d="M15 13H13V15C13 15.55 12.55 16 12 16C11.45 16 11 15.55 11 15V13H9C8.45 13 8 12.55 8 12C8 11.45 8.45 11 9 11H11V9C11 8.45 11.45 8 12 8C12.55 8 13 8.45 13 9V11H15C15.55 11 16 11.45 16 12C16 12.55 15.55 13 15 13ZM12 2C6.486 2 2 6.486 2 12C2 17.514 6.486 22 12 22C17.514 22 22 17.514 22 12C22 6.486 17.514 2 12 2Z" fill="#2AAEAD"></path>
</svg>
</button>
</div>
</div>
</div>
<div class="col-12">
<div class="card border-0">
<div class="card-header bg-white ">
<div class="row">
<div class="col-md-6"><label>Adı</label></div>

</div>
</div>
</div>
<div class="list-group" id="cGroups">



</div>
</div>
</div>






<div class="form-group">-->
<!-- <h3 style="text-align:right; margin-right:2%"><span class="badge badge-secondary">Cəmi: ---</span></h1> -->
<!--<div class="row">

<div class="col-md-12 text-center">


<button type="button" style="color: #2AAEAD " class="btn btn-link justify-content-center w-100"
onclick="insertCGroup()">
Daha çox
</button>



</div>




</div>



</div>

</div>


<div class="col-md-6 ">
<div class="row ">
<div class="col-12">
<div class="row align-items-end">
<div class="col-md-6"><label>Üst grup</label></div>
<div class="col-md-6 text-right">
<button type="button" class="btn" onclick="{$('#addDepToServiceModal').modal('show');}">
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
<path fill-rule="evenodd" clip-rule="evenodd" d="M15 13H13V15C13 15.55 12.55 16 12 16C11.45 16 11 15.55 11 15V13H9C8.45 13 8 12.55 8 12C8 11.45 8.45 11 9 11H11V9C11 8.45 11.45 8 12 8C12.55 8 13 8.45 13 9V11H15C15.55 11 16 11.45 16 12C16 12.55 15.55 13 15 13ZM12 2C6.486 2 2 6.486 2 12C2 17.514 6.486 22 12 22C17.514 22 22 17.514 22 12C22 6.486 17.514 2 12 2Z" fill="#2AAEAD"></path>
</svg>
</button>
</div>
</div>
</div>
<div class="col-12">
<div class="card border-0">
<div class="card-header bg-white">
<div class="row">
<div class="col-md-6"><label>Adı</label></div>

</div>
</div>
</div>
<div class="list-group" id="cGroups">



</div>
</div>
</div>






<div class="form-group">-->
<!-- <h3 style="text-align:right; margin-right:2%"><span class="badge badge-secondary">Cəmi: ---</span></h1> -->
<!--<div class="row">

<div class="col-md-12 text-center">


<button type="button" style="color: #2AAEAD " class="btn btn-link justify-content-center w-100"
onclick="insertCGroup()">
Daha çox
</button>


</div>




</div>



</div>

</div>-->
<!--<div class="col-md-4">
<div class="row ">
<div class="col-12">
<div class="row align-items-end">
<div class="col-md-6"><label>Alt grup</label></div>
<div class="col-md-6 text-right">
<button type="button" class="btn" onclick="{$('#addOrganization').modal('show');}">
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
<path fill-rule="evenodd" clip-rule="evenodd" d="M15 13H13V15C13 15.55 12.55 16 12 16C11.45 16 11 15.55 11 15V13H9C8.45 13 8 12.55 8 12C8 11.45 8.45 11 9 11H11V9C11 8.45 11.45 8 12 8C12.55 8 13 8.45 13 9V11H15C15.55 11 16 11.45 16 12C16 12.55 15.55 13 15 13ZM12 2C6.486 2 2 6.486 2 12C2 17.514 6.486 22 12 22C17.514 22 22 17.514 22 12C22 6.486 17.514 2 12 2Z" fill="#2AAEAD"></path>
</svg>
</button>
</div>
</div>
</div>
<div class="col-12">
<div class="card border-0">
<div class="card-header bg-white">
<div class="row">
<div class="col-md-6"><label>Adı</label></div>

</div>
</div>
</div>
<div class="list-group" id="cGroups">



</div>
</div>
</div>






<div class="form-group">-->
<!-- <h3 style="text-align:right; margin-right:2%"><span class="badge badge-secondary">Cəmi: ---</span></h1> -->
<!--<div class="row">

<div class="col-md-12 text-center">


<button type="button" style="color: #2AAEAD " class="btn btn-link justify-content-center w-100"
onclick="insertCGroup()">
Daha çox
</button>



</div>




</div>



</div>

</div>-->
<!--</div>




</div>

</div>
</div>
</div>-->
<div class="modal fade" id="addGroup" data-backdrop="static" data-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">

                <h5 class="modal-title" id="staticBackdropLabel"><img src="/res/pencil.svg" style="width: 30px; height: 30px;" /> Başlıq və ya qrupun əlavə edilməsi</h5>



                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addGroupForm" novalidate>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="groupName" class="form-label">Adı</label>
                        <input type="text" class="form-control" required id="groupName" placeholder="Daxil edin...">
                        <div class="valid-feedback">
                            Əla!
                        </div>
                        <div class="invalid-feedback">
                            Boşluğu doldurun.
                        </div>
                    </div>
                    <div class="form-group mb-3" style="display:none">
                        <label for="cGroupsInModal" class="form-label">Başlıq</label>
                        <select class="form-control cGroupsAll" id="cGroupsInModal" required>
                            @if (Model.ServiceGroups != null)
                            {
                                foreach (var item in Model.ServiceGroups.Where(c => c.isHeading))
                                {
                                    <option value="@item.ID">@item.name</option>
                                }
                            }
                        </select>
                        <div class="valid-feedback">
                            Əla!
                        </div>
                        <div class="invalid-feedback">
                            Başlıq seçin.
                        </div>
                    </div>

                </div>
                <div class="modal-footer justify-content-between">
                    <div class="form-check">
                        <input class="form-check-input" checked type="checkbox" id="isHeading">
                        <label class="form-check-label" for="isHeading">Başlıq</label>
                    </div>
                    <button class="btn btn-success">
                        Əlavə et
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="addDepToServiceModal" data-backdrop="static" data-keyboard="false" tabindex="-1"
     aria-labelledby="addDepToServiceModalLabel" aria-hidden="true">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="addDepToServiceModalLabel">
                    <img src="/res/pencil.svg" style="width: 30px; height: 30px;" />
                    Seçilmiş xidmətə şöbə əlavə et
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label for="selectDepartment" class="form-label">Şöbələr</label>
                    <select class="form-control" id="selectDepartment" required>
                        @if (Model.Departments != null)
                        {

                            foreach (var item in Model.Departments)
                            {
                                <option value="@item.ID">@item.name</option>
                            }
                        }
                        <!-- Options should be dynamically generated based on available departments -->
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" onclick="addDepartmentToService()">
                    Əlavə et
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addServiceToGroup" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="staticBackdropLabel"><img src="/res/pencil.svg" style="width: 30px; height: 30px;" /> Xidmət qrupuna əlavə edilməsi</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addServiceForm" novalidate>
                <div class="modal-body  bg-white p-4 rounded-lg" style="margin-top:2%">

                    <div class="form-group mb-3">
                        <label for="serviceName" class="form-label">Xidmətin adı</label>
                        <input type="text" class="form-control" required id="serviceName" placeholder="Daxil edin...">
                        <div class="valid-feedback">
                            Əla!
                        </div>
                        <div class="invalid-feedback">
                            Boşluğu doldurun.
                        </div>
                    </div>
                    <div class="form-group mb-3">
                        <label for="serviceName" class="form-label">Kodu</label>
                        <input type="text" class="form-control" id="serviceCode" placeholder="Daxil edin...">
                        <div class="valid-feedback">
                            Əla!
                        </div>
                        <div class="invalid-feedback">
                            Boşluğu doldurun.
                        </div>
                    </div>
                    <div class="form-group mb-3">
                        <label for="servicePrice" class="form-label">Xidmətin qiyməti</label>
                        <input type="number" class="form-control" required id="servicePrice" placeholder="Daxil edin...">
                        <div class="valid-feedback">
                            Əla!
                        </div>
                        <div class="invalid-feedback">
                            Boşluğu doldurun.
                        </div>
                    </div>
                    <div class="form-group mb-3">
                        <label for="groupsInModal" class="form-label">Qrup</label>
                        <select class="form-control cGroupsAll" id="groupsInModal">
                            <option value="0">Seçin</option>

                            @if (Model.ServiceGroups != null)
                            {
                                foreach (var item in Model.ServiceGroups.Where(c => !c.isHeading))
                                {
                                    <option value="@item.ID">@item.name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="newServiceIsActive" checked>
                        <label class="form-check-label" for="newServiceIsActive">Aktiv</label>
                    </div>

                </div>
                <div class="modal-footer justify-content-between">
                    <button class="btn btn-success">
                        Əlavə et
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>



@section Scripts
{

    <script>
        $(document).ready(function () {
            $('#isHeading').on('change', function () {
                var isHeadingChecked = $(this).prop('checked');
                var subGroupSelect = $('#cGroupsInModal').closest('.form-group');

                if (isHeadingChecked) {
                    subGroupSelect.hide();
                } else {
                    subGroupSelect.show();
                }
            });




            $('#servicesInGroup').on('click', 'li', function () {
                // Unselect previously selected service
                $('#servicesInGroup .active').removeClass('active');
                // Select the current service
                $(this).addClass('active');
                activeChildGroup=$(this);
                selectedServiceId=$(this).data('id');
                // Create service object from data attributes
                var service = {
                       id: selectedServiceId,
                       name: $(this).data('name'),
                       price: $(this).data('price'),
                       code: $(this).data('code'),
                       serviceTypeID: $(this).data('servicetypeid'),
                       depID: $(this).data('depid'),
                       serviceGroupID: $(this).data('servicegroupid'),
                       isActive: $(this).data('isactive') === true || $(this).data('isactive') === "true"
                   };


                fillServiceSettings(service);
            });

            let $groupForm = $('#addGroupForm');

            $groupForm.on('submit', function(e) {
                    e.preventDefault();
                    var form=$(this)[0];
                    $(form).addClass('was-validated');
                    if(!form.checkValidity()){
                        return;
                    }
                    else{
                        let isHeadingValue=$('#isHeading').prop('checked');
                        var serviceGroup = {
                            id: 0,
                            name: $('#groupName').val(),
                            isHeading: isHeadingValue,
                            parent: isHeadingValue ? 0 : +$('#cGroupsInModal').val()
                        };

                      showLoading();
                      $.ajax({
                        type: 'POST',
                        url: `/admin/services/InserServiceGroup`,
                        data: JSON.stringify(serviceGroup),
                        contentType: 'application/json',
                        success: function (data, status, xhr) {
                            window.location.reload();

                        },
                        error: function (jqXhr, textStatus, errorMessage) { // error callback
                            $('#addGroup').modal('hide')
                            showError(jqXhr.status);
                            hideLoading();
                        }

                   });
                }

            });



            let $serviceForm = $('#addServiceForm');

            $serviceForm.on('submit', function(e) {
                    e.preventDefault();
                    var form=$(this)[0];
                    $(form).addClass('was-validated');
                    if(!form.checkValidity()){
                        return;
                    }
                    else{
                         generateUniqueServiceCode()
                        // Get the values from the modal's fields
                        let serviceName = $('#serviceName').val();
                        let servicePrice = $('#servicePrice').val();
                        let serviceCode = $('#serviceCode').val();
                        let groupID = $('#groupsInModal').val();
                        let isActive = $('#newServiceIsActive').is(':checked');

                        // Check if any of the fields is empty
                        if (serviceName === "" || servicePrice === "" || groupID === "") {
                            alert("Zəhmət olmasa bütün boşluqları doldurun");
                            return; // End the function here if any field is empty
                        }
                        if (serviceCode == '') {
                            generateUniqueServiceCode()
                            serviceCode = $('#serviceCode').val();
                        }

                        // Construct the service object
                        let serviceObj = {
                            name: serviceName,
                            code: serviceCode,
                            price: servicePrice,
                            serviceGroupID: groupID,
                            organizationID: localStorage.selectedOrganization,
                            isActive: isActive
                        };

                        showLoading();
                        // Send the service object to the server-side endpoint for insertion
                        $.ajax({
                            url: '@Url.Action("InsertService", "Services", new { Area = "Admin" })',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(serviceObj),
                            success: function (response) {
                                window.location.reload();

                                // handleCheckboxState()
                                // Refresh your data here (e.g., call a function that fetches and displays the new list of services)
                            },
                            error: function (xhr, status, error) {
                                if (xhr.status === 400) {
                                    // Bad Request - Invalid data or missing required fields
                                    alert(xhr.responseText); // Display the error message from the backend
                                } else if (xhr.status === 409) {
                                    // Conflict - A matching record already exists
                                    alert(xhr.responseText); // Display the error message from the backend
                                } else {
                                    // Other errors
                                    alert("Xəta biraz sonra, yenidən yoxlayın");
                                    console.error('Error inserting service:', error);
                                }
                            }
                        });
                }

            });
             let selectedServiceId;

              function updateService() {
                    showLoading();

                    var serviceName = $('#serviceNameInSettings').val();
                    var servicePrice = $('#servicePriceInSettings').val();
                    var selectedGroupID = $('#selectedServiceGroupInSettings').val();
                    var selectedDepID = $('#serviceDepInSettings').val();
                    var selectedServiceTypeID = $('#serviceTypeInSettings').val();
                    var isActive = $('#serviceIsActive').is(':checked');

                    // Create the service object
                    var service = {
                        ID: selectedServiceID,
                        price: servicePrice,
                        name: serviceName,
                        serviceGroupID: selectedGroupID,
                        serviceTypeID: selectedServiceTypeID,
                        depID: selectedDepID,
                        isActive: isActive
                  };
     
                    $.ajax({
                        url: '@Url.Action("UpdateService", "Services", new { Area = "Admin" })',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(service),
                        success: function (response) {
                            window.location.reload();
                        },
                        error: function (error) {
                            alert('Error occurred while updating service:', error);
                            // Handle the error scenario appropriately
                            hideLoading();
                        }
                    });
                }
            let $updateServiceForm = $('#updateServiceForm');



            $updateServiceForm.on('submit', function(e) {
                    e.preventDefault();
                    var form=$(this)[0];
                    $(form).addClass('was-validated');
                    if(!form.checkValidity()){
                        return;
                    }
                    else{
                      updateService();
                    }

            });
             
            $('#serviceIsActive').on('change', function () {
             
                updateService();
            });
            

             $('#deleteDepBtn').on('click', function () {
                 showLoading();
                 $.ajax({
                        url: '@Url.Action("DeleteDepartmentFromService", "Services", new { Area = "Admin" })',
                        type: 'GET',
                        data: {
                            serviceId:selectedServiceId, // Update this with how you are storing the current service ID
                            departmentId: $('#serviceDepInSettings').val()
                        },
                        success: function (response) {
                            hideLoading();
                            alert("Şöbə xidmətdən uğurla silindi");
                            fetchDepartmentsInService(selectedServiceID)
                            // Handle any updates to your UI here
                        },
                        error: function (error) {
                            hideLoading();
                            console.log(error);
                            alert("Xəta baş verdi");
                        }
                    });


             });


             $('#showAllServices').on('change', function () {
             
                 if($(this).prop('checked')){
                    $('.group-item').removeClass('active');
                    $('#servicesInGroup li').removeClass('active d-none')
                    fillServiceSettings(null);
                 }

             
             });

             $('.group-item').on('click', function () {


                 if ($(this).hasClass('active')) {
                     $('#showAllServices').prop('checked', true);
                     $('.group-item').removeClass('active');
                     $('#servicesInGroup li').removeClass('active d-none');
                     fillServiceSettings(null);
                     return;
                 }
                 let groupId=$(this).data('child-id');
                 $('.group-item').removeClass('active');
                 $(this).addClass('active')
                 $('#servicesInGroup li').removeClass('active')
                 $('#servicesInGroup li').each(function () {
                     console.log($(this).data('servicegroupid'))
                     console.log(groupId)
                       if ($(this).data('servicegroupid') == groupId) {
                        $(this).removeClass('d-none');
                       } else {
                        $(this).addClass('d-none'); 
                       }

                 });
                 fillServiceSettings(null);
                 $('#showAllServices').prop('checked',false)
             });


           function showError(status){

               switch (status) {
                  case 401:
                      $('#systemModalTitle').text("Sessiyanız başa çatıb");
                      $('#systemModalText').html(`<p id="systemModalText">Zəhmət olmasa yenidən giriş edin</p>`);
                      $('#systemModalBtn').removeAttr("hidden");
                      $('#systemModal').modal("show");
                      break;
                  case 0:
                      $('#warningModal').modal('show')
                      $('#warningTitle').text(`Şəbəkə xətası`);
                      $('#warningText').text(`Serverlərimizlə əlaqə yoxdur`);
                      break;
                  default:
                      $('#warningModal').modal('show')
                      $('#warningTitle').text(`Server xətası`);
                      $('#warningText').text(`Status: ${status}`);
                      break;

               }
           }
        });
    </script>





    <script>
        // Function to fetch and populate groups
                var activeChildGroup;
                var selectedServiceID;

                $('.generalSettings').show();
                $('.accessSettings').hide();

                $('.generalSettingsButton').addClass('active');
                $('.accessSettingsButton').removeClass('active');
                function settingsBoxClicked(tabIndex) {
                    if (tabIndex === 1) {
                        $('.generalSettings').show();
                        $('.accessSettings').hide();

                        $('.generalSettingsButton').addClass('active');
                        $('.accessSettingsButton').removeClass('active');
                    } else if (tabIndex === 2) {
                        $('.generalSettings').hide();
                        $('.accessSettings').show();

                        $('.generalSettingsButton').removeClass('active');
                        $('.accessSettingsButton').addClass('active');
                    }
                }






                // var servicesBeforeAllShown;


                // $('#showAllServices').on('change', function () {
                //     handleCheckboxState()
                //     if ($(this).is(":checked")) {
                //        // Remove "active" class from all list items within all accordion items
                //        $('.accordion .list-group-item').removeClass('active');

                //        // Checkbox is checked

                //        // Save the current state of services
                //        servicesBeforeAllShown = $('#servicesInGroup').children().clone();

                //        // Call fetchServicesWithGroupNames(0) to show all services
                //        // fetchServicesWithGroupNames(0);
                //     } else {
                //        // Checkbox is unchecked
                //        // Restore services to their state before "Show All" was selected
                //        $('#servicesInGroup').empty().append(servicesBeforeAllShown);

                //        // Reselect the active child group
                //        if (activeChildGroup) {
                //            activeChildGroup.click();
                //        }
                //     }
                // });








                function fillServiceSettings(service) {
                    var serviceSettingsCard = $('#serviceSettingsCard');


                    if (service) {
                        // Enable the service settings card
                        selectedServiceID = service.id;
                        fetchDepartmentsInService(selectedServiceID)
                        $('#serviceNameInSettings').prop('disabled', false);
                        $('#selectedServiceGroupInSettings').prop('disabled', false);
                        $('#serviceIsActive').prop('disabled', false);
                        $('#updateService').prop('disabled', false);
                        $('#serviceDepInSettings').prop('disabled', false);
                        $('#servicePriceInSettings').prop('disabled', false);
                        $('#serviceTypeInSettings').prop('disabled', false);
                        //$('#serviceCodeInSettings').prop('disabled', false);



                        $('#serviceNameInSettings').val(service.name);
                        $('#servicePriceInSettings').val(service.price);
                        $('#serviceTypeInSettings').val(service.serviceTypeID);
                        $('#serviceCodeInSettings').val(service.code);
                        $('#serviceDepInSettings').val(service.depID);
                        $('#selectedServiceGroupInSettings').val(service.serviceGroupID);
                        $('#serviceIsActive').prop('checked', service.isActive);
                        $('#updateButton').show();
                        $('#addDepBtn').show();
                        $('#deleteDepBtn').show();

                    } else {
                        // Disable the service settings card
                        $('#serviceNameInSettings').prop('disabled', true);
                        $('#serviceCodeInSettings').prop('disabled', true);
                        $('#serviceTypeInSettings').prop('disabled', true);
                        $('#selectedServiceGroupInSettings').prop('disabled', true);
                        $('#serviceIsActive').prop('disabled', true);
                        $('#updateService').prop('disabled', true);
                        $('#serviceDepInSettings').prop('disabled', true);
                        $('#servicePriceInSettings').prop('disabled', true);


                        $('#serviceNameInSettings').val('');
                        $('#serviceCodeInSettings').val('');
                        $('#serviceTypeInSettings').val('');
                        $('#serviceDepInSettings').val('');
                        $('#selectedServiceGroupInSettings').val('');
                        $('#servicePriceInSettings').val('');
                        $('#serviceIsActive').prop('checked', false);
                        $('#updateButton').hide();
                        $('#addDepBtn').hide();
                        $('#deleteDepBtn').hide();

                    }
                }


                function fetchServiceTypes() {
                    $.ajax({
                        url: '@Url.Action("GetServiceTypes", "Services", new { Area = "Admin" })',
                        type: 'GET',
                        success: function (response) {
                            var serviceTypesSelect = $('#serviceTypeInSettings');

                            serviceTypesSelect.empty();

                            $.each(response, function (index, serviceType) {
                                var option = $('<option>')
                                    .attr('value', serviceType.id)
                                    .text(serviceType.name);

                                serviceTypesSelect.append(option);
                            });
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
                function fetchDepartmentsInService(serviceID) {
                    $.ajax({
                        url: '@Url.Action("GetDepartmentsInService", "Services", new { Area = "Admin" })',
                        type: 'GET',
                        data: { serviceID: serviceID },
                        success: function (response) {
                            var departmentsSelect = $('#serviceDepInSettings');
                              if(response.length>0){
                                $('#deleteDepBtn').show();
                                    $.each(response, function (index, department) {
                                    var option = $('<option>')
                                        .attr('value', department.id)
                                        .text(department.name);

                                    departmentsSelect.append(option);
                                });
                            }
                            else{
                                $('#deleteDepBtn').hide();

                            }
                            departmentsSelect.empty();

                            $.each(response, function (index, department) {
                                var option = $('<option>')
                                    .attr('value', department.id)
                                    .text(department.name);

                                departmentsSelect.append(option);
                            });
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }


                // function handleCheckboxState() {
                //     if ($('#showAllServices').is(":checked")) {
                //         // If checked, perform the same operations as in the change event handler
                //         $('.accordion .list-group-item').removeClass('active');
                //         servicesBeforeAllShown = $('#servicesInGroup').children().clone();
                //         // fetchServicesWithGroupNames(0);
                //     } else {
                //         // If not checked, perform the operations for the unchecked case
                //         $('#servicesInGroup').empty().append(servicesBeforeAllShown);
                //         if (activeChildGroup) {
                //             activeChildGroup.click();
                //         }
                //     }
                // }
                function loadData() {
                    showLoading();



                    // Once all data loading is complete
                    // Fill service settings and hide loading indicator
                    Promise.all([
                        // fetchDepartments(),
                        fetchServiceTypes(),
                        // fetchGroups(),
                        // handleCheckboxState()

                    ]).then(function () {
                        fillServiceSettings(null);
                        hideLoading();
                    }).catch(function (error) {
                        console.log(error);
                        hideLoading();
                    });
                }

                function generateUniqueServiceCode() {
                    // Get the current date and time
                    const now = new Date();

                    // Format the date and time to include year, month, day, hours, minutes, seconds, and milliseconds
                    // This creates a string like '20230307T141520123'
                    const uniqueCode = now.getFullYear().toString() +
                        (now.getMonth() + 1).toString().padStart(2, '0') + // Months are 0-based
                        now.getDate().toString().padStart(2, '0') +
                        'T' + // Separating date and time with a 'T'
                        now.getHours().toString().padStart(2, '0') +
                        now.getMinutes().toString().padStart(2, '0') +
                        now.getSeconds().toString().padStart(2, '0') +
                        now.getMilliseconds().toString().padStart(3, '0');

                    // Set the generated unique code as the value of the 'serviceCode' input field
                    $('#serviceCode').val(uniqueCode);

                    // For purposes outside of setting the value directly, you might want to return it
                    return uniqueCode;
                }




                function addDepartmentToService() {

                    // Get the selected department from the dropdown
                    var selectedDepartmentId = $("#selectDepartment").val();

                    // Validate that a department was selected
                    if (!selectedDepartmentId) {
                        alert("Zəhmət olmasa şöbə seçin");
                        return;
                    }

                    // Assuming you have the serviceId available, add the department to the service
                    // This will need to be an AJAX call or similar to your backend system, like:
                    showLoading();
                    $.ajax({
                        url: '@Url.Action("InsertDepartmentToService", "Services", new { Area = "Admin" })',
                        type: 'GET',
                        data: {
                            serviceId: selectedServiceID, // Update this with how you are storing the current service ID
                            departmentId: selectedDepartmentId
                        },
                        success: function (response) {
                            hideLoading();
                            alert("Şöbə xidmətə uğurla əlavə edildi");
                            fetchDepartmentsInService(selectedServiceID)
                            // Handle any updates to your UI here
                        },
                        error: function (error) {
                            hideLoading();
                            console.log(error);
                            alert("Xəta baş verdi");
                        }
                    });
                }

                loadData();




                $(document).ready(function () {

                    $('#serviceSearch').on('keyup input', function () {
                        var value = $(this).val().toLowerCase();

                        $("#servicesInGroup .list-group-item").each(function () {
                            var serviceName = $(this).find('div').first().text().toLowerCase();

                            if (serviceName.includes(value)) {
                                $(this).removeClass('d-none');
                            } else {
                                $(this).addClass('d-none');
                            }
                        });
                    });

                    loadData()

                });</script>
    @*<script src="~/js/admin/companies/companySettings.js" asp-append-version="true"></script>*@

}