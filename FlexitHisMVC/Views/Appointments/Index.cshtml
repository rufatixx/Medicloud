@model Medicloud.BLL.Models.AppointmentPagedResult;

@{
    ViewData["Title"] = "Appointment Page";

}


<div class="col-12">
    <div class="page-title-box">
        <div class="page-title-right">
            <a href="javascript:window.print()">
                <button type="button" class="btn btn-primary w-md bg-blue-light radius-10">
                    <i class="ri-printer-line"></i>Çap et
                </button>
            </a>
            <a id="new-appointment"
               data-bs-toggle="modal"
               data-bs-target="#add-appointment-modal"
               class="btn btn-primary w-md bg-blue radius-10">
                + Yeni növbə
            </a>
        </div>
        <h2 class="page-title">eNövbələr</h2>
    </div>
</div>

<div class="row">
    <div class="col-12 ">

        <div class="card rounded-4">

            <div class="card-body">
                <div id="datatable_wrapper" class="dataTables_wrapper dt-bootstrap4 no-footer">

                    <div class="row">
                        <div class="col-sm-12 table-responsive">
                            <table id="datatable"
                                   class="table table table-striped table-borderless dt-responsive nowrap w-100 dataTable no-footer dtr-inline"
                                   role="grid"
                                   aria-describedby="datatable_info">
                                <thead>
                                    <tr role="row">
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 43px;">#</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 160px;">Ad, soyad</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 199px;">Xidmət/Prosedur</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 231px;">Gün</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 160px;">Vaxt</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 160px;">Xidmət göstərən</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 160px;">Seçin</th>
                                    </tr>
                                </thead>
                                <tbody style="vertical-align:middle;">
                                    @{
                                        int pageSize = 10;
                                        int rowNumber = ((Model.CurrentPage - 1) * pageSize);
                                        if (Model is not null)
                                        {
                                            foreach (var item in Model.Appointments)
                                            {
                                                rowNumber++;
                                                <tr class="odd">
                                                    <th class="text-muted dtr-control" tabindex="0">
                                                        @rowNumber
                                                    </th>
                                                    <td>
                                                        <span>@item.patient_name @item.patient_surname </span>
                                                    </td>
                                                    <td>
                                                        <span>@item.service_name</span>
                                                    </td>
                                                    <td>
                                                        <span>@item.start_date.ToString("yyyy/MM/dd")</span>
                                                    </td>
                                                    <td>
                                                        <span>@item.start_date.ToString("HH:mm") - @item.end_date.ToString("HH:mm")</span>
                                                    </td>
                                                    <td>
                                                        <span>@item.user_name @item.user_surname (@item.user_speciality_name)</span>
                                                    </td>
                                                    <td>
                                                        <a style="margin-right: 5px;" onclick="updateAppointment(@item.id)"
                                                           data-bs-toggle="modal"
                                                           data-bs-target="#add-appointment-modal" href="#">
                                                            Dəyiş
                                                        </a>
                                                        <a onclick="deleteAppointment(@item.id)"
                                                           href="#">
                                                            Sil
                                                        </a>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    }
                                </tbody>
                            </table>



                            @await Component.InvokeAsync("Pagination", new { currentPage = Model.CurrentPage, totalPages = Model.TotalPages, searchQuery = Context.Request.Query["searchQuery"].ToString() })




                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@await Component.InvokeAsync("AppointmentModal")



@*@Html.Partial("_AppointmentModal")*@

@*<script>
    document.addEventListener('DOMContentLoaded', () => {


        const searchInput = document.getElementById('searchInput');
        const dropdownContent = document.getElementById('dropdownContent');

        const searchInputService = document.getElementById('searchInputService');
        const dropdownContentService = document.getElementById('dropdownContentService');

        searchInput.addEventListener('focus', () => {
            dropdownContent.classList.add('show');
        });

        searchInput.addEventListener('input', () => {
            const filter = searchInput.value.toLowerCase();
            const links = dropdownContent.getElementsByTagName('a');

            for (let i = 0; i < links.length; i++) {
                const textValue = links[i].textContent || links[i].innerText;
                links[i].style.display = textValue.toLowerCase().includes(filter) ? '' : 'none';
            }
        });

        document.addEventListener('click', (event) => {
            if (!event.target.matches('#searchInput')) {
                dropdownContent.classList.remove('show');
            }
        });

        searchInputService.addEventListener('focus', () => {
            dropdownContentService.classList.add('show');
        });

        searchInputService.addEventListener('input', () => {
            const filter = searchInputService.value.toLowerCase();
            const links = dropdownContentService.getElementsByTagName('a');

            for (let i = 0; i < links.length; i++) {
                const textValue = links[i].textContent || links[i].innerText;
                links[i].style.display = textValue.toLowerCase().includes(filter) ? '' : 'none';
            }
        });

        document.addEventListener('click', (event) => {
            if (!event.target.matches('#searchInputService')) {
                dropdownContentService.classList.remove('show');
            }
        });

    });</script>*@


@section Scripts {
    <script>

        document.addEventListener('DOMContentLoaded', function () {



            function debounce(func, delay) {
                let debounceTimer;
                return function (...args) {
                    clearTimeout(debounceTimer);
                    debounceTimer = setTimeout(() => func.apply(this, args), delay);
                };
            }

            // Search logic wrapped in debounce
            function searchUsers(searchQuery) {
                // Show the loader when searching
                $('#searchLoader').show();
                $('#userList').empty(); // Clear the previous search results

                if (searchQuery.length > 0) {
                    // Perform an AJAX request to search for users
                    $.ajax({
                        url: `@Url.Action("GetPatientByName", "Patient")`, // Replace this with your actual endpoint
                        method: 'GET',
                        data: { search: encodeURIComponent(searchQuery) }, // Send the search query to the backend
                        success: function (response) {
                            // Assuming the response is an array of users
                            // Example response format: [{ id: 1, name: 'John Doe' }, ...]

                            // Hide the loader once the search results are ready
                            $('#searchLoader').hide();

                            // Check if users were returned
                            if (response.length > 0) {
                                // Display the filtered results
                                response.forEach(function (user) {
                                    var listItem = $('<li>')
                                        .addClass('user-dropdown-item')
                                        .text(user.name)
                                        .data('id', user.id)
                                        .on('click', function () {
                                            // This function will run when the user clicks on the list item
                                            var selectedUser = $(this).text(); // Get the name of the clicked user
                                            var selectedUserId = $(this).data('id'); // Get the user ID

                                            // Update the input field with the selected user's name
                                            $('#userSearch').val(selectedUser);

                                            // You can also log or use the user ID for further processing
                                            console.log('Selected User ID:', selectedUserId);

                                            // Optionally, hide the dropdown after selection
                                            /*                 $('#search-dropdown').hide();*/
                                        });

                                    // Append the list item to the user list
                                    $('#userList').append(listItem);
                                });

                                // Show the dropdown menu
                                //$('#search-dropdown').show();
                            } else {
                                // If no results, you can display a "No users found" message
                                $('#userList').append('<li class="dropdown-item">Pasient tapılmadı</li>');
                            }
                        },
                        error: function () {
                            // Hide the loader in case of error
                            $('#searchLoader').hide();

                            // Handle the error (e.g., show a message to the user)
                            $('#userList').append('<li class="dropdown-item">Error fetching data</li>');
                        }
                    });
                } else {
                    // Hide the loader if the search query is empty
                    $('#searchLoader').hide();
                }
            }

            // Apply debounce to the search input field
            $('#userSearch').on('input', debounce(function () {
                var searchQuery = $(this).val();
                searchUsers(searchQuery); // Call the search function with the query
            }, 500)); // Delay of 500ms (adjust as needed)

            @*const searchInput = document.getElementById('searchInput');
            const dropdownContent = document.getElementById('dropdownContent');

            searchInput.addEventListener('keyup', debounce(function (e) {
                const search = searchInput.value;

                fetch(`@Url.Action("GetPatientByName", "Patient")/?search=${encodeURIComponent(search)}`)
                    .then(response => response.json())
                    .then(data => {
                        let listContent = "";
                        data.forEach(x => {
                            const escapedId = document.createElement('div').textContent = x.id;

                            listContent += `<a onclick="selectPatient('${escapedId}', '${x.name}')">${x.name} ${x.surname} ${x.father} (FİN: ${x.fin})</a>`;
                        });
                        dropdownContent.innerHTML = listContent;
                    })
                    .catch(error => {
                        console.error("Error fetching services.", error);
                    });
            }, 300));


            const searchInputService = document.getElementById('searchInputService');
            const dropdownContentService = document.getElementById('dropdownContentService');

            searchInputService.addEventListener('keyup', debounce(function (e) {
                const search = searchInputService.value;

                fetch(`@Url.Action("GetAllServices", "Services")/?search=${encodeURIComponent(search)}`)
                    .then(response => response.json())
                    .then(data => {
                        let listContent = "";
                        data.forEach(x => {
                            const escapedId = document.createElement('div').textContent = x.id;
                            const escapedName = document.createElement('div').textContent = x.name;
                            listContent += `<a onclick="selectService('${escapedId}', '${escapedName}')">${escapedName}</a>`;
                        });
                        dropdownContentService.innerHTML = listContent;
                    })
                    .catch(error => {
                        console.error("Error fetching services.", error);
                    });
            }, 300));
        });*@

            function debounce(func, delay) {
                let debounceTimer;
                return function () {
                    const context = this;
                    const args = arguments;
                    clearTimeout(debounceTimer);
                    debounceTimer = setTimeout(() => func.apply(context, args), delay);
                };
            }

            function validateForm() {
                let isValid = true;

                if (document.getElementById('ServiceId').value.trim().length === 0) {
                    document.getElementById('validationForService').style.display = 'block';
                    isValid = false;
                } else {
                    document.getElementById('validationForService').style.display = 'none';
                }

                if (document.getElementById('PatientId').value.trim().length === 0) {
                    document.getElementById('validationForPatient').style.display = 'block';
                    isValid = false;
                } else {
                    document.getElementById('validationForPatient').style.display = 'none';
                }

                return isValid;
            }

        @*function clearPatientId() {
            document.getElementById('PatientId').value = '';
        }

        function clearServiceId() {
            document.getElementById('ServiceId').value = '';
        }

        function selectPatient(id, name) {
            fetch(`@Url.Action("GetPatientById", "Patient")/?id=${id}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('patientPhone').value = data?.phone;
                });
            document.getElementById('searchInput').value = name;
            document.getElementById('PatientId').value = id;
            document.getElementById('validationForPatient').style.display = 'none';
        }*@

            function formatTime(date) {
                let hours = date.getHours().toString().padStart(2, '0');
                let minutes = date.getMinutes().toString().padStart(2, '0');
                return `${hours}:${minutes}`;
            }

            function updateAppointment(id) {
                fetch(`@Url.Action("GetAppointmentById", "Appointments")/?id=${id}`)
                    .then(response => response.json())
                    .then(data => {
                        console.log(data)
                        document.getElementById("Id").value = data?.id;
                        document.getElementById('ServiceId').value = data?.service_id;
                        document.getElementById('PatientId').value = data?.patient_id;
                        $('#UserId').val(data?.user_id);
                        //document.getElementById('UserId').value =
                        document.getElementById('MeetingDate').value = new Date(data?.start_date).toISOString().split('T')[0];
                        document.getElementById('patientPhone').value = data?.patient_phone;
                        document.getElementById('searchInput').value = data?.patient_name;
                        document.getElementById('searchInputService').value = data?.service_name;

                        let existStart = data?.start_date.split("T")[1].substring(0, 5)
                        let existEnd = data?.end_date.split("T")[1].substring(0, 5)
                        $('#startTime').val(existStart)
                        $('#endTime').val(existEnd)
                        $('#MeetingDate').trigger('change');
                    });
            }

            function deleteAppointment(id) {
                if (confirm("Silmək istədiyinizə əminsiniz?")) {
                    fetch(`@Url.Action("DeleteAppointmentById", "Appointments")/?id=${id}`, {
                        method: 'DELETE'
                    })
                        .then(response => {
                            if (response.ok) {
                                window.location.reload();
                            } else {
                                console.error('Failed to delete appointment');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                        });
                }
            }

            function selectService(id, name) {
                document.getElementById('searchInputService').value = name;
                document.getElementById('ServiceId').value = id;
                document.getElementById('validationForService').style.display = 'none';
            }

            function clearFields() {
                //$('#Id').val('');
                //$('#ServiceId').val('');
                //$('#PatientId').val('');
                //$('#patientPhone').val('');
                //$('#searchInput').val('');
                //$('#searchInputService').val('');
                //let today = new Date().toISOString().split('T')[0]; // "yyyy-mm-dd" formatı
                //$('#MeetingDate').val(today).trigger('change');

                //$('#startTime').val(today);
                //$('#endTime').val(today);

            }
            let $form = $('#newAppointmentForm');
            const $dropdown = $("#timeDropdown");
            const $button = $("#dropdownButton");

            $('#dropdownButton').on('click', function (e) {
                if (!$('#UserId').val() || !$('#MeetingDate').val()) {
                    e.preventDefault();
                    e.stopPropagation();
                    $('#timeError').text('Xidmət gostərən və tarix seçilməlidir').show()
                    return;
                }

            });

            $('#add-appointment-modal').on('hidden.bs.modal', function () {
                $('#Id').val('');
                $('#PatientId').val('');
                $('#searchInput').val('');
                $('#searchInputService').val('');
                $('#ServiceId').val('');
                $form.removeClass('was-validated');
                $form[0].reset();
                $('#patientPhone').prop('disabled', false);

                $('#validationForService').hide();
                $('#validationForPatient').hide();
                $dropdown.empty();
                $button.text('Saat seçin');
                $('#dropdownButton').prop('disabled', true)

            });

            $('#UserId').on('change', function () {

                $('#MeetingDate').val('').trigger('change');

            })
            $('#not_phone').on('change', function () {
                if ($(this).prop('checked') === true) {
                    $('#patientPhone').val('').prop('disabled', true)
                }
                else {
                    $('#patientPhone').val('').prop('disabled', false)

                }

            })

            $('#MeetingDate').on('change', function () {
                if ($(this).val() && $('#UserId').val()) {
                    $('#dropdownButton').prop('disabled', false)
                }
                else {
                    $('#dropdownButton').prop('disabled', true)
                    return;
                }

                $dropdown.empty();
                $button.text('Saat seçin');
                var date = $(this).val();
                var selectedUserId = $('#UserId').val();
                if (selectedUserId) {
                    showLoading()
                    $.ajax({
                        url: '/WorkHour/GetUserWorkHours',
                        type: 'GET',
                        data: {
                            userId: selectedUserId,
                            selectedDay: date
                        },
                        success: function (response) {
                            //var breaks = response.breaks.

                            if (response.startTime && response.endTime) {

                                const breaksFormatted = response.breaks?.map(b => [b.start, b.end]) || [];
                                const reservesFormatted = response.reserves?.map(b => [b.start, b.end]) || [];
                                const slots = generateTimeSlots(response.startTime, response.endTime, 15, breaksFormatted, reservesFormatted);


                                slots.forEach(slot => {
                                    let badge = '';
                                    let itemClass = 'dropdown-item';
                                    let disabledAttr = '';

                                    switch (slot.status) {
                                        case "available":
                                            badge = '<span class="badge bg-success me-2">Uyğun</span>';
                                            break;
                                        case "break":
                                            badge = '<span class="badge bg-warning text-dark me-2">Fasilə</span>';
                                            itemClass += ' disabled';
                                            disabledAttr = 'disabled';
                                            break;
                                        case "reserved":
                                            badge = '<span class="badge bg-danger me-2">Rezerv olunub</span>';
                                            itemClass += ' disabled';
                                            disabledAttr = 'disabled';
                                            break;
                                    }

                                    const $item = $(`<li><a class="${itemClass}" href="#" ${disabledAttr}>${badge}${slot.label}</a></li>`);

                                    if (slot.status === "available") {
                                        $item.find('a').on('click', function (e) {
                                            e.preventDefault();
                                            $button.text(slot.label);
                                            const [start, end] = slot.label.split(" - ");

                                            // Input'lara yaz
                                            $('#startTime').val(start);
                                            $('#endTime').val(end);
                                        });
                                    }

                                    if (slot.status === "reserved") {
                                        let startInput = $('#startTime').val();
                                        let endInput = $('#endTime').val();
                                        const [start, end] = slot.label.split(" - ");
                                        if (start == startInput && end == endInput) {
                                            $button.text(slot.label);

                                        }
                                    }

                                    $dropdown.append($item);
                                });
                            }
                            else {
                                $('#infoText').text('Əmakdaşın iş günü deyil');
                                $('#infoModal').modal('show');

                            }

                            hideLoading();

                            console.log('success:', response);
                        },
                        error: function (xhr, status, error) {
                            console.error('error:', error);
                            hideLoading();

                        }
                    });
                }

            });




            function parseTime(timeStr) {
                const [hour, minute] = timeStr.split(":").map(Number);
                return hour * 60 + minute;
            }

            function formatTime(minutes) {
                const hour = Math.floor(minutes / 60);
                const minute = minutes % 60;
                return `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
            }

            function isInRange(startA, endA, startB, endB) {
                return !(endA <= startB || startA >= endB);
            }

            function getSlotStatus(startTime, endTime, breaks, reserved) {
                for (const [start, end] of breaks) {
                    if (isInRange(startTime, endTime, parseTime(start), parseTime(end))) return "break";
                }
                for (const [start, end] of reserved) {
                    if (isInRange(startTime, endTime, parseTime(start), parseTime(end))) return "reserved";
                }
                return "available";
            }

            function generateTimeSlots(start, end, interval, breaks, reserved) {
                const slots = [];
                let current = parseTime(start);
                const endTime = parseTime(end);

                while (current + interval <= endTime) {
                    const slotEnd = current + interval;
                    const label = `${formatTime(current)} - ${formatTime(slotEnd)}`;
                    const status = getSlotStatus(current, slotEnd, breaks, reserved);
                    slots.push({ label, status });
                    current += interval;
                }

                return slots;
            }



            //document.addEventListener('DOMContentLoaded', function () {
            //    flatpickr('#example', {});
            //    flatpickr('.default', {
            //        enableTime: true,
            //        dateFormat: "Y-m-d H:i",
            //        minuteIncrement: 10
            //    });
            //});
        });
    </script>
}