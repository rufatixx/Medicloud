@model Medicloud.BLL.Models.AppointmentPagedResult;

@{
    ViewData["Title"] = "Appointment Page";

    int halfRange = 3;
    int startPage = Model.CurrentPage - halfRange;
    int endPage = Model.CurrentPage + halfRange;

    if (startPage <= 0)
    {
        endPage -= (startPage - 1);
        startPage = 1;
    }
    if (endPage > Model.TotalPages)
    {
        startPage -= (endPage - Model.TotalPages);
        endPage = Model.TotalPages;
    }
    if (startPage <= 0) startPage = 1;

    int loopStart = startPage;
    int loopEnd = Math.Min(startPage + 6, Model.TotalPages);
    var searchQuery = Context.Request.Query["searchQuery"];

}





<div class="col-12">
    <div class="page-title-box">
        <div class="page-title-right">
            <a href="javascript:window.print()">
                <button type="button" class="btn btn-primary w-md bg-blue-light radius-10">
                    <i class="ri-printer-line"></i>Çap et
                </button>
            </a>
            <a id="new-appointment"
               type="reset"
               onclick="clearFields()"
               data-bs-toggle="modal"
               data-bs-target="#add-appointment-modal"
               class="btn btn-primary w-md bg-blue radius-10">
                + Yeni Randevu
            </a>
        </div>
        <h2 class="page-title">eNövbələr</h2>
    </div>
</div>

<div class="row">
    <div class="col-12 ">

        <div class="card rounded-4">

            <div class="card-body">
                <div id="datatable_wrapper" class="dataTables_wrapper dt-bootstrap4 no-footer">

                    <div class="row">
                        <div class="col-sm-12 table-responsive">
                            <table id="datatable"
                                   class="table table table-striped table-borderless dt-responsive nowrap w-100 dataTable no-footer dtr-inline"
                                   role="grid"
                                   aria-describedby="datatable_info">
                                <thead>
                                    <tr role="row">
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 43px;">#</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 160px;">Ad, soyad</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 199px;">Xidmət/Prosedur</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 231px;">Gün</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 160px;">Vaxt</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 160px;">Seçin</th>
                                    </tr>
                                </thead>
                                <tbody style="vertical-align:middle;">
                                    @{
                                        var rowNumber = 0;
                                        if (Model is not null)
                                        {
                                            foreach (var item in Model.Appointments)
                                            {
                                                rowNumber++;
                                                <tr class="odd">
                                                    <th class="text-muted dtr-control" tabindex="0">
                                                        @rowNumber
                                                    </th>
                                                    <td>
                                                        <span>@item.patient_name @item.patient_surname </span>
                                                    </td>
                                                    <td>
                                                        <span>@item.service_name</span>
                                                    </td>
                                                    <td>
                                                        <span>@item.start_date.ToString("yyyy/MM/dd")</span>
                                                    </td>
                                                    <td>
                                                        <span>@item.start_date.ToString("HH:mm") - @item.end_date.ToString("HH:mm")</span>
                                                    </td>
                                                    <td>
                                                        <a style="margin-right: 5px;" onclick="updateAppointment(@item.id)"
                                                           data-bs-toggle="modal"
                                                           data-bs-target="#add-appointment-modal" href="#">
                                                            Dəyiş
                                                        </a>
                                                        <a onclick="deleteAppointment(@item.id)"
                                                           href="#">
                                                            Sil
                                                        </a>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    }
                                </tbody>
                            </table>

                            @if (Model.TotalPages > 1)
                            {
                                <div class="pagination-container" style="overflow-x:auto;">
                                    <nav class="d-flex justify-content-center">
                                        <ul class="pagination mb-0">
                                            <li class="page-item @(Model.CurrentPage <= 1 ? "disabled" : "")">
                                                <a class="page-link" href="@Url.Action("Index", new { pageNumber = Model.CurrentPage - 1, searchQuery = searchQuery })" aria-label="Previous">
                                                    <span aria-hidden="true">&laquo;</span>
                                                </a>
                                            </li>
                                            @for (int i = loopStart; i <= loopEnd; i++)
                                            {
                                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                                    <a class="page-link" href="@Url.Action("Index", new { pageNumber = i, searchQuery = searchQuery })">@i</a>
                                                </li>
                                            }
                                            <li class="page-item @(Model.CurrentPage >= Model.TotalPages ? "disabled" : "")">
                                                <a class="page-link" href="@Url.Action("Index", new { pageNumber = Model.CurrentPage + 1, searchQuery = searchQuery })" aria-label="Next">
                                                    <span aria-hidden="true">&raquo;</span>
                                                </a>
                                            </li>
                                        </ul>
                                    </nav>
                                </div>
                            }




                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@Html.Partial("_AppointmentModal")

<script>
    document.addEventListener('DOMContentLoaded', () => {


        const searchInput = document.getElementById('searchInput');
        const dropdownContent = document.getElementById('dropdownContent');

        const searchInputService = document.getElementById('searchInputService');
        const dropdownContentService = document.getElementById('dropdownContentService');

        loadTime();

        searchInput.addEventListener('focus', () => {
            dropdownContent.classList.add('show');
        });

        searchInput.addEventListener('input', () => {
            const filter = searchInput.value.toLowerCase();
            const links = dropdownContent.getElementsByTagName('a');

            for (let i = 0; i < links.length; i++) {
                const textValue = links[i].textContent || links[i].innerText;
                links[i].style.display = textValue.toLowerCase().includes(filter) ? '' : 'none';
            }
        });

        document.addEventListener('click', (event) => {
            if (!event.target.matches('#searchInput')) {
                dropdownContent.classList.remove('show');
            }
        });

        searchInputService.addEventListener('focus', () => {
            dropdownContentService.classList.add('show');
        });

        searchInputService.addEventListener('input', () => {
            const filter = searchInputService.value.toLowerCase();
            const links = dropdownContentService.getElementsByTagName('a');

            for (let i = 0; i < links.length; i++) {
                const textValue = links[i].textContent || links[i].innerText;
                links[i].style.display = textValue.toLowerCase().includes(filter) ? '' : 'none';
            }
        });

        document.addEventListener('click', (event) => {
            if (!event.target.matches('#searchInputService')) {
                dropdownContentService.classList.remove('show');
            }
        });

        function loadTime() {
            const select = document.getElementById('Time');
            const startHour = 8;
            const endHour = 21;
            const interval = 10;

            for (let hour = startHour; hour <= endHour; hour++) {
                for (let minute = 0; minute < 60; minute += interval) {
                    let start = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
                    let endMinute = minute + interval;
                    let end = `${String(hour).padStart(2, '0')}:${String(endMinute).padStart(2, '0')}`;

                    if (endMinute > 59) {
                        endMinute = 0;
                        end = `${String(hour + 1).padStart(2, '0')}:00`;
                    }

                    let optionValue = `${start}`;
                    let optionText = `${start} - ${end}`;
                    let option = document.createElement('option');
                    option.value = optionValue;
                    option.textContent = optionText;

                    select.appendChild(option);
                }
            }
        }


    });
</script>


@section Scripts {
    <script>

        document.addEventListener('DOMContentLoaded', function () {

            const searchInput = document.getElementById('searchInput');
            const dropdownContent = document.getElementById('dropdownContent');

            searchInput.addEventListener('keyup', debounce(function (e) {
                const search = searchInput.value;

                fetch(`/Patient/GetPatientByName?search=${encodeURIComponent(search)}`)
                    .then(response => response.json())
                    .then(data => {
                        let listContent = "";
                        data.forEach(x => {
                            const escapedId = document.createElement('div').textContent = x.id;

                            listContent += `<a onclick="selectPatient('${escapedId}', '${x.name}')">${x.name} ${x.surname} ${x.father} (FİN: ${x.fin})</a>`;
                        });
                        dropdownContent.innerHTML = listContent;
                    })
                    .catch(error => {
                        console.error("Error fetching services.", error);
                    });
            }, 300));


            const searchInputService = document.getElementById('searchInputService');
            const dropdownContentService = document.getElementById('dropdownContentService');

            searchInputService.addEventListener('keyup', debounce(function (e) {
                const search = searchInputService.value;

                fetch(`/Services/GetAllServices?search=${encodeURIComponent(search)}`)
                    .then(response => response.json())
                    .then(data => {
                        let listContent = "";
                        data.forEach(x => {
                            const escapedId = document.createElement('div').textContent = x.id;
                            const escapedName = document.createElement('div').textContent = x.name;
                            listContent += `<a onclick="selectService('${escapedId}', '${escapedName}')">${escapedName}</a>`;
                        });
                        dropdownContentService.innerHTML = listContent;
                    })
                    .catch(error => {
                        console.error("Error fetching services.", error);
                    });
            }, 300));
        });

        function debounce(func, delay) {
            let debounceTimer;
            return function () {
                const context = this;
                const args = arguments;
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(() => func.apply(context, args), delay);
            };
        }

        function validateForm() {
            let isValid = true;

            if (document.getElementById('ServiceId').value.trim().length === 0) {
                document.getElementById('validationForService').style.display = 'block';
                isValid = false;
            } else {
                document.getElementById('validationForService').style.display = 'none';
            }

            if (document.getElementById('PatientId').value.trim().length === 0) {
                document.getElementById('validationForPatient').style.display = 'block';
                isValid = false;
            } else {
                document.getElementById('validationForPatient').style.display = 'none';
            }

            return isValid;
        }

        function clearPatientId() {
            document.getElementById('PatientId').value = '';
        }

        function clearServiceId() {
            document.getElementById('ServiceId').value = '';
        }

        function selectPatient(id, name) {
            fetch(`/Patient/GetPatientById?id=${id}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('patientMobileModal').value = data?.phone;
                });
            document.getElementById('searchInput').value = name;
            document.getElementById('PatientId').value = id;
            document.getElementById('validationForPatient').style.display = 'none';
        }

        function formatTime(date) {
            let hours = date.getHours().toString().padStart(2, '0');
            let minutes = date.getMinutes().toString().padStart(2, '0');
            return `${hours}:${minutes}`;
        }

        function updateAppointment(id) {
            fetch(`/Appointments/GetAppointmentById?id=${id}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById("Id").value = data?.id;
                    document.getElementById('ServiceId').value = data?.service_id;
                    document.getElementById('PatientId').value = data?.patient_id;
                    document.getElementById('MeetingDate').value = new Date(data?.start_date).toISOString().split('T')[0];
                    document.getElementById('patientMobileModal').value = data?.patient_phone;
                    document.getElementById('searchInput').value = data?.patient_name;
                    document.getElementById('searchInputService').value = data?.service_name;
                    document.getElementById('Time').value = `${formatTime(new Date(data?.start_date))}`;
                });
        }

        function deleteAppointment(id) {
            if (confirm("Silmək istədiyinizə əminsiniz?")) {
                fetch(`/Appointments/DeleteAppointmentById?id=${id}`, {
                    method: 'DELETE'
                })
                    .then(response => {
                        if (response.ok) {
                            window.location.reload();
                        } else {
                            console.error('Failed to delete appointment');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }
        }

        function selectService(id, name) {
            document.getElementById('searchInputService').value = name;
            document.getElementById('ServiceId').value = id;
            document.getElementById('validationForService').style.display = 'none';
        }

        function clearFields() {
            document.getElementById('Id').value = '';
            document.getElementById('ServiceId').value = '';
            document.getElementById('PatientId').value = '';
            document.getElementById('MeetingDate').value = '';
            document.getElementById('patientMobileModal').value = '';
            document.getElementById('searchInput').value = '';
            document.getElementById('searchInputService').value = '';
            document.getElementById('Time').value = '';
        }

        document.addEventListener('DOMContentLoaded', function () {
            flatpickr('#example', {});
            flatpickr('.default', {
                enableTime: true,
                dateFormat: "Y-m-d H:i",
                minuteIncrement: 10
            });
        });

    </script>
}