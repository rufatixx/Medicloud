@model Medicloud.BLL.Models.AppointmentPagedResult;

@{
    ViewData["Title"] = "Appointment Page";

}


<div class="col-12">
    <div class="page-title-box">
        <div class="page-title-right">
            <a href="javascript:window.print()">
                <button type="button" class="btn btn-primary w-md bg-blue-light radius-10">
                    <i class="ri-printer-line"></i>Çap et
                </button>
            </a>
            <a id="new-appointment"
               data-bs-toggle="modal"
               data-bs-target="#add-appointment-modal"
               class="btn btn-primary w-md bg-blue radius-10">
                + Yeni növbə
            </a>
        </div>
        <h2 class="page-title">eNövbələr</h2>
    </div>
</div>

<div class="row">
    <div class="col-12 ">

        <div class="card rounded-4">

            <div class="card-body">
                <div id="datatable_wrapper" class="dataTables_wrapper dt-bootstrap4 no-footer">

                    <div class="row">
                        <div class="col-sm-12 table-responsive">
                            <table id="datatable"
                                   class="table table table-striped table-borderless dt-responsive nowrap w-100 dataTable no-footer dtr-inline"
                                   role="grid"
                                   aria-describedby="datatable_info">
                                <thead>
                                    <tr role="row">
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 43px;">#</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 160px;">Ad, soyad</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 199px;">Xidmət/Prosedur</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 231px;">Gün</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 160px;">Vaxt</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 160px;">Xidmət göstərən</th>
                                        <th class="text-muted" rowspan="1" colspan="1" style="width: 160px;">Seçin</th>
                                    </tr>
                                </thead>
                                <tbody style="vertical-align:middle;">
                                    @{
                                        int pageSize = 10;
                                        int rowNumber = ((Model.CurrentPage - 1) * pageSize);
                                        if (Model is not null)
                                        {
                                            foreach (var item in Model.Appointments)
                                            {
                                                rowNumber++;
                                                <tr class="odd">
                                                    <th class="text-muted dtr-control" tabindex="0">
                                                        @rowNumber
                                                    </th>
                                                    <td>
                                                        <span>@item.patient_name @item.patient_surname </span>
                                                    </td>
                                                    <td>
                                                        <span>@item.service_name</span>
                                                    </td>
                                                    <td>
                                                        <span>@item.start_date.ToString("yyyy/MM/dd")</span>
                                                    </td>
                                                    <td>
                                                        <span>@item.start_date.ToString("HH:mm") - @item.end_date.ToString("HH:mm")</span>
                                                    </td>
                                                    <td>
                                                        <span>@item.user_name @item.user_surname (@item.user_speciality_name)</span>
                                                    </td>
                                                    <td>
                                                        <a style="margin-right: 5px;" href="#" class="edit-button" data-item-id="@item.id">
                                                            Dəyiş
                                                        </a>
                                                        <a class="delete-button" data-item-id="@item.id"
                                                           href="#">
                                                            Sil
                                                        </a>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    }
                                </tbody>
                            </table>



                            @await Component.InvokeAsync("Pagination", new { currentPage = Model.CurrentPage, totalPages = Model.TotalPages, searchQuery = Context.Request.Query["searchQuery"].ToString() })




                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@await Component.InvokeAsync("AppointmentModal")



@*@Html.Partial("_AppointmentModal")*@

@*<script>
    document.addEventListener('DOMContentLoaded', () => {


        const searchInput = document.getElementById('searchInput');
        const dropdownContent = document.getElementById('dropdownContent');

        const searchInputService = document.getElementById('searchInputService');
        const dropdownContentService = document.getElementById('dropdownContentService');

        searchInput.addEventListener('focus', () => {
            dropdownContent.classList.add('show');
        });

        searchInput.addEventListener('input', () => {
            const filter = searchInput.value.toLowerCase();
            const links = dropdownContent.getElementsByTagName('a');

            for (let i = 0; i < links.length; i++) {
                const textValue = links[i].textContent || links[i].innerText;
                links[i].style.display = textValue.toLowerCase().includes(filter) ? '' : 'none';
            }
        });

        document.addEventListener('click', (event) => {
            if (!event.target.matches('#searchInput')) {
                dropdownContent.classList.remove('show');
            }
        });

        searchInputService.addEventListener('focus', () => {
            dropdownContentService.classList.add('show');
        });

        searchInputService.addEventListener('input', () => {
            const filter = searchInputService.value.toLowerCase();
            const links = dropdownContentService.getElementsByTagName('a');

            for (let i = 0; i < links.length; i++) {
                const textValue = links[i].textContent || links[i].innerText;
                links[i].style.display = textValue.toLowerCase().includes(filter) ? '' : 'none';
            }
        });

        document.addEventListener('click', (event) => {
            if (!event.target.matches('#searchInputService')) {
                dropdownContentService.classList.remove('show');
            }
        });

    });</script>*@


@section Scripts {
    <script src="js/appointment/appointmentTime.js"></script>

    <script>

        document.addEventListener('DOMContentLoaded', function () {

            function debounce(func, delay) {
                  let debounceTimer;
                  return function (...args) {
                      clearTimeout(debounceTimer);
                      debounceTimer = setTimeout(() => func.apply(this, args), delay);
                  };
              }




              // Search logic wrapped in debounce
              function searchUsers(searchQuery) {
                  // Show the loader when searching
               $('#userList').html(`
                    <li id="searchLoader" class="text-center py-2">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </li>
                `);

                $('#patientId').val('');

                  if (searchQuery.length > 0) {

                      $.ajax({
                          url: `@Url.Action("GetPatientByName", "Patient")`,
                          method: 'GET',
                          data: { search: encodeURIComponent(searchQuery) },
                          success: function (response) {
                              $('#searchLoader').hide();

                              if (response.length > 0) {
                                  // Display the filtered results
                                  response.forEach(function (user) {
                                      console.log(user)
                                      var listItem = $('<li>')
                                          .addClass('dropdown-item border cursor-pointer')
                                          .text(`${user.name} ${user.surname} ${user.father} (FİN: ${user.fin})`)
                                          .css('cursor','pointer')
                                          .data('id', user.id)
                                          .on('click', function (e){

                                              var selectedUserId = $(this).data('id');
                                               $('#patientId').val(selectedUserId);
                                               $('#patientPhone').val(user.phone);

                                              $('#userSearch').val(user.name);


                                          });

                                      $('#userList').append(listItem);
                                  });

                              } else {
                                  $('#userList').append('<li class="dropdown-item">Pasient tapılmadı</li>');
                              }
                          },
                          error: function () {
                              $('#searchLoader').hide();

                              $('#userList').append('<li class="dropdown-item">Error fetching data</li>');
                          }
                      });
                  } else {
                      $('#searchLoader').hide();
                  }
              }

              $('#userSearch').on('input', debounce(function () {
                  var searchQuery = $(this).val();
                  searchUsers(searchQuery);
              }, 500));



              function searchServices(searchQuery) {
                  // Show the loader when searching
               $('#serviceList').html(`
                    <li id="searchLoaderService" class="text-center py-2">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </li>
                `);
                  // $('#userList').empty(); // Clear the previous search results
                $('#serviceId').val('');

                  if (searchQuery.length > 0) {

                      $.ajax({
                          url: `@Url.Action("GetAllServices", "Services")`,
                          method: 'GET',
                          data: { search: encodeURIComponent(searchQuery) },
                          success: function (response) {
                              $('#searchLoaderService').hide();

                              if (response.length > 0) {
                                  // Display the filtered results
                                  response.forEach(function (user) {
                                      var listItem = $('<li>')
                                          .addClass('dropdown-item border')
                                          .css('cursor','pointer')
                                          .text(user.name)
                                          .data('id', user.id)
                                          .on('click', function (e){

                                              var selectedService = $(this).text();
                                              var selectedServiceId = $(this).data('id');
                                               $('#serviceId').val(selectedServiceId);

                                              $('#serviceSearch').val(selectedService);

                                          });

                                      $('#serviceList').append(listItem);
                                  });

                              } else {
                                  $('#serviceList').append('<li class="dropdown-item">Xidmət tapılmadı</li>');
                              }
                          },
                          error: function () {
                              $('#searchLoaderService').hide();

                              $('#serviceList').append('<li class="dropdown-item">Xəta baş verdi/li>');
                          }
                      });
                  } else {
                      $('#searchLoaderService').hide();
                  }
              }

              $('#serviceSearch').on('input', debounce(function () {
                  var searchQuery = $(this).val();
                  searchServices(searchQuery);
              }, 500));



              $('.edit-button').on('click',function(e){

                  let itemId=$(this).data('item-id');

                  showLoading();
                  $.ajax({
                          url: `@Url.Action("GetAppointmentById", "Appointments")`,
                          method: 'GET',
                          data: { id: itemId },
                          success: function (data) {
                               console.log(data)
                               $('#Id').val(data?.id);
                               $('#serviceId').val(data?.service_id);
                               $('#patientId').val(data?.patient_id);
                               $('#UserId').val(data?.user_id);
                               $('#patientPhone').val(data?.patient_phone);
                               $('#userSearch').val(data?.patient_name);
                               $('#serviceSearch').val(data?.service_name);
                               let existStart = data?.start_date.split("T")[1].substring(0, 5)
                               let existEnd = data?.end_date.split("T")[1].substring(0, 5)
                               $('#startTime').val(existStart)
                               $('#endTime').val(existEnd)
                               if (data?.start_date) {
                                   const formattedDate = new Date(data.start_date).toISOString().split('T')[0];
                                   $('#MeetingDate').val(formattedDate);
                                   $('#MeetingDate').trigger('change');

                               }
                               $('#add-appointment-modal').modal('show');
                          },
                          error: function (err) {
                              console.log(err)
                               hideLoading();

                          }
                      });


             });

             $('.delete-button').on('click',function(e){

                  let itemId=$(this).data('item-id');

                  $('#confirmText').text('Silmək istədiyinizə əminsiniz?')
                  $('#confirmModal').data('item-id',itemId);
                  $('#confirmModal').data('action','delete');
                  $('#confirmModal').modal('show');

             });

              $('#confirmModalButton').on('click',function(e){
                  
                  let action= $('#confirmModal').data('action');
                  let itemId= $('#confirmModal').data('item-id');

                  console.log(action)
                  console.log(itemId)
                  if(action==='delete'){
                      showLoading();
                       $.ajax({
                          url: `@Url.Action("DeleteAppointmentById", "Appointments")/?id=${itemId}`,
                          method: 'DELETE',
                          success: function (data) {
                              window.location.reload();
                          },
                          error: function (err) {
                              console.log(err)
                              hideLoading()
                          }
                      });
                  }



             });

              let $form = $('#newAppointmentForm');
              const $dropdown = $("#timeDropdown");
              const $button = $("#dropdownButton");

              $('#dropdownButton').on('click', function (e) {
                  if (!$('#UserId').val() || !$('#MeetingDate').val()) {
                      e.preventDefault();
                      e.stopPropagation();
                      $('#timeError').text('Xidmət gostərən və tarix seçilməlidir').show()
                      return;
                  }

              });

              $('#add-appointment-modal').on('hidden.bs.modal', function () {
                  $('#Id').val('');
                  $('#PatientId').val('');
                  $('#searchInput').val('');
                  $('#searchInputService').val('');
                  $('#ServiceId').val('');
                  $form.removeClass('was-validated');
                  $form[0].reset();
                  $('#patientPhone').prop('disabled', false);

                  $('#validationForService').hide();
                  $('#validationForPatient').hide();
                  $dropdown.empty();
                  $dropdown.empty();
                  $button.text('Saat seçin');
                  $('#dropdownButton').prop('disabled', true)

              });

              $('#UserId').on('change', function () {

                  $('#MeetingDate').val('').trigger('change');

              })
              $('#not_phone').on('change', function () {
                  if ($(this).prop('checked') === true) {
                      $('#patientPhone').val('').prop('disabled', true)
                  }
                  else {
                      $('#patientPhone').val('').prop('disabled', false)

                  }

              })

              $('#MeetingDate').on('change', function () {
                  if ($(this).val() && $('#UserId').val()) {
                      $('#dropdownButton').prop('disabled', false)
                  }
                  else {
                      $('#dropdownButton').prop('disabled', true)
                      return;
                  }

                  $dropdown.empty();
                  $button.text('Saat seçin');
                  var date = $(this).val();
                  var selectedUserId = $('#UserId').val();
                  if (selectedUserId) {
                      showLoading()
                      $.ajax({
                          url: '/WorkHour/GetUserWorkHours',
                          type: 'GET',
                          data: {
                              userId: selectedUserId,
                              selectedDay: date
                          },
                          success: function (response) {
                               console.log('success:', response);
                              if (response && response.startTime && response.endTime) {

                                  const breaksFormatted = response.breaks?.map(b => [b.start, b.end]) || [];
                                  const reservesFormatted = response.reserves?.map(b => [b.start, b.end]) || [];
                                  const slots = generateTimeSlots(response.startTime, response.endTime, 15, breaksFormatted, reservesFormatted);


                                  slots.forEach(slot => {
                                      let badge = '';
                                      let itemClass = 'dropdown-item';
                                      let disabledAttr = '';

                                      switch (slot.status) {
                                          case "available":
                                              badge = '<span class="badge bg-success me-2">Uyğun</span>';
                                              break;
                                          case "break":
                                              badge = '<span class="badge bg-warning text-dark me-2">Fasilə</span>';
                                              itemClass += ' disabled';
                                              disabledAttr = 'disabled';
                                              break;
                                          case "reserved":
                                              badge = '<span class="badge bg-danger me-2">Rezerv olunub</span>';
                                              itemClass += ' disabled';
                                              disabledAttr = 'disabled';
                                              break;
                                      }

                                      const $item = $(`<li><a class="${itemClass}" href="#" ${disabledAttr}>${badge}${slot.label}</a></li>`);

                                      if (slot.status === "available") {
                                          $item.find('a').on('click', function (e) {
                                              e.preventDefault();
                                              $button.text(slot.label);
                                              const [start, end] = slot.label.split(" - ");

                                              // Input'lara yaz
                                              $('#startTime').val(start);
                                              $('#endTime').val(end);
                                          });
                                      }

                                      if (slot.status === "reserved") {
                                          let startInput = $('#startTime').val();
                                          let endInput = $('#endTime').val();
                                          const [start, end] = slot.label.split(" - ");
                                          if (start == startInput && end == endInput) {
                                              $button.text(slot.label);

                                          }
                                      }

                                      $dropdown.append($item);
                                  });
                              }
                              else {
                                  $('#infoText').text('Əmakdaşın iş günü deyil');
                                  $('#infoModal').modal('show');

                              }

                              hideLoading();


                          },
                          error: function (xhr, status, error) {
                              console.error('error:', error);
                              hideLoading();

                          }
                      });
                  }

              });
              $('#newAppointmentForm').on('submit',function(e){
                  e.preventDefault();
                  if(!$form[0].checkValidity()){
                      return;
                  }
                  else{
                    showLoading();

                      $(this).submit();
                  }
              })
        });


    </script>
}

