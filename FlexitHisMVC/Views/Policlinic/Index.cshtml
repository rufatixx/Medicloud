@using Medicloud.ViewModels
@model PoliclinicViewModel
@{
    ViewData["Title"] = "Kabinetim";
}

<!-- PAGE HEADER -->
<div class="container-fluid">
    <div class="row">
        <div class="col-12 py-3">
            <h4 class="mb-0">Kabinetim</h4>
        </div>
    </div>
</div>

<!-- MAIN LAYOUT: Two columns -->
<div class="row flex-nowrap" style="height: 70vh">

    <!-- LEFT SIDEBAR: Patients List -->
    <div class="col-3 border-end" style="overflow-y: auto;">
        <div class="card border-0 h-100 shadow-sm">
            <div class="card-header">
                <h5 class="mb-0">Pasientlər</h5>
            </div>
            <div class="list-group list-group-flush" id="patientListGroup">
                @if (Model.Patients != null && Model.Patients.Count > 0)
                {
                    foreach (var item in Model.Patients)
                    {
                        <a href="@Url.Action("Index","Policlinic",new{id=item.patientCardID})"
                                id="patientItem-@item.ID"
                                class="list-group-item list-group-item-action patient-item d-flex align-items-center"
                                onclick="showPatientDetails(@item.ID)">
                            <img src="~/res/user.svg"
                                 class="img-fluid rounded-circle me-2"
                                 width="35" height="35"
                                 alt="Avatar" />
                            <span>@item.name @item.surname</span>
                        </a>
                    }
                }
                else
                {
                    <div class="list-group-item text-center text-muted">
                        Hələki pasient yoxdur
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- RIGHT SIDE: Initially shows "Please select" message; once patient is chosen, show the 3 cards -->
    <div class="col ">
        <div class="container-fluid h-100" style="overflow-y: auto;">
            <div class="row gy-3">

                <!-- "SELECT A PATIENT" MESSAGE -->
                <div class="col-12" id="noPatientSelectedMsg">
                    <div class="card shadow-sm">
                        <div class="card-body text-muted">
                            Zəhmət olmasa pasient seçin
                        </div>
                    </div>
                </div>

                <!-- PATIENT DETAILS CARD (hidden until a patient is selected) -->
                <div class="col-12" id="patientDetailsCard" style="display: none;">
                    <div class="card shadow-sm">
                        <div class="card-header">
                            <h5 class="mb-0">Şəxsi məlumatlar</h5>
                        </div>
                        <div class="card-body">
                            <div class="d-flex align-items-start">
                                <img id="patientPhoto"
                                     src="~/res/user.svg"
                                     class="img-fluid rounded-circle me-3"
                                     width="80" height="80"
                                     alt="avatar" />
                                <div>
                                    <p class="mb-1"><strong>Adı:</strong> <span id="name"></span></p>
                                    <p class="mb-1"><strong>Soyadı:</strong> <span id="surname"></span></p>
                                    <p class="mb-1"><strong>Atasının adı:</strong> <span id="father"></span></p>
                                    <p class="mb-1"><strong>FIN:</strong> <span id="fin"></span></p>
                                    <p class="mb-1"><strong>Cinsi:</strong> <span id="gender"></span></p>
                                    <p class="mb-1"><strong>Doğum tarixi:</strong> <span id="bDate"></span></p>
                                    <p class="mb-1"><strong>Qeyd:</strong> <span id="note"></span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- DIAGNOSES CARD (hidden until a patient is selected) -->
                <div class="col-12" id="diagnosesCard" style="display: none;">
                    <div class="card shadow-sm">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Xəstənin Diaqnozları</h5>
                            <button type="button" class="btn btn-sm btn-outline-primary"
                                    onclick="$('#patientSearch').modal('show');">
                                Diaqnoz əlavə et
                            </button>
                        </div>
                        <div class="list-group list-group-flush"
                             style="max-height: 250px; overflow-y: auto;"
                             id="patientDiagnoses">
                            <!-- Filled by JS once a patient is selected -->
                        </div>
                    </div>
                </div>

                <!-- VIDEO RECORDS CARD (hidden until a patient is selected) -->
                <div class="col-12" id="videoCard" style="display: none;">
                    <div class="card shadow-sm">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Video yazılar siyahısı</h5>
                            <button type="button" class="btn btn-sm btn-outline-success" onclick="openVideoModal()">
                                Yeni rekord başlat
                            </button>
                        </div>
                        <div class="list-group list-group-flush"
                             style="max-height: 250px; overflow-y: auto;"
                             id="patientRecs">
                            <!-- Filled by JS once a patient is selected -->
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<!-- NO PATIENTS MODAL (if Model.Count == 0) -->
<div class="modal fade" id="noPatientsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">Pasient yoxdur</h5>
            </div>
            <div class="modal-body text-center">
                Sizin hələki pasientiniz yoxdur
            </div>
            <div class="modal-footer">
                <a class="btn btn-primary" href="/">Əsas səhifə</a>
            </div>
        </div>
    </div>
</div>

<!-- DIAGNOSIS SEARCH MODAL -->
<div class="modal fade" id="patientSearch" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Diaqnoz axtarışı</h5>
                <button type="button" class="btn-close"
                        data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="icdID" class="form-label">ICD Kodu</label>
                    <input type="text" class="form-control" id="icdID" placeholder="A00 və s." />
                </div>
                <div class="mb-3">
                    <label for="diagnoseName" class="form-label">Adı</label>
                    <input type="text" class="form-control" id="diagnoseName" placeholder="Diaqnoz adı" />
                </div>
                <div class="mb-3">
                    <label for="foundDiagnoseList" class="form-label">Axtarış Nəticələri</label>
                    <select class="form-select" size="5" id="foundDiagnoseList"
                            onchange="addDiagnose(patientIDglobal, $(this).val())">
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Ləğv et</button>
                <button type="button" class="btn btn-primary" onclick="searchForDiagnose()">Axtar</button>
            </div>
        </div>
    </div>
</div>

<!-- VIDEO RECORDING MODAL -->
<div class="modal fade" id="videoModal" data-bs-backdrop="static" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Video Qeydiyyat</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"
                        aria-label="Close" onclick="stopPreview()"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="videoInputDevice" class="form-label">Kamera seçin</label>
                    <select class="form-select" id="videoInputDevice">
                        <option value="">Varsayılan Kamera</option>
                    </select>
                </div>
                <div class="text-center position-relative">
                    <video id="videoPreview" width="360" height="240"
                           autoplay muted style="background: #000;"></video>
                    <!-- Blinking "Recording..." indicator -->
                    <div id="recordIndicator"
                         style="display:none; position:absolute; top:8px; left:8px; background:rgba(255,0,0,0.7); color:#fff; padding:3px 8px; border-radius:4px; animation: blinkRecord 1s infinite;">
                        Recording...
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="startRecordingBtn" class="btn btn-primary" onclick="startVideoRecording()">Start</button>
                <button id="stopRecordingBtn" class="btn btn-danger" style="display: none;" onclick="stopVideoRecording()">Stop</button>
            </div>
        </div>
    </div>
</div>

<!-- KEYFRAMES FOR BLINKING THE RECORDING INDICATOR -->
<style>
@@keyframes blinkRecord {
    0%   { opacity: 1; }
    50%  { opacity: 0; }
    100% { opacity: 1; }
}
</style>

@{
    // If zero patients, show "No Patients" modal automatically
    if (Model.Patients == null || Model.Patients.Count == 0)
    {
        <script>$(document).ready(function () {
                $("#noPatientsModal").modal("show");
            });</script>
;
    }
    else
    {
        // Full JS for Diagnoses, Video, etc.
        <script>
            var patientIDglobal = null;
            var stream = null;
            var mediaRecorder = null;
            var recordedBlobs = [];
            var counter = 1;

            // ========== NO AUTO SELECTION ==========
            // The user must click a patient. Then we hide the "select patient" message,
            // show the 3 hidden cards, and fill them.

            function showPatientDetails(pid) {
                $(".patient-item").removeClass("active");
                $("#patientItem-" + pid).addClass("active");

                // Hide the "please select patient" card
                $("#noPatientSelectedMsg").hide();

                // Show the hidden cards
                $("#patientDetailsCard").show();
                $("#diagnosesCard").show();
                $("#videoCard").show();

                // Fill data from the Razor Model
                $.each(@Html.Raw(Json.Serialize(@Model)), function() {
                    if (this.id === pid) {
                        patientIDglobal = pid;

                        $("#name").text(this.name || "");
                        $("#surname").text(this.surname || "");
                        $("#father").text(this.father || "");
                        $("#fin").text(this.fin || "");
                        $("#gender").text(this.genderID === 1 ? "Kişi" : "Qadın");

                        if (this.bDate) {
                            let datePart = this.bDate.split('T')[0];
                            let d = new Date(datePart);
                            let day = String(d.getDate()).padStart(2, '0');
                            let month = String(d.getMonth() + 1).padStart(2, '0');
                            let year = d.getFullYear();
                            $("#bDate").text(`${day}.${month}.${year}`);
                        } else {
                            $("#bDate").text("--");
                        }
                        $("#note").text(this.note || "");

                        // Now fetch diagnoses & records
                        getDiagnoses(pid);
                        getRecords(pid);
                    }
                });
            }

            // ========== DIAGNOSES ==========
            function getDiagnoses(pid) {
                $("#patientDiagnoses").empty();
                $.ajax({
                    type: "GET",
                    url: "/Policlinic/GetDiagnoses",
                    data: { patientID: pid },
                    success: function(data) {
                        if (Array.isArray(data)) {
                            data.forEach(function(d) {
                                $("#patientDiagnoses").append(`
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div><strong>${d.icdID}</strong> - ${d.name}</div>
                                        <a class="text-danger" href="javascript:void(0);" onclick="deleteDiagnose(${d.id});">Sil</a>
                                    </div>
                                `);
                            });
                        }
                    },
                    error: function() {
                        alert("Xəta: Diaqnozlar yüklənmədi.");
                    }
                });
            }

            function searchForDiagnose() {
                let icdID = $("#icdID").val() || "";
                let diagnoseName = $("#diagnoseName").val() || "";
                $.ajax({
                    type: "GET",
                    url: "/Policlinic/SearchDiagnose",
                    data: { icdID, name: diagnoseName },
                    success: function(data) {
                        $("#foundDiagnoseList").empty();
                        if (Array.isArray(data)) {
                            data.forEach(function(item) {
                                $("#foundDiagnoseList").append(
                                    $("<option />").val(item.id).text(`(${item.icdID}) ${item.name}`)
                                );
                            });
                        }
                    },
                    error: function() {
                        alert("Axtarış alınmadı.");
                    }
                });
            }

            function addDiagnose(pid, diagnoseID) {
                if (!diagnoseID) return;
                $.ajax({
                    type: "GET",
                    url: "/Policlinic/AddDiagnose",
                    data: { patientID: pid, diagnoseID },
                    success: function() {
                        getDiagnoses(pid);
                    },
                    error: function() {
                        alert("Diagnoz əlavə edilmədi.");
                    }
                });
            }

            function deleteDiagnose(patientDiagnoseRelID) {
                $.ajax({
                    type: "GET",
                    url: "/Policlinic/DeleteDiagnose",
                    data: { patientDiagnoseRelID },
                    success: function() {
                        getDiagnoses(patientIDglobal);
                    },
                    error: function() {
                        alert("Diagnoz silinmədi.");
                    }
                });
            }

            // ========== VIDEO RECORDS ==========
            function getRecords(pid) {
                $("#patientRecs").empty();
                $.ajax({
                    type: "GET",
                    url: "/Policlinic/GetRecords",
                    data: { patientID: pid },
                    success: function(data) {
                        if (Array.isArray(data)) {
                            data.forEach(function(r) {
                                $("#patientRecs").append(`
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <a href="${r.path}" target="_blank">${r.name}</a>
                                        <a class="text-danger" href="javascript:void(0);" onclick="deleteRecord(${r.patientRecRellID});">Sil</a>
                                    </div>
                                `);
                            });
                        }
                    },
                    error: function() {
                        alert("Xəta: Video rekordlar yüklənmədi.");
                    }
                });
            }

            function deleteRecord(patientRecID) {
                $.ajax({
                    type: "GET",
                    url: "/Policlinic/DeleteRec",
                    data: { patientRecRelID: patientRecID },
                    success: function() {
                        getRecords(patientIDglobal);
                    },
                    error: function() {
                        alert("Video silinmədi.");
                    }
                });
            }

            // ========== VIDEO RECORDING ==========
            function openVideoModal() {
                $("#videoModal").modal("show");
                // Reset
                $("#startRecordingBtn").show();
                $("#stopRecordingBtn").hide();
                $("#recordIndicator").hide();
                recordedBlobs = [];

                // Enumerate cameras, then start preview
                enumerateVideoDevices();
                startPreview();
            }

            function enumerateVideoDevices() {
                if (!navigator.mediaDevices?.enumerateDevices) return;
                let selectElem = $("#videoInputDevice");
                selectElem.empty();
                selectElem.append(new Option("Varsayılan Kamera", ""));

                navigator.mediaDevices.enumerateDevices()
                    .then(devices => {
                        devices.forEach(device => {
                            if (device.kind === "videoinput") {
                                let label = device.label || `Kamera ${selectElem[0].length+1}`;
                                let opt = new Option(label, device.deviceId);
                                selectElem.append(opt);
                            }
                        });
                    })
                    .catch(err => console.error("Enumerate devices error:", err));
            }

            function startPreview() {
                stopPreview();
                let selectedDeviceId = $("#videoInputDevice").val();
                let constraints = {
                    audio: true,
                    video: { deviceId: selectedDeviceId ? { exact: selectedDeviceId } : undefined }
                };
                navigator.mediaDevices.getUserMedia(constraints)
                    .then(str => {
                        stream = str;
                        let videoPreview = document.getElementById("videoPreview");
                        videoPreview.srcObject = stream;
                        videoPreview.play();
                    })
                    .catch(err => {
                        console.error("startPreview error:", err);
                        alert("Kamera və/ya mikrofon icazəsi verilmədi.");
                    });
            }

            function stopPreview() {
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                }
                stream = null;
                document.getElementById("videoPreview").srcObject = null;
            }

            function startVideoRecording() {
                if (!stream) {
                    alert("Kamera tapılmadı, xahiş olunur icazə verin və ya cihaz seçin.");
                    return;
                }
                recordedBlobs = [];
                let options = { mimeType: "video/webm;codecs=vp9" };
                mediaRecorder = new MediaRecorder(stream, options);

                mediaRecorder.ondataavailable = e => {
                    if (e.data && e.data.size > 0) {
                        recordedBlobs.push(e.data);
                    }
                };
                mediaRecorder.onstart = () => {
                    $("#recordIndicator").show();
                };
                mediaRecorder.onerror = e => {
                    console.error("MediaRecorder error:", e.error);
                    alert("MediaRecorder error: " + e.error?.message);
                };
                mediaRecorder.onstop = handleRecordingStop;

                mediaRecorder.start(1000); // gather ~1s chunks
                $("#startRecordingBtn").hide();
                $("#stopRecordingBtn").show();
            }

            function stopVideoRecording() {
                if (mediaRecorder && mediaRecorder.state !== "inactive") {
                    mediaRecorder.stop();
                }
                $("#recordIndicator").hide();
                $("#startRecordingBtn").show();
                $("#stopRecordingBtn").hide();
            }

            function handleRecordingStop() {
                console.log("Recording stopped, uploading...");
                const blob = new Blob(recordedBlobs, { type: "video/webm" });
                const formData = new FormData();
                formData.append("videoFile", blob, `recorded-video-${counter}.webm`);
                formData.append("patientID", patientIDglobal);
                counter++;

                // Simple overlay while uploading
                const backdrop = $('<div class="modal-backdrop fade show"></div>').appendTo(document.body);
                const loader = $(`
                    <div class="d-flex justify-content-center align-items-center position-fixed w-100 h-100"
                         style="top:0;left:0;z-index:9999;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Yüklənir...</span>
                        </div>
                    </div>
                `).appendTo(document.body);

                $.ajax({
                    type: "POST",
                    url: "/Policlinic/UploadVideo",
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function() {
                        backdrop.remove();
                        loader.remove();
                        alert("Video uğurla yükləndi.");
                        getRecords(patientIDglobal);
                    },
                    error: function() {
                        backdrop.remove();
                        loader.remove();
                        alert("Video yüklənmədi, zəhmət olmasa yenidən cəhd edin.");
                    }
                });
            }
        </script>
;
    }
}
