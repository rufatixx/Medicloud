@using Medicloud.DAL.Entities




@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}


@model Medicloud.BLL.Models.WorkHourViewModel
<style>
    .form-switch {
        cursor: pointer;
    }

        .form-switch input {
            cursor: pointer
        }
</style>
@{
    var cultureInfo = new System.Globalization.CultureInfo("az-AZ");

}


<div class="container mt-5 d-flex justify-content-center">
    <div class="row col-md-6 text-center justify-content-center ">

        @if (Model.WorkHours != null && Model.WorkHours.Count > 0)
        {

            <div class="">
                <div class="card-header   align-items-center">

                    <div class="text-center flex-grow-1 mb-3">
                        <h1>@(Model.IsOwnerUser ? "İş saatlarınız" : $"{Model.UserFullName} - İş saatları")</h1>
                    </div>
                </div>
                <form id="workHourForm" method="post" asp-action="UpdateWorkHoursWithForm" asp-controller="Profile">

                    <div class="card-body ">
                        <input type="hidden" id="closedDays" name="ClosedDays" />
                        <input type="hidden" id="openedDays" name="OpenedDays" />
                        <input type="hidden" asp-for="OrganizationId" />
                        <input type="hidden" asp-for="UserId" />


                        @foreach (var item in Model.WorkHours)
                        {

                            var dayName = cultureInfo.DateTimeFormat.GetDayName((System.DayOfWeek)(item.dayOfWeek % 7));
                            var capitalizedDayName = cultureInfo.TextInfo.ToTitleCase(dayName);
                            string isChecked = "";
                            string displayTime = "";
                            string startTime = item.startTime?.ToString(@"hh\:mm")!;
                            string endTime = item.endTime?.ToString(@"hh\:mm")!;
                            var breakData = Json.Serialize(item.Breaks?.Select(a => new { start = a.start?.ToString(@"hh\:mm"), end = a.end?.ToString(@"hh\:mm") }));
                            if (item.startTime == null && item.endTime == null)
                            {
                                isChecked = "";
                                displayTime = "Bağlı";
                            }
                            else
                            {
                                isChecked = "checked";
                                displayTime = $"{startTime} - {endTime}";
                            }
                            <div class="row form-switch align-items-center mb-3">
                                <div class="col-6 row align-items-center">
                                    <div class="col-4">
                                        <input class="form-check-input toggle-checkbox" data-day-number="@item.dayOfWeek" @isChecked type="checkbox" id="@item.id">

                                    </div>

                                    <div class="col-8 text-start">
                                        <label class="form-check-label text-start" style="cursor:pointer;" for="@item.id">@capitalizedDayName</label>

                                    </div>

                                </div>
                                <div class="col-6 row align-items-center item-row" data-day="@capitalizedDayName" data-breaks='@breakData' data-id="@item.id" data-day-number="@item.dayOfWeek" data-item-id="@item.id" data-start="@startTime" data-end="@endTime">
                                    <div class="col-10">
                                        <span class="text-muted" id="time-@item.id">@displayTime</span>
                                        @if (item.Breaks != null)
                                        {
                                            @foreach (var br in item.Breaks)
                                            {
                                                <div class="break" data-start="@br.start" data-end="@br.end">
                                                    <span style="font-size:12px;font-weight:500;">Fasilə @br.start?.ToString(@"hh\:mm") - @br.end?.ToString(@"hh\:mm")</span>
                                                </div>
                                            }
                                        }

                                    </div>
                                    <div class="col-2">
                                        <btn class="btn btn-sm">
                                            <svg width="20px" height="20px" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#908e8e">
                                                <path d="M9 5L16 12L9 19" stroke="#737373" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                            </svg>
                                        </btn>
                                    </div>

                                </div>
                            </div>
                        }
                        @*<select id="reservationSelect" class="form-select"></select>*@

                        @*<label for="timeSlots">Uygun Saat Seçin:</label>
        <select id="timeSlots"></select>*@


                        @*<div class="dropdown">
                            <button id="dropdownButton"  class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Saat Seçin
                            </button>
                            <ul class="dropdown-menu" style="max-height:400px; overflow:auto;" id="timeDropdown"></ul>
                        </div>*@
                    </div>


                    <div class="mb-3 d-flex justify-content-around align-items-center">
                        @*<a class="btn btn-sm" asp-action="Step7" asp-route-organizationId="@Model.id" asp-area="Business">
                                <svg width="32px" height="32px" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" fill="#737373">
                                    <path fill="#737373" d="M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z"></path>
                                    <path fill="#737373" d="m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z"></path>
                                </svg>
                            </a>*@
                        <button class="btn btn-primary" id="nextButton"> Yadda saxla</button>
                    </div>
                </form>
            </div>
        }
        else
        {
            <h4 class="text-center mt-5"> Məlumat tapılmadı.</h4>
        }
    </div>

</div>

<div class="modal fade" id="editTimeModal" tabindex="-1" aria-labelledby="editTimeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTimeModalLabel"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editTimeForm" style="min-height:250px;">
                    <input type="hidden" id="selectedDay">
                    <div class="row align-items-center">
                        <span class="col-4">İş saatları</span>
                        <div class="col-4">
                            <select id="startTimeSelect" class="form-select"></select>
                        </div>
                        <div class="col-4">
                            <select id="endTimeSelect" class="form-select"></select>
                        </div>
                    </div>
                    <div class="row mt-2 align-items-center" id="breaksContent">
                        <span class="col-4">Fasilə</span>
                        <div class="col-8" id="breaksContainer">
                        </div>
                    </div>

                </form>

                <button class="btn btn-light" id="addBreakButton">+ Fasilə əlavə et</button>

            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Ləğv et</button>
                <button type="button" class="btn btn-primary" id="saveTimeButton">Yadda saxla</button>
            </div>
        </div>
    </div>
</div>


@if (Model.WorkHours != null)
{


    <div class="modal fade" id="copyTimeModal" tabindex="-1" aria-labelledby="copyTimeModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header align-items-start">
                    <div class="text-center px-2">
                        <h3 class="modal-title">İş saatlarınız kopyalansın?</h3>
                        <p>Müəyyən edilmiş iş saatlarını digər günlərə tətbiq etmək istəryirsinizsə siyahıdan günləri seçin</p>
                    </div>

                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @{
                        var weekdata = Model.WorkHours.Select(w => new { id = w.id, day = w.dayOfWeek }).ToList();

                        foreach (var item in Model.WorkHours)
                        {
                            var dayName = cultureInfo.DateTimeFormat.GetDayName((System.DayOfWeek)(item.dayOfWeek % 7));
                            var capitalizedDayName = cultureInfo.TextInfo.ToTitleCase(dayName);
                            <div class="col-12">
                                <div class="form-check text-start mb-2">
                                    <input type="checkbox" style="cursor:pointer;" class="form-check-input" data-id="@item.id" id="copyCheckInput@(item.id)">
                                    <label class="form-check-label " style="cursor:pointer;" for="copyCheckInput@(item.id)">@capitalizedDayName</label>
                                </div>
                            </div>

                        }
                        // for (int i = 1; i <= Model.; i++)
                        // {

                        // }
                    }

                </div>

                <div class="modal-footer">
                    @* <button type="button" id="noButton" class="btn btn-secondary">Xeyr</button> *@
                    <button type="button" class="btn btn-primary" id="saveButton">Davam et</button>
                </div>
            </div>
        </div>
    </div>

}


@section Scripts {

    <script>


        //const workStart = "09:00";
        //const workEnd = "17:00";
        //const breaks = [
        //    ["12:00", "13:00"],
        //    ["15:30", "16:45"]
        //];

        //const reservedSlots = [
        //    ["10:00", "10:30"],
        //    ["14:15", "14:30"]
        //];
        //const intervalMinutes = 15;









        //function parseTime(timeStr) {
        //    const [hour, minute] = timeStr.split(":").map(Number);
        //    return hour * 60 + minute;
        //}

        //function formatTime(minutes) {
        //    const hour = Math.floor(minutes / 60);
        //    const minute = minutes % 60;
        //    return `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
        //}

        //function isInRange(startA, endA, startB, endB) {
        //    return !(endA <= startB || startA >= endB);
        //}

        //function getSlotStatus(startTime, endTime, breaks, reserved) {
        //    for (const [start, end] of breaks) {
        //        if (isInRange(startTime, endTime, parseTime(start), parseTime(end))) return "break";
        //    }
        //    for (const [start, end] of reserved) {
        //        if (isInRange(startTime, endTime, parseTime(start), parseTime(end))) return "reserved";
        //    }
        //    return "available";
        //}

        //function generateTimeSlots(start, end, interval, breaks, reserved) {
        //    const slots = [];
        //    let current = parseTime(start);
        //    const endTime = parseTime(end);

        //    while (current + interval <= endTime) {
        //        const slotEnd = current + interval;
        //        const label = `${formatTime(current)} - ${formatTime(slotEnd)}`;
        //        const status = getSlotStatus(current, slotEnd, breaks, reserved);
        //        slots.push({ label, status });
        //        current += interval;
        //    }

        //    return slots;
        //}

        //$(document).ready(function () {
        //    const slots = generateTimeSlots(workStart, workEnd, intervalMinutes, breaks, reservedSlots);
        //    const $dropdown = $("#timeDropdown");
        //    const $button = $("#dropdownButton");

        //    slots.forEach(slot => {
        //        let badge = '';
        //        let itemClass = 'dropdown-item';
        //        let disabledAttr = '';

        //        switch (slot.status) {
        //            case "available":
        //                badge = '<span class="badge bg-success me-2">Uygun</span>';
        //                break;
        //            case "break":
        //                badge = '<span class="badge bg-warning text-dark me-2">Break time</span>';
        //                itemClass += ' disabled';
        //                disabledAttr = 'disabled';
        //                break;
        //            case "reserved":
        //                badge = '<span class="badge bg-danger me-2">Reserved time</span>';
        //                itemClass += ' disabled';
        //                disabledAttr = 'disabled';
        //                break;
        //        }

        //        const $item = $(`<li><a class="${itemClass}" href="#" ${disabledAttr}>${badge}${slot.label}</a></li>`);

        //        if (slot.status === "available") {
        //            $item.find('a').on('click', function (e) {
        //                e.preventDefault();
        //                $button.text(slot.label);
        //            });
        //        }

        //        $dropdown.append($item);
        //    });
        //});











        //function parseTime(timeStr) {
        //    const [hour, minute] = timeStr.split(":").map(Number);
        //    return hour * 60 + minute;
        //}

        //function formatTime(minutes) {
        //    const hour = Math.floor(minutes / 60);
        //    const minute = minutes % 60;
        //    return `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
        //}

        //function isInRange(startA, endA, startB, endB) {
        //    return !(endA <= startB || startA >= endB);
        //}

        //function getSlotStatus(startTime, endTime, breaks, reserved) {
        //    for (const [start, end] of breaks) {
        //        if (isInRange(startTime, endTime, parseTime(start), parseTime(end))) return "break";
        //    }
        //    for (const [start, end] of reserved) {
        //        if (isInRange(startTime, endTime, parseTime(start), parseTime(end))) return "reserved";
        //    }
        //    return "available";
        //}

        //function generateTimeSlots(start, end, interval, breaks, reserved) {
        //    const slots = [];
        //    let current = parseTime(start);
        //    const endTime = parseTime(end);

        //    while (current + interval <= endTime) {
        //        const slotEnd = current + interval;
        //        const label = `${formatTime(current)} - ${formatTime(slotEnd)}`;
        //        const status = getSlotStatus(current, slotEnd, breaks, reserved);
        //        slots.push({ label, status });
        //        current += interval;
        //    }

        //    return slots;
        //}

        //$(document).ready(function () {
        //    const slots = generateTimeSlots(workStart, workEnd, intervalMinutes, breaks, reservedSlots);
        //    const $dropdown = $("#timeDropdown");

        //    slots.forEach(slot => {
        //        let badge = '';
        //        let itemClass = 'dropdown-item';

        //        switch (slot.status) {
        //            case "available":
        //                badge = '<span class="badge bg-success me-2">Uygun</span>';
        //                break;
        //            case "break":
        //                badge = '<span class="badge bg-warning text-dark me-2">Break time</span>';
        //                itemClass += ' disabled';
        //                break;
        //            case "reserved":
        //                badge = '<span class="badge bg-danger me-2">Reserved time</span>';
        //                itemClass += ' disabled';
        //                break;
        //        }

        //        $dropdown.append(`<li><a class="${itemClass}" href="#">${badge}${slot.label}</a></li>`);
        //    });
        //});




























        //function parseTime(timeStr) {
        //    const [hour, minute] = timeStr.split(":").map(Number);
        //    return hour * 60 + minute;
        //}

        //function formatTime(minutes) {
        //    const hour = Math.floor(minutes / 60);
        //    const minute = minutes % 60;
        //    return `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
        //}

        //function isInRange(startA, endA, startB, endB) {
        //    // Zaman aralıkları çakışıyor mu?
        //    return !(endA <= startB || startA >= endB);
        //}

        //function isInBreakOrReserved(startTime, endTime, breaks, reserved) {
        //    return breaks.concat(reserved).some(([start, end]) => {
        //        return isInRange(startTime, endTime, parseTime(start), parseTime(end));
        //    });
        //}

        //function generateTimeSlots(start, end, interval, breaks, reserved) {
        //    const slots = [];
        //    let current = parseTime(start);
        //    const endTime = parseTime(end);

        //    while (current + interval <= endTime) {
        //        const slotEnd = current + interval;

        //        if (!isInBreakOrReserved(current, slotEnd, breaks, reserved)) {
        //            const slot = `${formatTime(current)} - ${formatTime(slotEnd)}`;
        //            slots.push(slot);
        //        }

        //        current += interval;
        //    }

        //    return slots;
        //}

        //$(document).ready(function () {
        //    const timeSlots = generateTimeSlots(workStart, workEnd, intervalMinutes, breaks, reservedSlots);
        //    const $select = $("#timeSlots");

        //    if (timeSlots.length === 0) {
        //        $select.append($('<option>', { text: "Uygun saat bulunamadı", disabled: true }));
        //    } else {
        //        $.each(timeSlots, function (i, timeRange) {
        //            $select.append($('<option>', {
        //                value: timeRange,
        //                text: timeRange
        //            }));
        //        });
        //    }
        //});


        //function parseTime(timeStr) {
        //    const [hour, minute] = timeStr.split(":").map(Number);
        //    return hour * 60 + minute;
        //}

        //function formatTime(minutes) {
        //    const hour = Math.floor(minutes / 60);
        //    const minute = minutes % 60;
        //    return `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
        //}

        //function isInBreak(startTime, endTime, breaks) {
        //    return breaks.some(([breakStart, breakEnd]) => {
        //        const breakStartMin = parseTime(breakStart);
        //        const breakEndMin = parseTime(breakEnd);
        //        // Slot molayla çakışıyor mu?
        //        return !(endTime <= breakStartMin || startTime >= breakEndMin);
        //    });
        //}

        //function generateTimeSlots(start, end, interval, breaks) {
        //    const slots = [];
        //    let current = parseTime(start);
        //    const endTime = parseTime(end);

        //    while (current + interval <= endTime) {
        //        const slotEnd = current + interval;

        //        if (!isInBreak(current, slotEnd, breaks)) {
        //            const slot = `${formatTime(current)} - ${formatTime(slotEnd)}`;
        //            slots.push(slot);
        //        }

        //        current += interval;
        //    }

        //    return slots;
        //}

        //$(document).ready(function () {
        //    const timeSlots = generateTimeSlots(workStart, workEnd, intervalMinutes, breaks);
        //    const $select = $("#timeSlots");

        //    $.each(timeSlots, function (i, timeRange) {
        //        $select.append($('<option>', {
        //            value: timeRange,
        //            text: timeRange
        //        }));
        //    });
        //});



        let selectedStart;
        let selectedEnd;
        let selectedId;
        let selectedDay;
        let closedDays = [];
        let openedDays = [];
        $(document).ready(function () {
            function populateTimeOptions(start, end) {
                const $startTimeSelect = $("#startTimeSelect");
                const $endTimeSelect = $("#endTimeSelect");
                $startTimeSelect.empty();
                $endTimeSelect.empty();

                let startHour = 0;
                let endHour = 23;

                for (let hour = startHour; hour <= endHour; hour++) {
                    for (let minute = 0; minute < 60; minute += 15) {
                        const time = `${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}`;
                        $startTimeSelect.append(`<option value="${time}">${time}</option>`);
                        $endTimeSelect.append(`<option value="${time}">${time}</option>`);
                    }
                }

                $startTimeSelect.val(start);
                $endTimeSelect.val(end);
            }


            $("#startTimeSelect").on("change", function () {
                const selectedTime = $(this).val();
                const [selectedHour, selectedMinute] = selectedTime.split(":").map(Number);
                const $endTimeSelect = $("#endTimeSelect");
                $endTimeSelect.empty();

                let endHour = 23;


                if (selectedHour >= 23) {
                    endHour = selectedHour;
                }

                for (let hour = selectedHour; hour <= endHour; hour++) {
                    for (let minute = (hour === selectedHour ? selectedMinute + 15 : 0); minute < 60; minute += 15) {
                        const time = `${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}`;
                        // Eğer şu anki saat 18:00 ise, bunu değiştirmiyoruz
                        if (time === selectedEnd) {
                            $endTimeSelect.append(`<option value="${time}" selected>${time}</option>`);
                        } else {
                            $endTimeSelect.append(`<option value="${time}">${time}</option>`);
                        }
                    }
                }

                if (selectedEnd !== $endTimeSelect.val()) {
                    selectedEnd = $endTimeSelect.val();
                }
            });


            $("#startTimeSelect").on("change", function (event) {
                selectedStart = $(this).val();
                console.log(selectedEnd)
            });
            $("#endTimeSelect").on("change", function (event) {
                selectedEnd = $(this).val();
                console.log(selectedEnd)
            });

            $(".toggle-checkbox").on("click", function (event) {
                console.log("Clciked")
                event.stopPropagation(); // Checkbox tıklamasında row tıklamasını engelle
                const id = $(this).attr("id");
                const $timeLabel = $(`#time-${id}`);
                const $itemRow = $(this).closest(".row").next(".item-row");
                const start = $itemRow.data("start");
                const end = $itemRow.data("end");
                const dayNumber = $itemRow.data("day-number");
                const breaks = $itemRow.data("breaks");
                console.log(breaks)
                if ($(this).is(":checked")) {
                    $timeLabel.text(`${start || '09:00'} - ${end || '18:00'}`);
                    breaks.forEach(function (breakData) {
                        $itemRow.find(".col-10").append(`
                                    <div class="break">
                                        <span style="font-size:12px;font-weight:500;">Fasilə ${breakData.start} - ${breakData.end}</span>
                                    </div>
                                `);
                    });
                } else {
                    $timeLabel.text("Bağlı");
                    $itemRow.find(".break").remove();
                }

            });


            $(".item-row").on("click", function () {
                const $checkbox = $(this).prev().find(".toggle-checkbox"); // Get the checkbox from the previous sibling (.col-6)
                if ($checkbox.is(":checked")) { // Check if the checkbox is checked
                    const day = $(this).data("day");
                    selectedStart = $(this).data("start") || '09:00';
                    selectedEnd = $(this).data("end") || '18:00';
                    selectedId = $(this).data("id");
                    selectedDay = $(this).data("id");
                    console.log(selectedStart)
                    console.log(selectedEnd)
                    $("#selectedDay").val(day);
                    $("#editTimeModalLabel").text(`${day}`);
                    populateTimeOptions(selectedStart, selectedEnd);
                    let itemBreaks = $(this).data('breaks');
                    console.log(itemBreaks)
                    breaks = itemBreaks;
                    updateBreakOptions();
                    console.log(breaks)
                    $("#editTimeModal").modal("show");
                }
            });


            // Modal'da saat kaydetme işlemi
            $("#saveTimeButton").on("click", function () {
                const day = $("#selectedDay").val();
                if (selectedStart && selectedEnd && selectedId) {
                    $("#editTimeModal").modal("hide");
                    $("#copyCheckInput" + selectedDay).prop("checked", true).prop('disabled', true);
                    $("#copyTimeModal").modal("show");

                } else {
                    alert("Xəta baş verdi");
                }
            });


            $('#workHourForm').on('submit', function (event) {
                closedDays = [];
                openedDays = [];
                $('.toggle-checkbox').each(function () {
                    let dayId = $(this).attr('id');
                    if ($(this).prop('checked')) {
                        openedDays.push(dayId);
                    } else {

                        closedDays.push(dayId);
                    }
                });

                $('#openedDays').val(JSON.stringify(openedDays))
                $('#closedDays').val(JSON.stringify(closedDays))

                this.submit();
            });

            $("#saveButton").on("click", function () {

                var selectedDays = [];
                closedDays = [];
                openedDays = [];
                $('input[id^="copyCheckInput"]:checked').each(function () {
                    // Store the id or value of each checked checkbox (you can change this depending on your need)
                    selectedDays.push($(this).data('id')); // Collect the id of the checked checkboxes
                    // Or if you want to collect the day number, you can extract the number from the id
                    // checkedDays.push($(this).attr('id').replace('copyCheckInput', '')); // This would give you the number (1 to 7)
                });

                $('.toggle-checkbox').each(function () {
                    let dayId = $(this).attr('id');
                    if ($(this).prop('checked')) {
                        openedDays.push(dayId);
                    } else {

                        closedDays.push(dayId);
                    }
                });

                let data = {
                    selectedId: selectedId,
                    startTime: selectedStart,
                    endTime: selectedEnd,
                    breaks: breaks,
                    selectedDays: selectedDays,
                    closedDays: closedDays,
                    openedDays: openedDays
                }



                //console.log(data)
                showLoading();
                $.ajax({
                    url: `/Profile/UpdateWorkHours`,
                    type: 'POST',
                    data: JSON.stringify(data),
                    contentType: 'application/json',
                    success: function (response) {
                        location.reload();
                    },
                    error: function (xhr, status, error) {
                        hideLoading();
                        console.error(error);
                    }
                });
            });

            $('#copyTimeModal').on('hidden.bs.modal', function () {
                // Reset only the checkboxes with 'id' starting with 'copyCheckInput'
                $('input[id^="copyCheckInput"]').prop('checked', false).prop('disabled', false); // Uncheck only those checkboxes
            });

            $('#editTimeModal').on('hidden.bs.modal', function () {
                // Reset only the checkboxes with 'id' starting with 'copyCheckInput'
                closedDays = [];
                openedDays = [];
            });



            let breaks = [];


            updateBreakOptions();

            function generateTimeOptions(start, end) {
                const options = [];
                let currentTime = new Date(`1970-01-01T${start}:00`);
                const endTimeMoment = new Date(`1970-01-01T${end}:00`);

                while (currentTime <= endTimeMoment) {
                    options.push(currentTime.toTimeString().substring(0, 5));
                    currentTime.setMinutes(currentTime.getMinutes() + 5);
                }
                return options;
            }

            function updateBreakOptions() {
                const $breaksContainer = $("#breaksContainer");
                $breaksContainer.empty();

                if (breaks.length == 0) {
                    $("#breaksContent").hide();
                }
                else {
                    $("#breaksContent").show();
                }
                breaks.forEach((brk, index) => {
                    const breakHtml =
                        `<div class="row mb-2 align-items-center" data-index="${index}">
                                <div class="col-5">
                                    <select class="form-select break-start" data-index="${index}">
                                    </select>
                                </div>
                                <div class="col-5">
                                    <select class="form-select break-end" data-index="${index}">
                                    </select>
                                </div>
                                <div class="col-2">
                                    <button class="btn btn-danger btn-sm remove-break" data-index="${index}">X</button>
                                </div>
                            </div>`;
                    $breaksContainer.append(breakHtml);
                });

                updateBreakTimes();
            }

            function updateBreakTimes() {
                $(".break-start").each((index, el) => {
                    const $startSelect = $(el);
                    const $endSelect = $(`.break-end[data-index="${index}"]`);

                    const previousStart = breaks[index]?.start || selectedStart;
                    const previousEnd = breaks[index]?.end || selectedEnd;

                    let availableTimes = generateTimeOptions(selectedStart, selectedEnd);


                    breaks.forEach((brk, i) => {
                        if (i !== index) {
                            availableTimes = availableTimes.filter(time => !(time >= brk.start && time <= brk.end));
                        }
                    });


                    $startSelect.empty();
                    availableTimes.forEach(option => {
                        $startSelect.append(new Option(option, option, false, option === previousStart));
                    });

                    const selectedStartTime = $startSelect.val() || availableTimes[0];

                    let availableEndTimes = availableTimes.filter(time => time > selectedStartTime);


                    $endSelect.empty();
                    availableEndTimes.forEach(option => {
                        $endSelect.append(new Option(option, option, false, option === previousEnd));
                    });

                    breaks[index].start = $startSelect.val();
                    breaks[index].end = $endSelect.val();
                });
            }



            function addBreak() {
                const lastBreak = breaks.length > 0 ? breaks[breaks.length - 1] : null;

                let newStartTime = lastBreak ? lastBreak.end : selectedStart;
                let availableTimes = generateTimeOptions(newStartTime, selectedEnd);

                // Mevcut molaların zaman aralıklarını engelle
                breaks.forEach(brk => {
                    availableTimes = availableTimes.filter(time => !(time >= brk.start && time <= brk.end));
                });

                if (availableTimes.length < 2) return;

                const newBreak = {
                    start: availableTimes[0],
                    end: availableTimes[1]
                };

                breaks.push(newBreak);
                updateBreakOptions();
            }

            function removeBreak(index) {
                breaks.splice(index, 1);
                updateBreakOptions();
            }

            // Event Listeners
            $(document).on("click", ".remove-break", function () {
                const index = $(this).data("index");
                removeBreak(index);
            });

            $(document).on("change", ".break-start", function () {
                const index = $(this).data("index");
                breaks[index].start = $(this).val();

                let availableEndTimes = generateTimeOptions(breaks[index].start, selectedEnd).filter(time => time > breaks[index].start);
                breaks[index].end = availableEndTimes[0] || breaks[index].start;
                updateBreakOptions();
            });

            $(document).on("change", ".break-end", function () {
                const index = $(this).data("index");
                breaks[index].end = $(this).val();
                updateBreakOptions();
            });

            $("#addBreakButton").on("click", function () {
                addBreak();
            });


        });
    </script>
}
