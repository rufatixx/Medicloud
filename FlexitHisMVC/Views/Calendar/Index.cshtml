<link rel="shortcut icon" href="assets/images/favicon.ico">
<link href="assets/vendor/fullcalendar/main.min.css" rel="stylesheet" type="text/css" />
<link href="assets/css/app-saas.min.css" rel="stylesheet" type="text/css" id="app-style" />
<link href="assets/css/icons.min.css" rel="stylesheet" type="text/css" />

<style>
    .fc-event {
        cursor: pointer;
    }
</style>
<div class="col-12">
    <div class="page-title-box">

        <h2 class="page-title">Təqvim</h2>
    </div>
</div>

<div class="row">

    <div class="modal fade" id="appointmentsModal" tabindex="-1" aria-labelledby="appointmentsModalLabel" aria-hidden="true">
        <div class="modal-dialog  modal-dialog-centered modal-lg">
            <div class="modal-content ">
                <div class="modal-header">
                    <h5 class="modal-title" id="appointmentsModalLabel">Randevular</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <table class="table w-100">

                        <thead id="appointmentsTableHead"></thead>
                        <tbody id="appointmentsTableBody"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12">
        <div class="card rounded-4">
            <div class="card-body">




                <div id="calendar"></div>



            </div>
        </div>
    </div>
</div>
@await Component.InvokeAsync("AppointmentModal")

@*@Html.Partial("_AppointmentModal")*@

@section Scripts {
    <script src="/assets/vendor/fullcalendar/main.min.js"></script>
    <script src="js/appointment/appointmentTime.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const calendarEl = document.getElementById('calendar');
            const calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                headerToolbar: {
                    left: "prev,next today",
                    center: "title",
                    right: "newAppointment"
                },
                buttonText: {
                    prev: "<",
                    next: ">",
                    today: "Bu gün"
                },
                customButtons: {
                    newAppointment: {
                        text: 'Yeni Növbə',
                        click: function () {
                            $('#add-appointment-modal').modal('show');
                        }
                    }
                },
                dateClick: function (info) {
                    fetchAppointmentsForDay(new Date(info.dateStr));
                },
                eventClick: function (info) {
                    fetchAppointmentsForDay(new Date(info.event.startStr));
                },
                themeSystem: 'bootstrap',
                titleFormat: {
                    month: 'numeric',
                    year: 'numeric'
                },
                locale: 'az'
            });

            calendar.render();

            function getTimeOfDate(date) {
                let hours = date.getHours().toString().padStart(2, '0');
                let minutes = date.getMinutes().toString().padStart(2, '0');

                return `${hours}:${minutes}`;
            }

          function fetchAppointmentsForDay(dateStr) {
            fetch(`@Url.Action("GetAppointmentByDate", "Appointments")/?date=${dateStr.toISOString()}`)
                .then(response => response.json())
                .then(appointments => {
                    if (appointments?.length > 0) {
                        const tableHead = document.getElementById('appointmentsTableHead');
                        const tableBody = document.getElementById('appointmentsTableBody');

                        tableHead.innerHTML = `
                            <tr>
                                <th style="width:50px">№</th>
                                <th style="width:160px">Ad, Soyad</th>
                                <th style="width:120px">Telefon</th>
                                <th style="width:300px">Xidmət</th>
                                <th style="width:300px">Xidmət göstərən</th>
                                <th style="width:120px">Vaxt</th>
                            </tr>
                        `;

                        tableBody.innerHTML = '';
                        appointments.forEach((appointment, index) => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${index + 1}</td>
                                <td>${appointment.patient_name} ${appointment.patient_surname}</td>
                                <td>${appointment.patient_phone}</td>
                                <td>${appointment.service_name}</td>
                                <td>${appointment.user_name} ${appointment.user_surname} (${appointment.user_speciality_name})</td>
                                <td>${getTimeOfDate(new Date(appointment.start_date))} - ${getTimeOfDate(new Date(appointment.end_date))}</td>
                            `;
                            tableBody.appendChild(row);
                        });

                        const appointmentsModal = new bootstrap.Modal(document.getElementById('appointmentsModal'));
                        appointmentsModal.show();
                    }
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                });
                }


            function fetchAndDisplayEvents() {

                const startDate = calendar.view.activeStart;
                const endDate = calendar.view.activeEnd;

                fetch(`@Url.Action("GetAppointmentsByRange", "Appointments")/?startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`)
                    .then(response => {
                        return response.json();
                    })
                    .then(data => {
                        const appointmentsCount = {};
                        data.forEach(appointment => {
                            const date = appointment.start_date.split('T')[0];
                            if (appointmentsCount[date]) {
                                appointmentsCount[date]++;
                            } else {
                                appointmentsCount[date] = 1;
                            }
                        });

                        for (const date in appointmentsCount) {
                            calendar.addEvent({
                                title: `Növbə sayı: ${appointmentsCount[date]}`,
                                start: date,
                                allDay: true,
                            });
                        }
                    })
                    .catch(error => {
                        console.error('fetch error:', error);
                    });
            }

            function debounce(func, delay) {
                let debounceTimer;
                return function () {
                    const context = this;
                    const args = arguments;
                    clearTimeout(debounceTimer);
                    debounceTimer = setTimeout(() => func.apply(context, args), delay);
                };
            }

            const debounceFetchAndDisplayEvents = debounce(fetchAndDisplayEvents, 300);

            document.querySelector('.fc-prev-button').addEventListener('click', () => {
                calendar.removeAllEvents();
                debounceFetchAndDisplayEvents();
            });

            document.querySelector('.fc-next-button').addEventListener('click', () => {
                calendar.removeAllEvents();
                debounceFetchAndDisplayEvents();
            });

            document.querySelector('.fc-today-button').addEventListener('click', () => {
                calendar.today();
                calendar.removeAllEvents();
                debounceFetchAndDisplayEvents();
            });

            fetchAndDisplayEvents();
        });




              document.addEventListener('DOMContentLoaded', function () {

            function debounce(func, delay) {
                  let debounceTimer;
                  return function (...args) {
                      clearTimeout(debounceTimer);
                      debounceTimer = setTimeout(() => func.apply(this, args), delay);
                  };
              }




              // Search logic wrapped in debounce
              function searchUsers(searchQuery) {
                  console.log(searchQuery)
                  // Show the loader when searching
               $('#userList').html(`
                    <li id="searchLoader" class="text-center py-2">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </li>
                `);

                $('#patientId').val('');

                  if (searchQuery.length > 0) {

                      $.ajax({
                          url: `@Url.Action("GetPatientByName", "Patient")`,
                          method: 'GET',
                          data: { search: encodeURIComponent(searchQuery) },
                          success: function (response) {
                              $('#searchLoader').hide();

                              if (response.length > 0) {
                                  // Display the filtered results
                                  response.forEach(function (user) {
                                      console.log(user)
                                      var listItem = $('<li>')
                                          .addClass('dropdown-item border cursor-pointer')
                                          .text(`${user.name} ${user.surname} ${user.father} (FİN: ${user.fin})`)
                                          .data('id', user.id)
                                          .css('cursor','pointer')
                                          .on('click', function (e){

                                              var selectedUserId = $(this).data('id');
                                               $('#patientId').val(selectedUserId);
                                               $('#patientPhone').val(user.phone);

                                              $('#userSearch').val(user.name);


                                          });

                                      $('#userList').append(listItem);
                                  });

                              } else {
                                  $('#userList').append('<li class="dropdown-item">Pasient tapılmadı</li>');
                              }
                          },
                          error: function () {
                              $('#searchLoader').hide();

                              $('#userList').append('<li class="dropdown-item">Error fetching data</li>');
                          }
                      });
                  } else {
                      $('#searchLoader').hide();
                  }
              }

              $('#userSearch').on('input', debounce(function () {
                  var searchQuery = $(this).val();
                  searchUsers(searchQuery);
              }, 500));



              function searchServices(searchQuery) {
                  // Show the loader when searching
               $('#serviceList').html(`
                    <li id="searchLoaderService" class="text-center py-2">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </li>
                `);
                  // $('#userList').empty(); // Clear the previous search results
                $('#serviceId').val('');

                  if (searchQuery.length > 0) {

                      $.ajax({
                          url: `@Url.Action("GetAllServices", "Services")`,
                          method: 'GET',
                          data: { search: encodeURIComponent(searchQuery) },
                          success: function (response) {
                              $('#searchLoaderService').hide();

                              if (response.length > 0) {
                                  // Display the filtered results
                                  response.forEach(function (user) {
                                      var listItem = $('<li>')
                                          .addClass('dropdown-item border cursor-pointer')
                                          .text(user.name)
                                          .css('cursor','pointer')
                                          .data('id', user.id)
                                          .on('click', function (e){

                                              var selectedService = $(this).text();
                                              var selectedServiceId = $(this).data('id');
                                               $('#serviceId').val(selectedServiceId);

                                              $('#serviceSearch').val(selectedService);

                                          });

                                      $('#serviceList').append(listItem);
                                  });

                              } else {
                                  $('#serviceList').append('<li class="dropdown-item">Xidmət tapılmadı</li>');
                              }
                          },
                          error: function () {
                              $('#searchLoaderService').hide();

                              $('#serviceList').append('<li class="dropdown-item">Xəta baş verdi/li>');
                          }
                      });
                  } else {
                      $('#searchLoaderService').hide();
                  }
              }

              $('#serviceSearch').on('input', debounce(function () {
                  var searchQuery = $(this).val();
                  searchServices(searchQuery);
              }, 500));



              $('.edit-button').on('click',function(e){

                  let itemId=$(this).data('item-id');

                  showLoading();
                  $.ajax({
                          url: `@Url.Action("GetAppointmentById", "Appointments")`,
                          method: 'GET',
                          data: { id: itemId },
                          success: function (data) {
                               console.log(data)
                               $('#Id').val(data?.id);
                               $('#serviceId').val(data?.service_id);
                               $('#patientId').val(data?.patient_id);
                               $('#UserId').val(data?.user_id);
                               $('#patientPhone').val(data?.patient_phone);
                               $('#userSearch').val(data?.patient_name);
                               $('#serviceSearch').val(data?.service_name);
                               let existStart = data?.start_date.split("T")[1].substring(0, 5)
                               let existEnd = data?.end_date.split("T")[1].substring(0, 5)
                               $('#startTime').val(existStart)
                               $('#endTime').val(existEnd)
                               if (data?.start_date) {
                                   const formattedDate = new Date(data.start_date).toISOString().split('T')[0];
                                   $('#MeetingDate').val(formattedDate);
                                   $('#MeetingDate').trigger('change');

                               }
                               $('#add-appointment-modal').modal('show');
                          },
                          error: function (err) {
                              console.log(err)
                               hideLoading();

                          }
                      });


             });

             $('.delete-button').on('click',function(e){

                  let itemId=$(this).data('item-id');

                  $('#confirmText').text('Silmək istədiyinizə əminsiniz?')
                  $('#confirmModal').data('item-id',itemId);
                  $('#confirmModal').data('action','delete');
                  $('#confirmModal').modal('show');

             });

              $('#confirmModalButton').on('click',function(e){

                  let action= $('#confirmModal').data('action');
                  let itemId= $('#confirmModal').data('item-id');

                  console.log(action)
                  console.log(itemId)
                  if(action==='delete'){
                      showLoading();
                       $.ajax({
                          url: `@Url.Action("DeleteAppointmentById", "Appointments")/?id=${itemId}`,
                          method: 'DELETE',
                          success: function (data) {
                              window.location.reload();
                          },
                          error: function (err) {
                              console.log(err)
                              hideLoading()
                          }
                      });
                  }



             });

              let $form = $('#newAppointmentForm');
              const $dropdown = $("#timeDropdown");
              const $button = $("#dropdownButton");

              $('#dropdownButton').on('click', function (e) {
                  if (!$('#UserId').val() || !$('#MeetingDate').val()) {
                      e.preventDefault();
                      e.stopPropagation();
                      $('#timeError').text('Xidmət gostərən və tarix seçilməlidir').show()
                      return;
                  }

              });

              $('#add-appointment-modal').on('hidden.bs.modal', function () {
                  $('#Id').val('');
                  $('#PatientId').val('');
                  $('#searchInput').val('');
                  $('#searchInputService').val('');
                  $('#ServiceId').val('');
                  $form.removeClass('was-validated');
                  $form[0].reset();
                  $('#patientPhone').prop('disabled', false);

                  $('#validationForService').hide();
                  $('#validationForPatient').hide();
                  $dropdown.empty();
                  $dropdown.empty();
                  $button.text('Saat seçin');
                  $('#dropdownButton').prop('disabled', true)

              });

              $('#UserId').on('change', function () {

                  $('#MeetingDate').val('').trigger('change');

              })
              $('#not_phone').on('change', function () {
                  if ($(this).prop('checked') === true) {
                      $('#patientPhone').val('').prop('disabled', true)
                  }
                  else {
                      $('#patientPhone').val('').prop('disabled', false)

                  }

              })

              $('#MeetingDate').on('change', function () {
                  if ($(this).val() && $('#UserId').val()) {
                      $('#dropdownButton').prop('disabled', false)
                  }
                  else {
                      $('#dropdownButton').prop('disabled', true)
                      return;
                  }

                  $dropdown.empty();
                  $button.text('Saat seçin');
                  var date = $(this).val();
                  var selectedUserId = $('#UserId').val();
                  if (selectedUserId) {
                      showLoading()
                      $.ajax({
                          url: '/WorkHour/GetUserWorkHours',
                          type: 'GET',
                          data: {
                              userId: selectedUserId,
                              selectedDay: date
                          },
                          success: function (response) {
                               console.log('success:', response);
                              if (response && response.startTime && response.endTime) {

                                  const breaksFormatted = response.breaks?.map(b => [b.start, b.end]) || [];
                                  const reservesFormatted = response.reserves?.map(b => [b.start, b.end]) || [];
                                  const slots = generateTimeSlots(response.startTime, response.endTime, 15, breaksFormatted, reservesFormatted);


                                  slots.forEach(slot => {
                                      let badge = '';
                                      let itemClass = 'dropdown-item';
                                      let disabledAttr = '';

                                      switch (slot.status) {
                                          case "available":
                                              badge = '<span class="badge bg-success me-2">Uyğun</span>';
                                              break;
                                          case "break":
                                              badge = '<span class="badge bg-warning text-dark me-2">Fasilə</span>';
                                              itemClass += ' disabled';
                                              disabledAttr = 'disabled';
                                              break;
                                          case "reserved":
                                              badge = '<span class="badge bg-danger me-2">Rezerv olunub</span>';
                                              itemClass += ' disabled';
                                              disabledAttr = 'disabled';
                                              break;
                                      }

                                      const $item = $(`<li><a class="${itemClass}" href="#" ${disabledAttr}>${badge}${slot.label}</a></li>`);

                                      if (slot.status === "available") {
                                          $item.find('a').on('click', function (e) {
                                              e.preventDefault();
                                              $button.text(slot.label);
                                              const [start, end] = slot.label.split(" - ");

                                              // Input'lara yaz
                                              $('#startTime').val(start);
                                              $('#endTime').val(end);
                                          });
                                      }

                                      if (slot.status === "reserved") {
                                          let startInput = $('#startTime').val();
                                          let endInput = $('#endTime').val();
                                          const [start, end] = slot.label.split(" - ");
                                          if (start == startInput && end == endInput) {
                                              $button.text(slot.label);

                                          }
                                      }

                                      $dropdown.append($item);
                                  });
                              }
                              else {
                                  $('#infoText').text('Əmakdaşın iş günü deyil');
                                  $('#infoModal').modal('show');

                              }

                              hideLoading();


                          },
                          error: function (xhr, status, error) {
                              console.error('error:', error);
                              hideLoading();

                          }
                      });
                  }

              });

            $('#newAppointmentForm').on('submit', function (e) {
                e.preventDefault();

                const $form = $(this);

                if (!$form[0].checkValidity()) {
                    return;
                } else {
                    showLoading();

                    $form[0].submit();
                }
            });

        });


    </script>

}
