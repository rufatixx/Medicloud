@{
    ViewData["Title"] = "- Qəbul";
}

@model Medicloud.ViewModels.ReceptionViewModel

<style>
    .dropdown-menu-scrollable {
        max-height: 200px; /* Adjust the maximum height as needed */
        overflow-y: auto;
    }
</style>
<div class="container ">

    <!--<div class="row border-bottom">
        <div class="col-12">
            <div class="page-title-box">
                <div class="page-title-right">
                    <form class="d-flex">

                        <a class="btn  input-group-text me-1" onclick=" $('#patientSearch').modal('show');"><i class="mdi mdi-account-search "></i> <span>Axtar düzəliş</span></a>-->
    @*<a class="btn" onclick=" $('#patientSearch').modal('show');">
            <span class="input-group-text bg-primary border-primary text-white mdi mdi-account-search-outline">
                Xəstə axtar
            </span>
        </a>

        <a class="btn">

            <span class="input-group-text bg-primary border-primary text-white">
                Kart axtar
            </span>
        </a>*@


    <!--</form>
                </div>
                <h2 class="page-title">Qəbul</h2>
            </div>
        </div>
    </div>-->

    <form class="mt-3" novalidate id="cardForm">


        <div class="row">

            @await Component.InvokeAsync("NewPatient")

            @await Component.InvokeAsync("NewExamination", new Medicloud.ViewModels.ExaminationViewModel { Doctors = Model.Doctors })



        </div>
    </form>

    @await Component.InvokeAsync("AddServiceModal", new Medicloud.ViewModels.AddServiceModalViewModel { Departments = Model.Departments, Doctors = Model.Doctors })



    <div class="modal fade" id="patientSearch" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-fullscreen modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Xəstə axtarışı</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-hidden="true"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group mb-3">
                            <!-- <h3 style="text-align:right; margin-right:2%"><span class="badge badge-secondary">Cəmi: ---</span></h1> -->
                            <div class="row">

                                <div class="col-md-12">
                                    <label class="form-label">Xəstənin tam adı </label>
                                    <input type="text" class="form-control" required id="fullNamePattern" placeholder="">

                                </div>



                            </div>



                        </div>
                        <div class="form-group mb-3">
                            <!-- <h3 style="text-align:right; margin-right:2%"><span class="badge badge-secondary">Cəmi: ---</span></h1> -->
                            <div class="row">

                                <div class="col-md-12">


                                    <label class="form-label">Xəstələr</label>


                                    <table class="table" id="foundPatientsTable">
                                        <thead>
                                            <tr>

                                                <th scope="col">Ad</th>
                                                <th scope="col">Soyad</th>
                                                <th scope="col">Ata adı</th>

                                                <th scope="col">fin</th>



                                            </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    </table>

                                </div>



                            </div>



                        </div>



                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Ləğv et</button>
                    <button type="button" class="btn btn-primary" onclick="serachForPatient()">Axtar</button>

                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {

    @*<script src="~/js/new_patient/new_patient.js" asp-append-version="true"></script>*@
<script>
        var json = localStorage.getItem("json")
                var pageData;
                var parsedJSON = JSON.parse(json)
                var selectedCardID = 0;
                var selectedPatientID = 0;
                var foundPatientID = 0;
                var $requestTypeDropdown = $("#requestType");
                var $servicesDropdown = $("#services");
                var $policlinicDropdown = $("#departments");
                var $doctorDropdown = $("#doctors");
                var $priceGroupDropdown = $("#priceGroup");
                var $refererDropdown = $("#referer");
                var $companiesDropdown = $("#companies");
                var $patientCardsDropdown = $("#patientCardSelector");
                var $newPatientContainer = $("#newPatientContainer");
                var $createCard = $("#createCard");



            $requestTypeDropdown.on("change", function () {
                var selectedValue = $(this).val();


                if (selectedValue === "3") {

                    // If requestTypeDropdown is selected with value 3
                    // Disable the otherDropdown, make it not required, and select the first item
                    $doctorDropdown.prop("disabled", true).prop("required", false).val("");
                } else {
                    // If requestTypeDropdown is not selected with value 3
                    // Enable the otherDropdown and make it required
                    $doctorDropdown.prop("disabled", false).prop("required", true);
                }
            });

                var servicesBeforeAllShown;
            var selectedPatientCardID = 0;

                $('#showAllServices').on('change', function () {
                    handleCheckboxState()

                });


                showLoading();

                $.ajax({
                    type: 'POST',
                    url: `@Url.Action("getPageModel", "Reception")`,
                    data: { organizationID: parseInt(localStorage.selectedOrganization) },
                    dataType: 'json',
                    success: function (data, status, xhr) {
                        if (typeof (Storage) !== "undefined") {
                            localStorage.requestToken = data.requestToken;
                        } else {
                            // Sorry! No Web Storage support..
                        }

                        pageData = data;

                        $("#price").val($("#services").data('price'));
        /*                $patientCardsDropdown.append($("<option />").val("").text(`Yeni Kart`));*/
                        hideLoading();
                    },
                    error: function (jqXhr, textStatus, errorMessage) {
                        if (jqXhr.status == "401") {
                            localStorage.clear();
                            $('#systemModalTitle').text("Sessiyanız başa çatıb");
                            $('#systemModalText').html(`<p id="systemModalText">Zəhmət olmasa yenidən giriş edin</p>`);
                            $('#systemModalBtn').removeAttr("hidden");
                        } else {
                            $('#warningModal').show();
                            $('#warningText').text(jqXhr.status);
                        }
                    }
                });

                populatePriceGroupDropdown($('#companies').val());
                $("#companies").on('change', function () {
                    console.log("WORKEDDD")
                    var selectedCompanyID = $(this).val();
                    populatePriceGroupDropdown(selectedCompanyID);
                });


                $("#priceGroup").on('change', function () {
                    var selectedPriceGroupId = $(this).val();
                    getServicesInPriceGroup(selectedPriceGroupId);
                });

                // Function to populate the "otherDropdown" based on the selected company
                function populatePriceGroupDropdown(selectedCompanyID) {
                    // Make an API call to fetch data for the "otherDropdown"
                    console.log(selectedCompanyID)
                    $priceGroupDropdown.empty();
                    if (selectedCompanyID) {


                        $.ajax({
                            type: 'GET',
                            url: "@Url.Action("GetPriceGroupDataForCompany", "Reception")" , // Replace with your API endpoint
                            data: { companyID: selectedCompanyID },
                            success: function (response) {

                                // Populate options based on the response
                                response.forEach(function (item) {
                                    $priceGroupDropdown.append($("<option />").val(item.priceGroupID).text(`${item.priceGroupName}`));

                                });

                                if (response.length > 0) {
                                    var firstPriceGroupID = response[0].priceGroupID;
                                    // Call another API to fill the second dropdown using the firstPriceGroupID
                                    getServicesInPriceGroup(firstPriceGroupID);
                                }

                                if (response.length == 1) {
                                    $priceGroupDropdown.prop('disabled',true)
                                }
                            },
                            error: function (error) {
                                console.error('API error:', error);
                                // Handle API errors here, e.g., show an error message
                            }
                        });
                    }
                }

                function populatePatientCards(patientID) {
                    // Make an API call to fetch data for the "otherDropdown"
                    $.ajax({
                        type: 'GET',
                        url: "@Url.Action("GetPatientCards", "Reception")" ,
                        data: { patientID: patientID },
                        success: function (response) {
                            // Clear previous options and populate the "otherDropdown"
                            $patientCardsDropdown.empty();

                            // Populate options based on the response
                            $patientCardsDropdown.append($("<option />").val("").text(`Yeni Növbə`));
                            console.log(response)
                            response.forEach(function (item) {
                                $patientCardsDropdown.append($("<option />").val(item.cardID).text(`${item.cDate}`));

                            });

                            if (response.length > 0) {
                                selectedPatientCardID = response[0].id;

                            }
                        },
                        error: function (error) {
                            console.error('API error:', error);
                            // Handle API errors here, e.g., show an error message
                        }
                    });
                 }

                $patientCardsDropdown.on('change', function () {

                        if ($(this).val() != "") {
                            $newPatientContainer.hide()
                            selectedCardID = $(this).val();
                            $createCard.hide();

                            showLoading();



                            // Once all data loading is complete
                            // Fill service settings and hide loading indicator
                            Promise.all([
                                fetchGroups(),
                                //fetchDoctorsInCard(),
                                getServicesInTheCard(),
                                handleCheckboxState(),
                               //getAndFillCardData(selectedCardID),

                            ]).then(function () {

                                hideLoading();
                            }).catch(function (error) {
                                console.log(error);
                                hideLoading();
                            });

                        }
                        else {
                            selectedCardID = 0;
                            $createCard.show();
                            $newPatientContainer.show()
                        }
                    //var selectedCompanyID = $(this).val();
                    //populatePriceGroupDropdown(selectedCompanyID);
                });

                function getServicesInPriceGroup(selectedPriceGroupID) {
                $servicesDropdown.empty();
                $('#price').val('');
                        $.ajax({
                            type: 'GET',
                            url: "@Url.Action("GetActiveServicesByPriceGroupID", "Reception")", // Replace with your second API endpoint
                            data: { priceGroupID: selectedPriceGroupID },
                            success: function (response) {
                                // Clear previous options and populate the second dropdown

                                $servicesDropdown.append($("<option  disabled selected />").val("").text(`Seçin..`));
                                // Populate options based on the response
                                response.forEach(function (item) {
                                    console.log(item)
                                    $servicesDropdown.append($(`<option  />`).val(item.serviceID).text(`${item.serviceName}`).attr('data-price', item.price));
                                });
                            },
                            error: function (error) {
                                console.error('API error:', error);
                                // Handle API errors here, e.g., show an error message
                            }
                        });


                }
                function serachForPatient() {

                    showLoading();
                    $('#systemModalTitle').text("Yüklənir...");
                    $('#systemModalText').html(`<center><div class="spinner-border text-dark mx-auto" role="status">
                            <span class="sr-only">Loading...</span>
                          </div></center>`);
                    $('#systemModalBtn').attr("hidden", "");
                    $.ajax({
                        type: 'POST',
                        url: `@Url.Action("SearchForPatient", "Reception")`,
                        data: { fullNamePattern: $("#fullNamePattern").val()},
                        dataType: 'json',
                        success: function (data, status, xhr) {   // success callback function
                            //  var json = JSON.stringify(data)

                            if (typeof (Storage) !== "undefined") {

                                localStorage.requestToken = data.requestToken
                            } else {

                                // Sorry! No Web Storage support..
                            }

                            const tableBody = $('#foundPatientsTable tbody');
                            tableBody.empty();
                            //$("#foundPatients").empty();
                            foundPatients = data;
                            //alert(data.requestTypes[0].name)
                            //$.each(data, function () {
                            //    var bDate = this.bDate.split('T')[0];
                            //    $("#foundPatients").append($("<option />").val(this.id).text(`${this.name} ${this.surname} ${this.father} (${bDate})`));
                            //});


                            data.forEach(function (item) {
                                const row = $('<tr></tr>');
                                // Add an event listener for row click
                                row.on('click', function () {

                                    foundPatientClicked(item);
                                });
                                //const checkbox = $('<input type="checkbox" class="select-item" data-id="' + item.id + '">');
                                //row.append('<td></td>').append(checkbox);

                                row.append('<td>' + item.name + '</td>');
                                row.append('<td>' + item.surname + '</td>');
                                row.append('<td>' + item.father + '</td>');
                                row.append('<td>' + item.fin + '</td>');

                                // Add more columns as needed

                                tableBody.append(row);
                            });

                            // Add event listener for checkbox changes
                            $('.select-item-ingredient').on('change', function () {
                                const selectedId = $(this).data('id');
                                if ($(this).prop('checked')) {
                                    // Checkbox is checked
                                    $('.select-item-ingredient').not(this).prop('checked', false);

                                    $('#insertActiveIngredientBtn').hide()
                                    $('#updateActiveIngredientBtn').show()
                                } else {
                                    $('#insertActiveIngredientBtn').show()
                                    $('#updateActiveIngredientBtn').hide()
                                }
                            });
                            hideLoading()



                            //$('p').append(data.name + ' ' + data.surname);
                        },
                        error: function (jqXhr, textStatus, errorMessage) { // error callback
                            hideLoading()

                            if (jqXhr.status == "401") {
                                localStorage.clear()
                                $('#systemModalTitle').text("Sessiyanız başa çatıb");
                                $('#systemModalText').html(`<p id="systemModalText">Zəhmət olmasa yenidən giriş edin</p>`);
                                $('#systemModalBtn').removeAttr("hidden");
                            }
                            else {
                                $('#warningModal').show()
                                $('#warningText').text(jqXhr.status);
                            }
                            //  $('#alert').text('Error: ' + errorMessage);
                        }

                    });

                }
                function DeleteSelectedPatient() {

                    $("#name").prop("disabled", false).val('');
                    $("#surname").prop("disabled", false).val('');;
                    $("#father").prop("disabled", false).val('');;
                    $("#clientPhone").prop("disabled", false).val('');;
                    $("#clientEmail").prop("disabled", false).val('');;
                    $("#fin").prop("disabled", false).val('');;
                    $("#bDate").prop("disabled", false).val('');
                    $(`#gender`).prop("disabled", false).val('');

                    selectedPatientID = 0;
                    $("#selectedPatientForm").hide();
                }

        function foundPatientClicked(item) {
            console.log(item)
            selectedPatientID = item.id;
            populatePatientCards(selectedPatientID);
            $("#selectedPatientForm").show()
            $("#name").prop("disabled", true).val(item.name);
            $("#surname").prop("disabled", true).val(item.surname);
            $("#father").prop("disabled", true).val(item.father);
            $("#clientEmail").prop("disabled", true).val(item.email);
            $("#fin").prop("disabled", true).val(item.fin);
            $("#orgReason").prop("disabled", true).val(item.orgReasonId > 0 ? item.orgReasonId : '');
            $("#bDate").prop("disabled", true);
            $(`#gender`).prop("disabled", true).val(item.genderID);

            var lastNine = item.phone.toString().slice(-9);
            $("#clientPhone").prop("disabled", true).val(lastNine);
            console.log(item.orgReasonId)

            var today = new Date(item.bDate).toISOString().split('T')[0];

            $("#bDate").val(today);
            //$(`#gender option[value="${item.genderID}"]`).attr("selected", "selected");
            $('#patientSearch').modal('hide');

        }
                function fetchGroups() {
                    $('#servicesInGroup').empty();
                    $('#selectedServiceGroupInSettings').empty();
                    $.ajax({
                        url: '@Url.Action("GetServiceGroups", "Services", new { area = "Admin" })',
                        type: 'GET',
                        data: { organizationID: localStorage.selectedOrganization, priceGroupId: $('#priceGroup').val() },
                        success: function (response) {
                            $('#cGroups').empty();
                            $('#cGroupsInModal').empty();

                            var accordionElement = $('<div>')
                                .addClass('accordion')
                                .attr('id', 'accordionExample');

                            var headingGroups = response.filter(function (group) {
                                return group.isHeading === true;
                            });

                            // Fill headings into modal select dropdown
                            $.each(headingGroups, function (index, headingGroup) {
                                var optionElement = $('<option>')
                                    .attr('value', headingGroup.id)
                                    .text(headingGroup.name)
                                    .appendTo('#cGroupsInModal');

                                var childGroups = response.filter(function (childGroup) {
                                    return (
                                        childGroup.isHeading === false && childGroup.parent === headingGroup.id
                                    );
                                });

                                if (childGroups.length > 0) {
                                    var groupElement = $('<div>')
                                        .addClass('accordion-item')
                                        .appendTo(accordionElement);

                                    var headerElement = $('<h2>')
                                        .addClass('accordion-header')
                                        .attr('id', 'heading' + headingGroup.id)
                                        .appendTo(groupElement);

                                    var buttonElement = $('<button>')
                                        .addClass('accordion-button')
                                        .attr('type', 'button')
                                        .attr('data-bs-toggle', 'collapse')
                                        .attr('data-bs-target', '#collapse' + headingGroup.id)
                                        .attr('aria-expanded', 'false')
                                        .attr('aria-controls', 'collapse' + headingGroup.id)
                                        .text(headingGroup.name)
                                        .appendTo(headerElement);

                                    var collapseElement = $('<div>')
                                        .addClass('accordion-collapse collapse')
                                        .attr('id', 'collapse' + headingGroup.id)
                                        .attr('aria-labelledby', 'heading' + headingGroup.id)
                                        .attr('data-bs-parent', '#accordionExample')
                                        .appendTo(groupElement);

                                    var bodyElement = $('<div>')
                                        .addClass('accordion-body')
                                        .appendTo(collapseElement);

                                    $.each(childGroups, function (index, childGroup) {
                                        var childElement = $('<div>')
                                            .addClass('accordion-item')
                                            .appendTo(bodyElement);

                                        var childButtonElement = $('<a>')
                                            .addClass('list-group-item list-group-item-action')
                                            .text(childGroup.name)
                                            .appendTo(childElement);

                                        var childCollapseElement = $('<div>')
                                            .addClass('accordion-collapse collapse')
                                            .attr('id', 'collapse' + childGroup.id)
                                            .attr('aria-labelledby', 'heading' + childGroup.id)
                                            .attr('data-bs-parent', '#collapse' + headingGroup.id)
                                            .appendTo(childElement);

                                        var childBodyElement = $('<div>')
                                            .addClass('accordion-body')
                                            .appendTo(childCollapseElement);

                                        var optionElement = $('<option>')
                                            .attr('value', childGroup.id)
                                            .text(childGroup.name)
                                            .appendTo('#selectedServiceGroupInSettings');

                                        var groupsInModal = $('<option>')
                                            .attr('value', childGroup.id)
                                            .text(childGroup.name)
                                            .appendTo('#groupsInModal');

                                        // Update the click handler for childButtonElement
                                        childButtonElement.on('click', function () {
                                            var listItem = $(this);

                                            // Remember the clicked child group
                                            activeChildGroup = listItem;

                                            // Uncheck the "Show All" checkbox
                                            $('#showAllServices').prop('checked', false);

                                            // Remove "active" class from all list items within all accordion items
                                            $('.accordion .list-group-item').removeClass('active');

                                            // Add "active" class to the clicked list item
                                            listItem.addClass('active');

                                            // Update selectedServiceGroupInSettings dropdown with the selected subgroup
                                            $('#selectedServiceGroupInSettings').val(childGroup.id);

                                            // Fetch services with group names
                                            fetchServicesWithGroupNames(childGroup.id);
                                        });
                                    });
                                }
                            });

                            $('#cGroups').append(accordionElement);
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }

            function fetchServicesWithGroupNames(groupId) {


                    $.ajax({
                        url: '@Url.Action("GetServicesWithServiceGroupName", "Services", new { area = "Admin" })',
                        type: 'GET',
                        data: { organizationID: localStorage.selectedOrganization, serviceGroupID: groupId, priceGroupId: $('#priceGroup').val() },
                        success: function (response) {
                            $('#servicesInGroup').empty();

                            if (response.length > 0) {
                                $.each(response, function (index, service) {

                                    var serviceElement = $('<li>')
                                        .addClass('list-group-item list-group-item-action d-flex justify-content-between')
                                        .click(function () {
                                            // Unselect previously selected service
                                            $('#servicesInGroup .active').removeClass('active');
                                            // Select the current service
                                            $(this).addClass('active');
                                            $('#serviceIdInService').val(service.id)
                                            console.log(service)
                                            //var doctorsSelect = $('#docsInService');
                                            //doctorsSelect.empty();

                                            //var departmentsSelect = $('#depsInService');
                                            //departmentsSelect.empty();

                                            // Fill the service settings card with the information of the selected service
                                            //fetchDepartmentsInService(service.id);
                                        })
                                        .val(service.id);
                         //                        .on('dblclick', function () {
                         //                            // On double click, call the InsertServiceToPatientCard function
                         //                            // Replace the parameters with the actual values
                         //                            var patientCardID = ;
                         //                    var serviceID = service.id;
                         //                var depID = department.id;
                         //                var senderDocID = 0;
                         //        var docID = ...;

                         //                if ($(this).data('docIsRequired') == 1 && !docID) {
                         //                    $('#warningModal').show();
                         //                    $('#warningText').text('Bu şöbə üçün həkim seçmək lazımdır.');

                         //    } else {
                         //        InsertServiceToPatientCard(patientCardID, serviceID, depID, senderDocID, docID);
                         //    }
                         //});

                serviceElement.append('<div>' + service.name + '</div>');
                serviceElement.append('<div>' + service.code + '</div>');

                $('#servicesInGroup').append(serviceElement);
                                        });

                // Select the first service button
                var firstServiceButton = $('#servicesInGroup li:first');
                if (firstServiceButton.length > 0) {
                    //firstServiceButton.addClass('active');
                    // Fill the service settings card with the information of the selected service


                    //fetchDepartmentsInService(response[0].id);
                }
                                    } else {
                    // No services in the subgroup
                    // Clear and disable the service settings card
                    //$('#servicesInGroup').empty();
                    //fillServiceSettings(null);
                }
                                },
                error: function (error) {
                    console.log(error);
                }
                            });
            }
                function handleCheckboxState() {
                    if ($('#showAllServices').is(":checked")) {
                        // If checked, perform the same operations as in the change event handler
                        $('.accordion .list-group-item').removeClass('active');
                        servicesBeforeAllShown = $('#servicesInGroup').children().clone();
                        fetchServicesWithGroupNames(0);
                    } else {
                        // If not checked, perform the operations for the unchecked case
                        $('#servicesInGroup').empty().append(servicesBeforeAllShown);
                        if (activeChildGroup) {
                            activeChildGroup.click();
                        }
                    }
                }
                function loadAddServiceIntoPatientCardModal() {
                    if (selectedCardID>0) {

                        $('#cardNumber').val(selectedCardID);





                        showLoading();



                        // Once all data loading is complete
                        // Fill service settings and hide loading indicator
                        Promise.all([
                            fetchGroups(),
                            //fetchDoctorsInCard(),
                            getServicesInTheCard(),
                            handleCheckboxState()

                        ]).then(function () {

                            hideLoading();
                        }).catch(function (error) {
                            console.log(error);
                            hideLoading();
                        });
                        $('#addServiceToPatient').modal('show');
                    }
                    else {

                        $('#warningModal').modal("show");
                        $('#warningText').text('Zəhmət olmasa xəstəyə kart yaradın');



                    }

                }

                function getServicesInTheCard() {

                    $.ajax({
                        type: 'GET',
                        url: `@Url.Action("GetServices", "Reception")?patientCardID=${selectedCardID}`,
                        success: function (data, status, xhr) {
                            var servicesTable = $('#servicesList');
                            servicesTable.empty();

                            if (data && data.length > 0) {
                                data.forEach(function (service, index) {
                                    console.log(service)
                                    var tableRow = $('<tr>');
                                    tableRow.append('<th scope="row">' + (index + 1) + '</th>');
                                    tableRow.append('<td>' + service.serviceCode + '</td>');
                                    tableRow.append('<td>' + service.serviceName + '</td>');
                                    tableRow.append('<td>' + service.servicePrice + '</td>');

                                    //tableRow.append('<td>' + ((service.senderDocName || '') + ' ' + (service.senderDocSurname || '')) + '</td>');
                                    tableRow.append('<td>' + ((service.docName || '') + ' ' + (service.docSurname || '')) + '</td>');

                                    servicesTable.append(tableRow);
                                });
                            } else {
                                var noServicesRow = $('<tr><td colspan="4">Hələki heç bir xidmət yoxdur</td></tr>');
                                servicesTable.append(noServicesRow);
                            }

                            // Show the modal
                            //$('#addServiceToPatient').modal('show');
                        },
                        error: function (jqXhr, textStatus, errorMessage) {
                            console.log(errorMessage);
                        }
                    });
        }


    function getAndFillCardData(cardId) {

        @*function waitForDropdownToLoad(checkSelector, maxWait = 3000, interval = 100) {
            return new Promise((resolve, reject) => {
                const start = Date.now();
                const check = () => {
                    if ($(checkSelector).children().length > 1) {
                        resolve();
                    } else if (Date.now() - start > maxWait) {
                        reject("Beklenen dropdown yüklenmedi: " + checkSelector);
                    } else {
                        setTimeout(check, interval);
                    }
                };
                check();
            });
        }


        $.ajax({
            type: 'GET',
            url: `@Url.Action("GetCardById", "Reception")?cardID=${cardId}`,
            success: function (data, status, xhr) {
                console.log(data)
                console.log(data.companyID)
                console.log("heree")

                populatePriceGroupDropdown(data.companyID);
                getServicesInPriceGroup(data.priceGroupId);
                $("#companies").prop('disabled', true).val(data.companyID);
                $("#requestType").prop('disabled', true).val(data.requestTypeID);
                $("#priceGroup").prop('disabled', true).val(data.priceGroupID);
                $("#services").prop('disabled', true).val(data.serviceID);
                $("#doctors").prop('disabled', true).val(data.docID);
                $("#note").prop('disabled', true).val(data.note);
                $("#MeetingDate").prop('disabled', true).val(data.startDate);

                var startTime = data.startDate.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });
                var endTime = data.endDate.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });
                $("#startTime").prop('disabled', true).val(startTime);
                $("#endTime").prop('disabled', true).val(endTime);
                $("#isOnline").prop('disabled', true).val(data.isOnline).prop('checked', data.isOnline);
                $("#orgReasonId").prop('disabled', true).val(data.orgReasonId);
            },
            error: function (jqXhr, textStatus, errorMessage) {
                console.log(errorMessage);
            }
        });*@


       function waitForDropdownToLoad(checkSelector, maxWait = 3000, interval = 100) {
        return new Promise((resolve, reject) => {
            const start = Date.now();
            const check = () => {
                if ($(checkSelector).children().length > 1) {
                    resolve();
                } else if (Date.now() - start > maxWait) {
                    reject("error load " + checkSelector);
                } else {
                    setTimeout(check, interval);
                }
            };
            check();
        });
        }

        $.ajax({
            type: 'GET',
            url: `@Url.Action("GetCardById", "Reception")?cardID=${cardId}`,
            success: async function (data) {
                console.log(data);

               
                populatePriceGroupDropdown(data.companyID);
                await waitForDropdownToLoad("#priceGroup");

                getServicesInPriceGroup(data.priceGroupID);
                await waitForDropdownToLoad("#services");


                $("#companies").val(data.companyID).prop('disabled', true);
                $("#requestType").val(data.requestTypeID).prop('disabled', true);
                $("#priceGroup").val(data.priceGroupID).prop('disabled', true);
                $("#services").val(data.serviceID).prop('disabled', true);
                $("#doctors").val(data.docID).prop('disabled', true);
                $("#note").val(data.note).prop('disabled', true);
                $("#orgReasonId").val(data.orgReasonId).prop('disabled', true);

                // 3. Tarih ve saatleri ayarla
                $("#MeetingDate").val(data.startDate).prop('disabled', true);

                const startDate = new Date(data.startDate);
                const endDate = new Date(data.endDate);
                const startTime = startDate.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });
                const endTime = endDate.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });

                $("#startTime").val(startTime).prop('disabled', true);
                $("#endTime").val(endTime).prop('disabled', true);
                $("#isOnline").prop('checked', data.isOnline).prop('disabled', true);
            },
            error: function (jqXhr, textStatus, errorMessage) {
                console.log(errorMessage);
            }
        });
    }
        let $serviceForm = $('#addServiceForm');

                function insertServiceToPatientCard() {

                    //e.preventDefault();
                    //e.stopPropagation();
                    if (!$serviceForm[0].checkValidity()) {
                        $serviceForm.addClass('was-validated');
                        return;
                    } else {
                        showLoading();
                        // Get the selected service details
                        var selectedService = $('#servicesInGroup .active').val();

                        // Get the values for the parameters
                        var patientCardID = selectedCardID;/* Replace with your logic to get the patient card ID */;
                        var serviceID = $('#serviceIdInService').val();
                        var docID = $('#doctorIdInService').val();
                        //var depID = $('#depsInService .active').val();/* Replace with your logic to get the department ID */;
                        //var senderDocID = $('#refererDocsInCard .active').val()  /* Replace with your logic to get the sender doctor ID */;
                        //var docID = $('#docsInService .active').val()/* Replace with your logic to get the doctor ID */;

                        //if (selectedService.data('docIsRequired') === 1 && !docID) {
                        //    $('#warningModal').show();
                        //    $('#warningText').text('Bu şöbə üçün həkim seçmək lazımdır.');
                        //    return;
                        //}

                        // Make an HTTP GET request to the API endpoint
                        $.ajax({
                            url: '@Url.Action("InsertServiceToPatientCard", "Reception")',
                            type: 'GET',
                            data: {
                                patientCardID: patientCardID,
                                serviceID: serviceID,
                                depID: 0,
                                senderDocID: 0,
                                docID: docID
                            },
                            success: function (response) {
                                // Handle the successful response here
                                $('#serviceIdInService').val('');
                                $('#doctorIdInService').val('');
                                $('.doctor-item').removeClass('active');
                                $('#servicesInGroup .list-group-item ').removeClass('active');
                                $serviceForm.removeClass('was-validated');
                                //$serviceForm.reset();
                                getServicesInTheCard()
                                //console.log(response);
                                hideLoading();
                            },
                            error: function (error) {
                                // Handle any errors here
                                console.log(error);
                                hideLoading();

                            }
                        });
                    }
                }

                function generateRecipe() {
                    if (selectedCardID > 0) {

                        window.location.href = `@Url.Action("Recipe", "Reception")?cardID=${selectedCardID}`;


                    }
                    else {
                        $('#warningModal').modal("show");
                        $('#warningText').text('Zəhmət olmasa xəstəyə kart yaradın və ya seçin');
                    }
                }


                //function depChanged(dep) {

                //    $servicesDropdown.empty();
                //    $doctorDropdown.empty();
                //    $.each(pageData.services, function () {

                //        if (this.depID == $(dep).val()) {
                //            $servicesDropdown.append($(`<option id=${this.id} />`).val(this.price).text(this.name));
                //        }

                //    });

                //    $.each(pageData.personal, function () {
                //        if (this.depID == $(dep).val()) {
                //            $doctorDropdown.append($("<option />").val(this.id).text(`${this.name} ${this.surname} ${this.father}`));
                //        }

                //    });
                //    $("#price").val($("#services").val());
                //}
                function getCookie(cname) {
                    var name = cname + "=";
                    var decodedCookie = decodeURIComponent(document.cookie);
                    var ca = decodedCookie.split(';');
                    for (var i = 0; i < ca.length; i++) {
                        var c = ca[i];
                        while (c.charAt(0) == ' ') {
                            c = c.substring(1);
                        }
                        if (c.indexOf(name) == 0) {
                            return c.substring(name.length, c.length);
                        }
                    }
                    return "";
                }</script>
    <script>
        $(document).ready(function () {
            $('#serviceSearch').on('keyup input', function () {
                var value = $(this).val().toLowerCase();

                $("#servicesInGroup .list-group-item").each(function () {
                    var serviceName = $(this).find('div').first().text().toLowerCase();

                    if (serviceName.includes(value)) {
                        $(this).removeClass('d-none');
                    }
                    else {
                        $(this).addClass('d-none');
                    }
                });
            });

        });</script>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            function getAvailableSlots(startTime, endTime, blocks) {
                const parseTime = str => {
                    const [h, m] = str.split(":").map(Number);
                    return new Date(0, 0, 0, h, m); // tarih sabit, sadece saat önemli
                };

                const formatTime = date => date.toTimeString().slice(0, 5);

                const start = parseTime(startTime);
                const end = parseTime(endTime);

                const allBlocks = blocks
                    .map(b => [parseTime(b.start), parseTime(b.end)])
                    .sort((a, b) => a[0] - b[0]);

                const available = [];
                let current = new Date(start);

                for (const [blockStart, blockEnd] of allBlocks) {
                    if (blockStart > current) {
                        available.push([new Date(current), new Date(blockStart)]);
                    }
                    current = blockEnd > current ? blockEnd : current;
                }

                if (current < end) {
                    available.push([current, end]);
                }

                return available.map(([s, e]) => [formatTime(s), formatTime(e)]);
            }

                    function formatTimeWithoutSeconds(timeStr) {
                const [h, m] = timeStr.split(':');
                return `${h.padStart(2, '0')}:${m.padStart(2, '0')}`;
            }

            let selectedUserWorkHours;


            $('#MeetingDate').on('change', function () {
                var date = $(this).val();
                var selectedUserId = $('#doctors').val();
                console.log(selectedUserId)
                if (selectedUserId && date) {
                    showLoading()
                    $.ajax({
                        url: '/WorkHour/GetUserWorkHours',
                        type: 'GET',
                        data: {
                            userId: selectedUserId,
                            selectedDay: date
                        },
                        success: function (response) {
                            console.log('success:', response);
                            if (response && response.startTime && response.endTime) {
                                selectedUserWorkHours=response;
                                // const breaksFormatted = response.breaks?.map(b => [b.start, b.end]) || [];
                                // const reservesFormatted = response.reserves?.map(b => [b.start, b.end]) || [];

                                const blocks = [...(response.breaks || []), ...(response.reserves || [])];
                                const availableSlots = getAvailableSlots(response.startTime, response.endTime, blocks);
                                console.log("Available slots:", availableSlots);

                                var content='';
                                const selectedDoctor = $('#doctors option:selected').text();
                                content += `<p>Seçilmiş personal</p>`;
                                content += `<p>${selectedDoctor}</p>`;

                                response.breaks?.forEach(function(data) {
                                    content += `
                                        <div class="d-flex align-items-center mb-2">
                                            <span class="badge bg-warning me-2">Fasilə</span>
                                            <span>${formatTimeWithoutSeconds(data.start)} - ${formatTimeWithoutSeconds(data.end)}</span>
                                        </div>
                                    `;
                                });


                                response.reserves?.forEach(function(data) {
                                    content += `
                                        <div class="d-flex align-items-center mb-2">
                                            <span class="badge bg-danger me-2">Rezerv olunub</span>
                                            <span>${formatTimeWithoutSeconds(data.start)} - ${formatTimeWithoutSeconds(data.end)}</span>
                                        </div>
                                    `;
                                });
                                availableSlots?.forEach(function([start, end]) {
                                    content += `
                                        <div class="d-flex align-items-center mb-2">
                                            <span class="badge bg-success me-2">Uyöun</span>
                                            <span>${start} - ${end}</span>
                                        </div>
                                    `;
                                });
                                $('#infoContent').html(content);



                                $('#infoHoursButton').off().on('click',function(){
                                    $('#infoError').text('').hide();
                                    $('#infoModal').modal('show');
                                });
                                 $('#infoHoursButton').show()

                            }
                            else {
                                $('#infoText').text('Əmakdaşın iş günü deyil');
                                $('#infoModal').modal('show');

                            }

                            hideLoading();


                        },
                        error: function (xhr, status, error) {
                            console.error('error:', error);
                            hideLoading();

                        }
                    });
                }

            });
             $('#doctors').on('change', function () {

                 const today = new Date();
                 const dateStr = today.toISOString().split('T')[0];

                 const hours = String(today.getHours()).padStart(2, '0');
                 const minutes = String(today.getMinutes()).padStart(2, '0');
                 const timeStr = `${hours}:${minutes}`;

                 $('#startTime').val(timeStr);
                 $('#MeetingDate').val(dateStr).trigger('change');
                $('#infoContent').empty();
                $('#infoHoursButton').hide();

              })


            let $form = $('#cardForm');

            $('#createCard').on('click', function (e) {
                  e.preventDefault();
                  e.stopPropagation();
                  if (!$form[0].checkValidity()) {
                        $form.addClass('was-validated');
                      return;
                  } else {

                          const startTime = $('#startTime').val();
                    const endTime = $('#endTime').val();

                    const toMinutes = (t) => {
                        const [h, m] = t.split(':').map(Number);
                        return h * 60 + m;
                    };

                    const startMin = toMinutes(startTime);
                    const endMin = toMinutes(endTime);

                    if (!selectedUserWorkHours) {
                        $('#infoError').text('Personalın iş saatləri yüklənməyib.').show()
                        $('#infoModal').modal('show');
                        // alert("");
                        return;
                    }

                    const workStart = toMinutes(selectedUserWorkHours.startTime);
                    const workEnd = toMinutes(selectedUserWorkHours.endTime);

                    if (startMin >= endMin) {
                        $('#infoError').text('Başlama saatı, bitmə saatından əvvəl olmalıdır.').show()
                        $('#infoModal').modal('show');
                        return;
                    }

                    const isWithinWorkingHours = (startMin >= workStart && endMin <= workEnd);

                    if (!isWithinWorkingHours) {
                        $('#infoError').text('Seçilen saat iş saatləri daxilində deyil.').show()
                        $('#infoModal').modal('show');
                        return;
                    }

                    function isOverlapping(startA, endA, startB, endB) {
                        return startA < endB && endA > startB;
                    }

                    const overlaps = (list) => list.some(({ start, end }) => {
                        const s = toMinutes(start);
                        const e = toMinutes(end);
                        return isOverlapping(startMin, endMin, s, e);
                    });

                    if (overlaps(selectedUserWorkHours.breaks || [])) {
                        $('#infoError').text('Bu saat fasiləyə düşür.').show()
                        $('#infoModal').modal('show');
                        return;
                    }

                    if (overlaps(selectedUserWorkHours.reserves || [])) {
                         $('#infoError').text('Bu saat artıq rezerv olunub.').show();
                        $('#infoModal').modal('show');
                        return;
                    }

                        let data = {
                            id: selectedPatientID,
                            name: $('#name').val(),
                            surname: $('#surname').val(),
                            father: $('#father').val(),
                            clientPhone: $('#clientPhone').val() ,
                            clientEmail: $('#clientEmail').val(),
                            genderID: parseInt($('#gender').val()),
                            fin: $("#fin").val(),
                            requestTypeID: parseInt($("#requestType").val()),
                            priceGroupID: parseInt($("#priceGroup").val()),
                            serviceID: parseInt($("#services").val() ?? 0,10),
                            docID: parseInt($("#doctors").val() ?? 0),
                            referDocID: parseInt($("#referer").val() ?? 0,10),
                            birthDate: $('#bDate').val(),
                            note: $("#note").val(),
                            selectedDate: $("#MeetingDate").val(),
                            startTime: $("#startTime").val(),
                            endTime: $("#endTime").val(),
                            isOnline: $("#isOnline").prop('checked'),
                            orgReasonId: parseInt($("#orgReason").val() || 0, 10),
                            companyID: parseInt($("#companies").val() ?? 0,10),

                        }

                      console.log(data);
                      //return;
                        showLoading();

                        $.ajax({
                            type: 'POST',
                            url: `@Url.Action("AddPatient", "Reception")`,
                            contentType: 'application/json',
                            data: JSON.stringify(data),
                            success: function (data) {
                                if (data > 0) {
                                    hideLoading();
                                    $('#warningModal').modal("show");
                                    $('#warningText').text('Məlumatlar qeydə alındı');
                                    selectedCardID = data
                                    $('#MeetingDate').trigger('change');
                                    $('#createCard').prop('disabled', true);
                                    $form.find('input, select, textarea').prop('disabled', true);
                                }


                            },
                            error: function (jqXhr, textStatus, errorMessage) {
                                if (jqXhr.status == 401) {
                                    localStorage.clear();
                                    $('#systemModalTitle').text("Sessiyanız başa çatıb");
                                    $('#systemModalText').html(`<p id="systemModalText">Zəhmət olmasa yenidən giriş edin</p>`);
                                    $('#systemModalBtn').removeAttr("hidden");
                                }
                                else {
                                    hideLoading();
                                    $('#warningModal').modal("show");
                                    $('#warningText').text(jqXhr.responseText);
                                }
                            }
                        });


                      // $form[0].submit();
                }


            });
/*            $('#addServiceToPatient')*/
            $('#resetButton').on('click', function (e) {
                DeleteSelectedPatient();

                $(`#companies`).prop("disabled", false);
                $(`#priceGroup`).prop("disabled", false);
                $(`#requestType`).prop("disabled", false).val('');
                $(`#services`).prop("disabled", false).val('');
                $(`#price`).val('');
                $(`#doctors`).prop("disabled", false).val('');
                $(`#note`).prop("disabled", false).val('');
                $('#patientCardSelector')
                    .prop("disabled", false)
                    .val('')
                    .find('option').not('[value=""]').remove();
                $(`#MeetingDate`).prop("disabled", false).val('');
                $(`#startTime`).prop("disabled", false).val('');
                $(`#endTime`).prop("disabled", false).val('');
                $(`#createCard`).prop("disabled", false).show();
                $(`#orgReason`).prop("disabled", false).val('');
                $('#infoContent').empty();
                $(`#infoHoursButton`).hide();
                selectedUserWorkHours = null;
                selectedCardID = 0;
                $newPatientContainer.show();

            });


            $('.doctor-item').on('click', function (e) {
                let selectedId = $(this).data('item-id');
                $('.doctor-item').removeClass('active')
                $('#doctorIdInService').val(selectedId)

                $(this).addClass('active')
            });
            $servicesDropdown.on('change', function () {
                //console.log($(this).data('data-price'))
                //$('#price').val($(this).data('price'));

                var selectedOption = $(this).find('option:selected');
                $('#price').val(selectedOption.data('price'));
            })

        })



                        @*function fetchDepartmentsInService(serviceID) {
                    $.ajax({
                        url: '@Url.Action("GetDepartmentsInService", "Services", new { area = "Admin" })',
                        type: 'GET',
                        data: { serviceID: serviceID },
                        success: function (response) {
                            var departmentsSelect = $('#depsInService');
                            //departmentsSelect.empty();

                            $.each(response, function (index, department) {
                                var listItem = $('<li>')
                                    .attr('class', 'list-group-item clickable')
                                    .attr('data-docIsRequired', department.docIsRequired) // Store docIsRequired as a data-* attribute
                                    .attr('value', department.id)
                                    .text(department.name)
                                    .on('click', function () {
                                        // Unselect previously selected service
                                        $('#depsInService .active').removeClass('active');
                                        // Select the current service
                                        $(this).addClass('active');
                                        fetchDoctorsInDepartment(department.id);
                                    })
                                    .val(department.id);

                                departmentsSelect.append(listItem);

                                // Select the first service button
                                var firstDepButton = $('#depsInService li:first');
                                // If it's the first item in the list, fetch the doctors for this department
                                if (index === 0) {
                                    firstDepButton.addClass('active');
                                    fetchDoctorsInDepartment(department.id);
                                }
                            });
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
                function fetchDoctorsInDepartment(depID) {
                    $.ajax({
                        url: '@Url.Action("GetDoctorsInDepartment", "Reception")',
                        type: 'GET',
                        data: { depID: depID },
                        success: function (response) {
                            var doctorsSelect = $('#docsInService');
                            //doctorsSelect.empty();
                            console.log(response)
                            $.each(response, function (index, doctor) {
                                var listItem = $('<li>')
                                    .attr('class', 'list-group-item')
                                    .attr('value', doctor.id)
                                    .text(doctor.name)
                                    .on('click', function () {
                                        // Unselect previously selected service
                                        $('#docsInService .active').removeClass('active');
                                        // Select the current service
                                        $(this).addClass('active');

                                    });
                                doctorsSelect.append(listItem);
                            });
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }

                function fetchDoctorsInCard() {
                    $.ajax({
                        url: '@Url.Action("GetDoctorsInCard", "Reception")',
                        type: 'GET',
                        data: { patientCardID: selectedCardID },
                        success: function (response) {
                            var refDoctorsSelect = $('#docsInService');
                            //doctorsSelect.empty();

                            $.each(response, function (index, doctor) {

                                var listItem = $('<li>')
                                    .attr('class', 'list-group-item')
                                    .attr('value', doctor.id)
                                    .text(doctor.name + " " + doctor.surname)
                                    .on('click', function () {
                                        // Unselect previously selected service
                                        $('#docsInService .active').removeClass('active');
                                        // Select the current service
                                        $(this).addClass('active');

                                    });
                                refDoctorsSelect.append(listItem);
                            });
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }*@
    </script>
}

