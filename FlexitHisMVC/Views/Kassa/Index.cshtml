@{
    ViewData["Title"] = "Kassa";


}

@if (string.IsNullOrEmpty(ViewBag.warningText))
{


    <div class="container" style="margin-top:74px">
        <center>
            <h1>Kassaya mədaxil və məxaric</h1>
            @await Component.InvokeAsync("KassaSelector")
        </center>

        <div class="row justify-content-md-center" role="group" aria-label="Basic example" style="margin-top:64px">
            <button type="button" class="btn col-md-2 btn-outline-secondary m-3" onclick="incomeClicked()">
                <svg xmlns="http://www.w3.org/2000/svg" width="96" height="96" viewBox="0 0 96 96" fill="none">
                    <rect width="96" height="96" rx="16" fill="url(#paint0_linear_506_1962)" />
                    <defs>
                        <linearGradient id="paint0_linear_506_1962" x1="0" y1="0" x2="96" y2="96" gradientUnits="userSpaceOnUse">
                            <stop stop-color="#DA90BB" />
                            <stop offset="1" stop-color="#93C1FF" />
                        </linearGradient>
                    </defs>
                </svg>
                <br>
                <br>
                Mədaxil


            </button>
            @*<button type="button" class="btn btn-outline-secondary  col-md-2 m-3" data-toggle="modal" data-target="#newOutcome">
                    <svg xmlns="http://www.w3.org/2000/svg" width="96" height="96" viewBox="0 0 96 96" fill="none">
                        <rect width="96" height="96" rx="16" fill="url(#paint0_linear_506_1966)" />
                        <defs>
                            <linearGradient id="paint0_linear_506_1966" x1="0" y1="0" x2="96" y2="96" gradientUnits="userSpaceOnUse">
                                <stop stop-color="#4BAFAF" />
                                <stop offset="1" stop-color="#76E170" />
                            </linearGradient>
                        </defs>
                    </svg>
                    <br>
                    <br>
                    Məxaric

                </button>*@
            <a href="/KassaRecipes" class="btn col-md-2 btn-outline-secondary m-3" onclick="route()">
                <svg xmlns="http://www.w3.org/2000/svg" width="96" height="96" viewBox="0 0 96 96" fill="none">
                    <g clip-path="url(#clip0_506_1952)">
                        <rect width="96" height="96" rx="16" fill="url(#paint0_linear_506_1952)" />
                        <g filter="url(#filter0_b_506_1952)">
                            <circle cx="92" cy="11" r="18" fill="white" fill-opacity="0.6" />
                        </g>
                        <g filter="url(#filter1_b_506_1952)">
                            <circle cx="9" cy="84" r="18" fill="white" fill-opacity="0.45" />
                        </g>
                        <g filter="url(#filter2_b_506_1952)">
                            <path d="M84.558 103.175C82.3836 102.248 80.413 100.902 78.7589 99.2133C77.1048 97.5247 75.7995 95.5268 74.9175 93.3337C74.0355 91.1407 73.594 88.7953 73.6184 86.4317C73.6428 84.068 74.1325 81.7323 75.0596 79.5579C75.9867 77.3835 77.3329 75.4129 79.0216 73.7588C80.7102 72.1047 82.708 70.7994 84.9011 69.9174C87.0942 69.0354 89.4395 68.594 91.8032 68.6183C94.1669 68.6427 96.5026 69.1324 98.677 70.0595L96.2485 75.7554C94.8221 75.1472 93.2899 74.826 91.7393 74.81C90.1887 74.794 88.6502 75.0835 87.2115 75.6621C85.7729 76.2407 84.4622 77.097 83.3545 78.1821C82.2468 79.2672 81.3636 80.5599 80.7555 81.9863C80.1473 83.4127 79.8261 84.945 79.8101 86.4956C79.7941 88.0461 80.0836 89.5847 80.6622 91.0233C81.2408 92.462 82.0971 93.7726 83.1822 94.8803C84.2673 95.9881 85.56 96.8712 86.9864 97.4794L84.558 103.175Z" fill="white" fill-opacity="0.6" />
                        </g>
                    </g>
                    <defs>
                        <filter id="filter0_b_506_1952" x="58.5714" y="-22.4286" width="66.8571" height="66.8571" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                            <feFlood flood-opacity="0" result="BackgroundImageFix" />
                            <feGaussianBlur in="BackgroundImage" stdDeviation="7.71429" />
                            <feComposite in2="SourceAlpha" operator="in" result="effect1_backgroundBlur_506_1952" />
                            <feBlend mode="normal" in="SourceGraphic" in2="effect1_backgroundBlur_506_1952" result="shape" />
                        </filter>
                        <filter id="filter1_b_506_1952" x="-24.4286" y="50.5714" width="66.8571" height="66.8571" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                            <feFlood flood-opacity="0" result="BackgroundImageFix" />
                            <feGaussianBlur in="BackgroundImage" stdDeviation="7.71429" />
                            <feComposite in2="SourceAlpha" operator="in" result="effect1_backgroundBlur_506_1952" />
                            <feBlend mode="normal" in="SourceGraphic" in2="effect1_backgroundBlur_506_1952" result="shape" />
                        </filter>
                        <filter id="filter2_b_506_1952" x="58.1891" y="53.1889" width="55.9162" height="65.415" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                            <feFlood flood-opacity="0" result="BackgroundImageFix" />
                            <feGaussianBlur in="BackgroundImage" stdDeviation="7.71429" />
                            <feComposite in2="SourceAlpha" operator="in" result="effect1_backgroundBlur_506_1952" />
                            <feBlend mode="normal" in="SourceGraphic" in2="effect1_backgroundBlur_506_1952" result="shape" />
                        </filter>
                        <linearGradient id="paint0_linear_506_1952" x1="0" y1="0" x2="96" y2="96" gradientUnits="userSpaceOnUse">
                            <stop stop-color="#7EEFEE" />
                            <stop offset="0.0001" stop-color="#68E6E7" />
                            <stop offset="1" stop-color="#4D97FD" />
                        </linearGradient>
                        <clipPath id="clip0_506_1952">
                            <rect width="96" height="96" rx="16" fill="white" />
                        </clipPath>
                    </defs>
                </svg>
                <br>
                <br>
                Ödənilmiş qəbzlərin siyahısı

            </a>



        </div>
    </div>

    <!-- new payment Modal -->
    <div class="modal fade" id="newPayment" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable modal-fullscreen">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Mədaxil</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-hidden="true"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <div class="row">
                                <div class="col-md-4">

                                    <label for="exampleFormControlSelect1">Pasient kartını seçin</label>
                                    <select class="form-control" multiple id="debtorPatients" onchange="debtorPatientChanged(this)" style="height:50vh">
                                        <!-- <option>1</option>
                                        <option>2</option>
                                        <option>3</option>
                                        <option>4</option>
                                        <option>5</option> -->

                                    </select>
                                </div>
                                <div class="col-md-8">
                                    <label for="exampleFormControlSelect1">Ödəniş üsulu</label>
                                    <select class="form-control" id="pType">
                                        <!--<option>Nəğd</option>
                                        <option>Kredit kartı</option>
                                        <option>Terminal</option>-->

                                    </select>
                                    <div style="height: 50vh; overflow-y: auto;">
                                        <table class="table table-striped">
                                            <thead>
                                                <tr>
                                                    <th scope="col">Seçim</th>
                                                    <th scope="col">Xidmət</th>
                                                    <th scope="col" class="text-right">Qiymət</th>
                                                    <th scope="col" class="text-right">Borc</th>
                                                    <th scope="col" class="text-right">Ödənilmiş məbləğ</th>
                                                    <th scope="col" class="text-right">Status</th>
                                                </tr>
                                            </thead>
                                            <tbody id="debtorPrice">
                                                <!-- Table rows will be added here using JavaScript -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>



                        </div>




                    </form>
                </div>
                <div class="modal-footer" style="display: flex; justify-content: space-between;">
                    <div class="float-left">
                        <div class="d-flex align-items-center">
                            <!-- Use d-flex for a flexbox container -->
                            <label for="paymentAmount">Yekun AZN: </label> <!-- Remove col-auto and add margin 0 -->
                            <input type="number" min="0" class="form-control m-3" required id="serviceSum" placeholder="---" disabled style="width: auto;" onkeyup="validateServiceSum()"> <!-- Add ml-2 for spacing, specify width as auto -->
                        </div>
                    </div>
                    <div class="float-right">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bağla</button>
                        <button type="button" class="btn btn-primary" id="pay" onclick="insertPayment()">Ödəniş et</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- new outcome Modal -->
    <div class="modal fade" id="newOutcome" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable ">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Xərc</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="exampleFormControlSelect1">Xəstəni seçin</label>
                            <select class="form-control" id="productModels">
                                <!-- <option>1</option>
                                <option>2</option>
                                <option>3</option>
                                <option>4</option>
                                <option>5</option> -->
                            </select>
                            <label for="exampleFormControlSelect1">Ödəniş tipi</label>
                            <select class="form-control">
                                <option>Nəğd</option>
                                <option>Kredit kartı</option>
                                <option>Terminal</option>

                            </select>
                            <label for="exampleFormControlInput1">Səbəb</label>
                            <input type="tel" class="form-control" placeholder="100">
                            <label for="exampleFormControlInput1">Məbləğ</label>
                            <input type="tel" class="form-control" placeholder="100">
                        </div>




                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bağla</button>
                    <button type="button" class="btn btn-primary">Ödəniş et</button>
                </div>
            </div>
        </div>
    </div>

}
else
{
    <center>
        <h1>@ViewBag.warningText</h1>
       
    </center>
}


@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js" integrity="sha512-qZvrmS2ekKPF2mSznTQsxqPgnpkI4DNTlrdUmTzrDgektczlKNRRhy5X5AAOnx5S09ydFYWWNSfcEqDTTHgtNA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>


<script>
    //window.jsPDF = window.jspdf.jsPDF;
    ////applyPlugin(window.jsPDF);
    //const doc = new jsPDF();

    //// https://github.com/MrRio/jsPDF#use-of-unicode-characters--utf-8
    //var PTSans = "/res/fonts/PTSans-Regular.ttf"; // place long string of text here

    ////doc.addFileToVFS("PTSans.ttf", PTSans);
    ////doc.addFont('PTSans.ttf', 'PTSans', 'normal');

    ////doc.setFont('PTSans'); // set font
    //doc.addFileToVFS("Roboto-Regular.ttf", amiriFont);
    //doc.addFont("Roboto-Regular.ttf", "Roboto", "normal");
    //doc.setFont("Roboto");

    //var font = doc.getFont();
    ////debugger;

    //doc.text('xoş gördük səni', 10, 10);
    //doc.text('200.00 €', 10, 20);

    //doc.save('table.pdf');
</script>
    <script src="/js/kassa/home.js" asp-append-version="true"></script>
    <script>var globalPatientRequest;
        var serviceContentForRecipe = [];
        document.addEventListener('DOMContentLoaded', function () {



            //window.jsPDF = window.jspdf.jsPDF;
            ////applyPlugin(window.jsPDF);

            //if (localStorage.length > 0) {

            //    var json = localStorage.getItem("json")

            //    var parsedJSON = JSON.parse(json)
            //    $("#selectedKassaButton").empty();
            //    $("#selectedKassaDropdown").empty();





            //    $.each(parsedJSON.data[0].kassaList, function () {


            //        $("#selectedKassaDropdown").append(`<a class="dropdown-item" id="${this.kassaID}" onclick="localStorage.selectedKassaID='${this.kassaID}';localStorage.selectedKassaName='${this.name}'; $('#selectedKassaButton').text('${this.name} ');">${this.name}</a>`)


            //    });
            //}
            //else {
            //    localStorage.clear();

            //    $('#systemModalTitle').text("Sessiyanız başa çatıb");
            //    $('#systemModalText').html(`<p id="systemModalText">Zəhmət olmasa yenidən giriş edin</p>`);
            //    $('#systemModalBtn').removeAttr("hidden");
            //    //$('#systemModal').modal('show')
            //    //window.location.replace("file:///Users/rufat/Desktop/Dekor%20Stone/login/dekor_stone.html");
            //}

            //$("#newOutcome").modal("show")


        }, false);
        function debtorPatientChanged(a) {

            //$("#debtorPrice").val($(a).val());
            updateDebtorPrice($(a).val())
            //localStorage.selectedDebtorPatientID = data.data[0].id


        }
        function getPaymentTypes() {
            $.ajax({
                type: 'POST',
                url: `/Kassa/GetPaymentTypes`,
                data: { organizationID: localStorage.selectedOrganization },
                dataType: 'json',
                success: function (data, status, xhr) {   // success callback function
                    //  var json = JSON.stringify(data)
                    //alert(data.name)




                    //alert(JSON.parse(json).name)
                    //document.cookie = "jsonData="+data;
                    $.each(data, function () {

                        $("#pType").append($(`<option  />`).val(this.id).text(`${this.name}`));


                    });
                    localStorage.selectedPaymentTypeID = data[0].id;



                    //$('p').append(data.name + ' ' + data.surname);
                },
                error: function (jqXhr, textStatus, errorMessage) { // error callback

                    if (jqXhr.status == 401) {
                        localStorage.clear()
                        $('#systemModalTitle').text("Sessiyanız başa çatıb");
                        $('#systemModalText').html(`<p id="systemModalText">Zəhmət olmasa yenidən giriş edin</p>`);
                        $('#systemModalBtn').removeAttr("hidden");
                    }
                    else {
                        $('#systemModal').modal('hide');
                        $('#warningModal').modal('show')
                        $('#warningText').text('Xəta, biraz sonra yenidən cəhd edin');
                        //  $('#alert').text('Error: ' + errorMessage);
                    }
                }
            });
        }

        //function updateDebtorPrice(debtorID) {
        //    serviceContentForRecipe = [];
        //    var serviceSum = 0;
        //    var filteredPatients = globalPatientRequest.filter(function (patient) {
        //        return patient.id === parseInt(debtorID);
        //    });

        //    // Select the debtorPrice table body
        //    var debtorPriceTableBody = document.getElementById("debtorPrice");
        //    debtorPriceTableBody.innerHTML = ""; // Clear the content of the table body

        //    serviceContentForRecipe.push({
        //        text: '-------------------',
        //        style: 'subheader'
        //    });

        //    if (filteredPatients.length > 0) {
        //        filteredPatients.forEach(function (patient) {
        //            filteredPatients.forEach(function (patient) {

        //                   serviceSum += patient.servicePrice;

        //            // Create a new table row
        //            var tableRow = document.createElement("tr");

        //            // Create and append a checkbox
        //            var checkboxCell = document.createElement("td");
        //            var checkbox = document.createElement("input");
        //            checkbox.type = "checkbox";
        //            checkboxCell.appendChild(checkbox);
        //            tableRow.appendChild(checkboxCell);

        //            // Create and append table data cells
        //            var serviceNameCell = document.createElement("td");
        //            serviceNameCell.textContent = patient.serviceName;
        //            tableRow.appendChild(serviceNameCell);

        //            var servicePriceCell = document.createElement("td");
        //            servicePriceCell.textContent = patient.servicePrice + " AZN";
        //            servicePriceCell.classList.add("text-right");
        //            tableRow.appendChild(servicePriceCell);
        //            $("#serviceSum").text(`Yekun: ${serviceSum} AZN`);
        //            // Append the table row to the table body
        //            debtorPriceTableBody.appendChild(tableRow);

        //            serviceContentForRecipe.push({
        //                text: `${patient.serviceName} ----- ${patient.servicePrice} AZN`,
        //                style: 'subheader'
        //            });
        //            });

        //        });

        //        serviceContentForRecipe.push({
        //            text: `Yekun: ${serviceSum} AZN`,
        //            style: 'subheader'
        //        });
        //    } else {
        //        console.log("Patient with ID " + debtorID + " not found.");
        //    }
        //}
        function updateDebtorPrice(debtorID) {

            serviceContentForRecipe = [];
            var serviceSum = 0;
            var filteredPatients = globalPatientRequest.filter(function (patient) {
                return patient.cardID === parseInt(debtorID);
            });

            // Select the debtorPrice table body
            var debtorPriceTableBody = document.getElementById("debtorPrice");
            debtorPriceTableBody.innerHTML = ""; // Clear the content of the table body

            serviceContentForRecipe.push({
                text: '-------------------',
                style: 'subheader'
            });

            if (filteredPatients.length > 0) {
                filteredPatients.forEach(function (patient) {
                    //console.log(patient.services)
                    patient.services.forEach(function (service) {
                        if (!service.isPaid) {
                            serviceSum += parseFloat(service.debt);
                        }



                        // Create a new table row
                        var tableRow = document.createElement("tr");
                        tableRow.setAttribute('data-card-service-rel-id', `${service.cardServiceRelId}`);
                        tableRow.setAttribute('data-is-paid', `${service.isPaid}`);
                        tableRow.setAttribute('data-debt', `${service.debt}`);
                        tableRow.setAttribute('data-total-paid', `${service.totalPaid}`);
                        tableRow.setAttribute('data-service-id', `${service.id}`);
                        tableRow.setAttribute('data-service-price', `${service.servicePrice}`);
                        // Create and append a checkbox
                        var checkboxCell = document.createElement("td");
                        var checkbox = document.createElement("input");
                        checkbox.type = "checkbox";
                        checkbox.addEventListener('click', recalculateServiceSum);
                        checkbox.checked = true; // This will make the checkbox checked by default
                        checkboxCell.appendChild(checkbox);
                        tableRow.appendChild(checkboxCell);


                        // Create and append table data cells
                        var serviceNameCell = document.createElement("td");
                        serviceNameCell.textContent = service.serviceName;
                        tableRow.appendChild(serviceNameCell);



                        var servicePriceCell = document.createElement("td");
                        servicePriceCell.textContent = service.servicePrice + " AZN";
                        servicePriceCell.classList.add("text-right");
                        tableRow.appendChild(servicePriceCell);

                        var debtCell = document.createElement("td");
                        debtCell.textContent = service.debt + " AZN";
                        debtCell.classList.add("text-right");
                        tableRow.appendChild(debtCell);

                        var totalPaidCell = document.createElement("td");
                        totalPaidCell.textContent = service.totalPaid + " AZN";
                        totalPaidCell.classList.add("text-right");
                        tableRow.appendChild(totalPaidCell);

                        var statusCell = document.createElement("td");
                        if (service.isPaid) {
                            statusCell.textContent = "Ödənilib";
                        }
                        else {
                            statusCell.textContent = "Ödənilməyib";
                        }

                        statusCell.classList.add("text-right");
                        tableRow.appendChild(statusCell);


                        // Append the table row to the table body
                        debtorPriceTableBody.appendChild(tableRow);

                        serviceContentForRecipe.push({
                            text: `${service.serviceName} ----- ${service.servicePrice} AZN`,
                            style: 'subheader'
                        });

                    });

                });

                serviceContentForRecipe.push({
                    text: `Yekun: ${serviceSum} AZN`,
                    style: 'subheader'
                });

                $("#serviceSum").prop('disabled', false);
                $("#serviceSum").val(`${serviceSum}`);
            } else {
                console.log("Patient with ID " + debtorID + " not found.");
            }
        }




        async function incomeClicked() {
            try {
                showLoading();

                const response = await $.ajax({
                    type: 'POST',
                    url: `/Kassa/GetDebtorPatients`,
                    data: { organizationID: localStorage.selectedOrganization },
                    dataType: 'json',
                });

                hideLoading();

                if (response.length > 0) {
                    $('#systemModal').modal('hide');
                    $('#newPayment').modal('show');

                    if (typeof (Storage) !== "undefined") {
                        localStorage.requestToken = response.requestToken;
                    }

                    globalPatientRequest = response;

                    const debtorPatientsDropdown = $("#debtorPatients");
                    debtorPatientsDropdown.empty();
                    const addedPatients = new Set();

                    response.forEach(card => {

                        debtorPatientsDropdown.append($(`<option id='${card.cardID}' data-patient-id='${card.id}' />`).val(card.cardID).text(`${card.name} ${card.surname} ${card.father} - (${card.cDate})`));

                        //if (!addedPatients.has(patient.id)) {
                        //    addedPatients.add(patient.id);
                        //    debtorPatientsDropdown.append($(`<option id='${patient.id}' />`).val(patient.id).text(`${patient.name} ${patient.surname} ${patient.father}`));
                        //}
                    });

                    localStorage.selectedDebtorPatientID = response[0].id;

                    getPaymentTypes();
                } else {
                    $('#systemModal').modal('hide');
                    $('#warningModal').modal('show');
                    $('#warningText').text('Ödəniş gözləyən xəstə yoxdur');
                }
            } catch (error) {
                if (error.status == 401) {
                    localStorage.clear();
                    $('#systemModalTitle').text("Sessiyanız başa çatıb");
                    $('#systemModalText').html(`<p id="systemModalText">Zəhmət olmasa yenidən giriş edin</p>`);
                    $('#systemModalBtn').removeAttr("hidden");
                } else {
                    $('#systemModal').modal('hide');
                    $('#warningModal').modal('show');
                    $('#warningText').text('Xəta, biraz sonra yenidən cəhd edin');
                }
            }
        }
        function validateServiceSum() {
            const serviceSumInput = document.getElementById('serviceSum');
            let serviceSumValue = parseFloat(serviceSumInput.value);
            const totalSum = calculateTotalSum(); // Implement this function based on your application logic

            // Check if the value is less than 0
            if (serviceSumValue < 0) {
                serviceSumInput.value = 0;
                alert('Rəqəm 0-dan böyük olmalıdır.');
                adjustCheckboxes(true); // Ensure checkboxes are adjusted appropriately
            }
            // Check if the value is greater than the total sum
            else if (serviceSumValue > totalSum) {
                serviceSumInput.value = totalSum;
                alert('Xidmətlərin ümumi qiymətini keçmək olmaz.');
                adjustCheckboxes(true); // Ensure checkboxes are adjusted appropriately
            } else {
                adjustCheckboxes(true); // Enable and check all checkboxes if the sum matches
            }
        }

        // Function to disable/enable and check/uncheck checkboxes based on condition
        function adjustCheckboxes(shouldCheck) {
            $('#debtorPrice tr').each(function () {
                const checkbox = $(this).find('input[type="checkbox"]');
                checkbox.prop('disabled', !shouldCheck); // Disable if shouldCheck is false, enable if true
                checkbox.prop('checked', shouldCheck); // Check or uncheck based on shouldCheck
            });
        }



        // For services listed with data-service-price attributes
        function calculateTotalSum() {

            let totalSum = 0;
            $('#debtorPrice tr').each(function () {
                const isPaid = $(this).data('is-paid');
                if (!isPaid) {
                    const price = parseFloat($(this).data('service-price'));
                    if (!isNaN(price)) {
                        totalSum += price;
                    }
                }

            });
            return totalSum;
        }


        function recalculateServiceSum() {

            let newTotal = 0;

            // Iterate over each row in the table
            $('#debtorPrice tr').each(function () {
                const isPaid = $(this).data('is-paid');
                if (!isPaid) {
                    // Check if the checkbox in the current row is checked
                    if ($(this).find('input[type="checkbox"]').is(':checked')) {
                        // Add the service price to the new total
                        const price = parseFloat($(this).data('service-price') || 0);
                        newTotal += price;
                    }
                }
            });

            // Update the service sum input box with the new total
            $('#serviceSum').val(newTotal.toFixed(2)); // Use toFixed(2) to format the total as a fixed-point notation with 2 decimal places
        }
        function insertPayment() {

            showLoading();


            let services = collectAndAdjustServicePrices();


            const paymentData = {
                patientCardId: $('#debtorPatients').val(), // Assuming this is the correct way to get the selected patient card ID
                kassaID: localStorage.getItem('selectedKassaID'),
                payment_typeID: $('#pType').val(),
                patientID: $('#debtorPatients option:selected').data('patient-id'), // Assuming this gives you the correct patient ID
                services: services,
                paymentAmount: parseFloat($('#serviceSum').val()) // Assuming there's an input with id #serviceSum for the total payment amount
            };

            $.ajax({
                type: 'POST',
                url: '@Url.Action("AddIncome","Kassa")',
                data: paymentData,
                dataType: 'json',
                success: function (data, status, xhr) {
                    hideLoading();
                    $('#warningModal').modal('show');
                    $('#warningText').text('Odəniş qeydə alındı');
                    incomeClicked();
                    // Additional actions on success, e.g., resetting form, updating UI
                },
                error: function (jqXhr, textStatus, errorMessage) {
                    hideLoading();
                    $('#warningModal').modal('show');
                    $('#warningText').text('Xəta, biraz sonra yenidən cəhd edin');
                    // Error handling actions
                }
            });
        }
        function collectAndAdjustServicePrices() {
            let services = [];
            let totalCheckedServicesPrice = 0;

            // Первый проход: Вычисляем сумму выбранных сервисов
            $('#debtorPrice tr').each(function () {
                const isPaid = $(this).data('is-paid');

                if (!isPaid) {
                    const serviceId = $(this).data('service-id');
                    const serviceRelId = $(this).data('card-service-rel-id');
                    const isPaid = $(this).data('card-is-paid');
                    let servicePrice = parseFloat($(this).data('service-price'));
                    let debt = parseFloat($(this).data('debt'));
                    let totalPaid = parseFloat($(this).data('total-paid'));
                    const isChecked = $(this).find('input[type="checkbox"]').is(':checked');
                    const amount = parseFloat($(this).data('service-price'));
                    if ($(this).find('input[type="checkbox"]').is(':checked')) {
                        //totalCheckedServicesPrice += amount;
                        services.push({ id: serviceId, isPaid: isPaid, debt: debt, totalPaid: totalPaid, cardServiceRelId: serviceRelId, ServicePrice: parseFloat(servicePrice.toFixed(2)) });

                    }

                }
            });

            //const userTotal = parseFloat($('#serviceSum').val()); // Сумма, указанная пользователем
            //let remainingSum = userTotal; // Оставшаяся сумма для распределения

            //// Второй проход: Распределяем сумму с учетом пропорции и округления
            //$('#debtorPrice tr').each(function () {
            //    const isPaid = $(this).data('is-paid');
            //    if (!isPaid) {

            //        const serviceId = $(this).data('service-id');
            //        const serviceRelId = $(this).data('card-service-rel-id');
            //        let amount = parseFloat($(this).data('service-price'));
            //        const isChecked = $(this).find('input[type="checkbox"]').is(':checked');

            //        if (serviceRelId && !isNaN(amount) && isChecked) {
            //            let serviceProportion = (amount / totalCheckedServicesPrice) * userTotal;
            //            let roundedServiceProportion = parseFloat(serviceProportion.toFixed(2));
            //            remainingSum -= roundedServiceProportion; // Уменьшаем оставшуюся сумму

            //            // Добавляем сервис с округленной стоимостью
            //            services.push({ id: serviceId, cardServiceRelId: serviceRelId, ServicePrice: roundedServiceProportion.toString() });


            //        }
            //    }

            //});

            //// Корректируем округление последнего сервиса, если оставшаяся сумма не равна 0
            //if (remainingSum !== 0 && services.length > 0) {
            //    let lastServiceIndex = services.length - 1;
            //    services[lastServiceIndex].ServicePrice = (parseFloat(services[lastServiceIndex].ServicePrice) + remainingSum).toFixed(2).toString();
            //}

            return services;
        }




        // Additional functions like showLoading(), hideLoading(), getPaymentTypes(), etc.


        //function insertPayment() {

        //    $('#newPayment').modal('hide');
        //    //      $('#systemModal').modal('show');
        //    //      $('#systemModalTitle').text("Yüklənir...");
        //    //      $('#systemModalText').html(`<center><div class="spinner-border text-dark mx-auto" role="status">
        //    //  <span class="sr-only">Loading...</span>
        //    //</div></center>`);
        //    //$('#systemModalBtn').attr("hidden", "");
        //    showLoading()
        //    $.ajax({
        //        type: 'POST',
        //        url: `/Kassa/AddIncome`,
        //        data: {
        //            kassaID: localStorage.selectedKassaID,
        //            payment_typeID: $('#pType').val(), patientID: $('#debtorPatients option:selected').attr('id')
        //        },
        //        dataType: 'json',
        //        success: function (data, status, xhr) {   // success callback function
        //            //  var json = JSON.stringify(data)
        //            //alert(data.name)


        //            if (data) {
        //                //$('#systemModal').modal('hide')
        //                hideLoading()
        //                $('#warningModal').modal('show')
        //                $('#warningText').text('Odəniş əlavə olundu');

        //                //// include the FreeSans font
        //                //var font = 'Helvetica';

        //                //// create the e-recipe in pdf format
        //                //var doc = new jsPDF({
        //                //    defaultFont: font
        //                //});
        //                //doc.text("E-recipe", 50, 50);
        //                //doc.text("Pasientin adı: " + $('#debtorPatients').text(), 50, 60);
        //                //doc.text("Odəniş tipi: " + $("#pType option:selected").text(), 50, 70);
        //                //doc.text("Məbləğ: " + $("#debtorPrice").val(), 50, 80);
        //                //doc.save("e-recipe.pdf");
        //                //var pdfOutput = doc.output('datauristring');

        //                //// show the pdf in new tab
        //                //var newWindow = window.open();
        //                //newWindow.document.write('<iframe width="100%" height="100%" src="' + pdfOutput + '"></iframe>');
        //                // include the jspdf library


        //                window.jsPDF = window.jspdf.jsPDF;
        //                //applyPlugin(window.jsPDF);
        //                const doc = new jsPDF();

        //                // https://github.com/MrRio/jsPDF#use-of-unicode-characters--utf-8

        //                doc.addFileToVFS("Roboto-Regular.ttf", amiriFont);
        //                doc.addFont("Roboto-Regular.ttf", "Roboto", "normal");
        //                doc.setFont("Roboto");


        //                // Get today's date and time
        //                var today = new Date();
        //                var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();
        //                var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
        //                // create the content of the e-recipe
        //                content = [
        //                    { text: '------------------- ', style: 'subheader' },
        //                    { text: 'Satus: UĞURLU', style: 'header' },
        //                    { text: 'Pasientin adı: ' + $('#debtorPatients option:selected').text(), style: 'subheader' },
        //                    { text: 'Ödəniş tipi: ' + $("#pType option:selected").text(), style: 'subheader' },
        //                    { text: 'Kassir: ' + $("#fullName").text(), style: 'subheader' },

        //                    { text: `Tarix: ${date} / ${time}`, style: 'subheader' },

        //                ];
        //                content.push.apply(content, serviceContentForRecipe);


        //                // center the header at the top of the page
        //                doc.setFontSize(20);
        //                //doc.setFont("bold");
        //                doc.text("Qəbz", doc.internal.pageSize.getWidth() / 2, 20, "center");

        //                // set the font size for the rest of the content
        //                doc.setFontSize(14);
        //                //doc.setFont("normal");

        //                // position the rest of the content
        //                var startingY = 30;
        //                $.each(content, function (i, item) {
        //                    doc.text(item.text, 40, startingY + (i * 7));
        //                });

        //                const randomName = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
        //                doc.save(`e-Qəbz - ${randomName}.pdf`);



        //                var pdfOutput = doc.output('datauristring');

        //                //// show the pdf in new tab
        //                var newWindow = window.open();
        //                newWindow.document.write('<iframe width="100%" height="100%" src="' + pdfOutput + '"></iframe>');





        //                if (typeof (Storage) !== "undefined") {
        //                    localStorage.requestToken = data.requestToken
        //                } else {

        //                    // Sorry! No Web Storage support..
        //                }

        //            }
        //            else {
        //                //$('#systemModal').modal('hide');
        //                hideLoading()
        //                $('#warningModal').modal('show')
        //                $('#warningText').text('Xəta, biraz sonra yenidən cəhd edin');

        //            }




        //            //$('p').append(data.name + ' ' + data.surname);
        //        },
        //        error: function (jqXhr, textStatus, errorMessage) { // error callback
        //            hideLoading()
        //            if (jqXhr.status == "401") {
        //                localStorage.clear()
        //                $('#systemModalTitle').text("Sessiyanız başa çatıb");
        //                $('#systemModalText').html(`<p id="systemModalText">Zəhmət olmasa yenidən giriş edin</p>`);
        //                $('#systemModalBtn').removeAttr("hidden");
        //            }
        //            else {
        //                $('#warningModal').modal('show')
        //                $('#warningText').text(jqXhr.status);
        //            }
        //            //  $('#alert').text('Error: ' + errorMessage);
        //        }
        //    });

        //}
        function getCookie(cname) {
            var name = cname + "=";
            var decodedCookie = decodeURIComponent(document.cookie);
            var ca = decodedCookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return "";
        }</script>
}