@model List<Medicloud.DAL.Entities.UserDAO>;


<div class="modal fade cus_modal"
     id="add-appointment-modal"
     data-bs-backdrop="static"
     aria-hidden="true"
     style="display: none;">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-4">
            <div class="modal-header pt-3 px-4 border-bottom-0">
                <button type="button"
                        class="btn btn-light btn-sm delete-button d-none"
                        onclick="deleteAppointment()">
                    <i class="far fa-trash-alt"></i>
                </button>
                <h5 class="modal-title"
                    id="modal-title">
                    Yeni Növbə
                </h5>
                <button type="button"
                        class="btn-close"
                        data-bs-dismiss="modal"
                        aria-label="Close" />
            </div>

            <div class="modal-body px-4">
                <div class="alert alert-warning alert-dismissible fade show" role="alert" style="font-size:13px">
                    Müştərinin nömrəsi olduğu halda ona sms bildiriş göndəriləcək.
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>

                @if (Model == null || !Model.Any())
                {
                    <div class="d-flex flex-column justify-content-center align-items-center text-center" style="min-height: 300px;">
                        <i class="ri-user-add-line" style="font-size: 72px; color: #fa5c7c;"></i>
                        <h4 class="mt-3 text-danger">Xidmət göstərən əməkdaş tapılmadı</h4>
                        <p class="text-muted">Zəhmət olmasa sistemə əvvəlcə xidmət göstərən əməkdaş əlavə edin.</p>
                    </div>
                }
                else
                {
                    <form class="needs-validation"
                          name="event-form"
                          id="newAppointmentForm"
                          asp-controller="Appointments"
                          asp-action="AddAppointment"
                          method="post"
                          autocomplete="off"
                          novalidate>

                        <input type="hidden" name="Id" id="Id" />

                        @if (Model != null)
                        {
                            <div class="mb-3">
                                <label for="patient_id"
                                       class="form-label">
                                    Xidmət göstərən
                                </label>

                                <select class="form-select" name="UserId" id="UserId" required>
                                    <option selected value="">Seçilməyib</option>
                                    @foreach (var item in Model)
                                    {
                                        <option value="@item.ID">@item.name @item.surname (@item.speciality.name)</option>


                                    }

                                </select>

                            </div>
                        }

                        <div class="mb-3">
                            <label for="patient_id"
                                   class="form-label">
                                Ad, soyad, ata adı
                            </label>
                            <div class="dropdown">
                                <input type="text" class="border w-100 rounded-1 px-3 py-1" data-bs-toggle="dropdown" id="userSearch" placeholder="Axtarın..." autocomplete="off">
                                <ul class="dropdown-menu p-3 w-100 border-1 p-0" id="userList" aria-labelledby="userSearch">
                                </ul>
                            </div>
                            <input name="PatientId" type="number" id="patientId" required class="form-control d-none" />

                            <div class="invalid-feedback">Pasient seçin</div>

                        </div>
                        <div class="mb-3">
                            <label for="patientMobileModal"
                                   class="form-label">
                                Mobil Nömrə
                            </label>
                            <input type="tel"
                                   class="form-control"
                                   id="patientPhone"
                                   name="PhoneNumber"
                                   placeholder="+994"
                                   required>
                            <div class="form-check mt-2">
                                <input class="form-check-input"
                                       type="checkbox"
                                       id="not_phone"
                                       name="not_phone">
                                <label class="form-check-label"
                                       for="not_phone">
                                    Mobil nömrə mövcud deyil
                                </label>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="service_id"
                                   class="form-label">
                                Xidmət/Prosedur
                            </label>

                            <div class="dropdown">
                                <input type="text" class="border w-100 rounded-1 px-3 py-1" data-bs-toggle="dropdown" id="serviceSearch" placeholder="Axtarın..." autocomplete="off">
                                <ul class="dropdown-menu p-3 w-100 border-1 p-0" id="serviceList" aria-labelledby="serviceSearch">
                                </ul>
                            </div>
                            <input name="ServiceId" type="number" id="serviceId" class="form-control d-none" required />

                            <div class="invalid-feedback">Xidmət seçin</div>

                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label">Gün:</label>
                                <input class="form-control"
                                       type="date"
                                       id="MeetingDate"
                                       name="MeetingDate"
                                       value="2018-06-12T19:30"
                                       required>
                                <div class="invalid-feedback">Günü daxil edin</div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="dropdownButton" class="form-label">Vaxt</label>
                                    <div class="dropdown">
                                        <button id="dropdownButton" disabled class="btn btn-primary dropdown-toggle w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                            Saat Seçin
                                        </button>
                                        <ul class="dropdown-menu" style="max-height:400px; overflow:auto;" id="timeDropdown"></ul>
                                    </div>
                                    <input type="time" required name="StartTime" id="startTime" class="d-none" />
                                    <input type="time" required name="EndTime" id="endTime" class="d-none" />
                                    <div class="invalid-feedback">Vaxt seçilməlidir</div>
                                </div>
                            </div>
                        </div>
                        <div class="text-end">
                            <input type="submit" value="Təyin et"
                                   class="btn btn-info" />
                        </div>
                    </form>
                }

            </div>
        </div>
    </div>
</div>


<script>
    @*             //document.addEventListener('DOMContentLoaded', function() {
            //    const phoneInput = document.getElementById('patientPhone');
            //    const checkbox = document.getElementById('not_phone');

            //    checkbox.addEventListener('change', function() {
            //        phoneInput.disabled = checkbox.checked;
            //        if (checkbox.checked) {
            //            phoneInput.value = '';
            //        }
            //    });
            //});

            //document.addEventListener('DOMContentLoaded', () => {


            //    const searchInput = document.getElementById('searchInput');
            //    const dropdownContent = document.getElementById('dropdownContent');

            //    const searchInputService = document.getElementById('searchInputService');
            //    const dropdownContentService = document.getElementById('dropdownContentService');

            //    //loadTime();

            //    // searchInput.addEventListener('input', () => {
            //    // });

            //    searchInput.addEventListener('input', () => {
            //        dropdownContent.classList.add('show');
            //        const filter = searchInput.value.toLowerCase();
            //        const links = dropdownContent.getElementsByTagName('a');

            //        for (let i = 0; i < links.length; i++) {
            //            const textValue = links[i].textContent || links[i].innerText;
            //            links[i].style.display = textValue.toLowerCase().includes(filter) ? '' : 'none';
            //        }
            //    });

            //    document.addEventListener('click', (event) => {
            //        if (!event.target.matches('#searchInput')) {
            //            dropdownContent.classList.remove('show');
            //        }
            //    });

            //    // searchInputService.addEventListener('focus', () => {
            //    // });

            //    searchInputService.addEventListener('input', () => {
            //        dropdownContentService.classList.add('show');
            //        const filter = searchInputService.value.toLowerCase();
            //        const links = dropdownContentService.getElementsByTagName('a');

            //        for (let i = 0; i < links.length; i++) {
            //            const textValue = links[i].textContent || links[i].innerText;
            //            links[i].style.display = textValue.toLowerCase().includes(filter) ? '' : 'none';
            //        }
            //    });

            //    document.addEventListener('click', (event) => {
            //        if (!event.target.matches('#searchInputService')) {
            //            dropdownContentService.classList.remove('show');
            //        }
            //    });

                //function loadTime() {
                //    const select = document.getElementById('Time');
                //    const startHour = 8;
                //    const endHour = 21;
                //    const interval = 10;

                //    for (let hour = startHour; hour <= endHour; hour++) {
                //        for (let minute = 0; minute < 60; minute += interval) {
                //            let start = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
                //            let endMinute = minute + interval;
                //            let end = `${String(hour).padStart(2, '0')}:${String(endMinute).padStart(2, '0')}`;

                //            if (endMinute > 59) {
                //                endMinute = 0;
                //                end = `${String(hour + 1).padStart(2, '0')}:00`;
                //            }

                //            let optionValue = `${start}`;
                //            let optionText = `${start} - ${end}`;
                //            let option = document.createElement('option');
                //            option.value = optionValue;
                //            option.textContent = optionText;

                //            select.appendChild(option);
                //        }
                //    }
                //}
            //});

            document.addEventListener('DOMContentLoaded', function () { *@

    @*   const searchInput = document.getElementById('searchInput');
                const dropdownContent = document.getElementById('dropdownContent');

                searchInput.addEventListener('change', debounce(function (e) {
                    const search = searchInput.value;
                    fetch(`@Url.Action("GetPatientByName", "Patient")/?search=${encodeURIComponent(search)}`)
                        .then(response => response.json())
                        .then(data => {
                            let listContent = "";
                            data.forEach(x => {
                                const escapedId = document.createElement('div').textContent = x.id;

                                listContent += `<a onclick="selectPatient('${escapedId}', '${x.name}')">${x.name} ${x.surname} ${x.father} (FİN: ${x.fin})</a>`;
                            });
                            dropdownContent.innerHTML = listContent;
                        })
                        .catch(error => {
                            console.error("Error fetching services.", error);
                        });
                }, 300));


                const searchInputService = document.getElementById('searchInputService');
                const dropdownContentService = document.getElementById('dropdownContentService');

                searchInputService.addEventListener('keyup', debounce(function (e) {
                    const search = searchInputService.value;

                    fetch(`@Url.Action("GetAllServices", "Services")/?search=${encodeURIComponent(search)}`)
                        .then(response => response.json())
                        .then(data => {
                            let listContent = "";
                            data.forEach(x => {
                                const escapedId = document.createElement('div').textContent = x.id;
                                const escapedName = document.createElement('div').textContent = x.name;
                                listContent += `<a onclick="selectService('${escapedId}', '${escapedName}')">${escapedName}</a>`;
                            });
                            dropdownContentService.innerHTML = listContent;
                        })
                        .catch(error => {
                            console.error("Error fetching services.", error);
                        });
                }, 300));
            });

            function debounce(func, delay) {
                let debounceTimer;
                return function () {
                    const context = this;
                    const args = arguments;
                    clearTimeout(debounceTimer);
                    debounceTimer = setTimeout(() => func.apply(context, args), delay);
                };
            }

            function validateForm() {
                let isValid = true;

                if (document.getElementById('ServiceId').value.trim().length === 0) {
                    document.getElementById('validationForService').style.display = 'block';
                    isValid = false;
                } else {
                    document.getElementById('validationForService').style.display = 'none';
                }

                if (document.getElementById('PatientId').value.trim().length === 0) {
                    document.getElementById('validationForPatient').style.display = 'block';
                    isValid = false;
                } else {
                    document.getElementById('validationForPatient').style.display = 'none';
                }

                return isValid;
            }

            function clearPatientId() {
                document.getElementById('PatientId').value = '';
            }

            function clearServiceId() {
                document.getElementById('ServiceId').value = '';
            }

            function selectPatient(id, name) {
                fetch(`@Url.Action("GetPatientById", "Patient")/?id=${id}`)
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('patientPhone').value = data?.phone;
                    });
                document.getElementById('searchInput').value = name;
                document.getElementById('PatientId').value = id;
                document.getElementById('validationForPatient').style.display = 'none';
            }

            function formatTime(date) {
                let hours = date.getHours().toString().padStart(2, '0');
                let minutes = date.getMinutes().toString().padStart(2, '0');
                return `${hours}:${minutes}`;
            }

            function selectService(id, name) {
                document.getElementById('searchInputService').value = name;
                document.getElementById('ServiceId').value = id;
                document.getElementById('validationForService').style.display = 'none';
            }

            function clearFields() {
                document.getElementById('Id').value = '';
                document.getElementById('ServiceId').value = '';
                document.getElementById('PatientId').value = '';
                document.getElementById('MeetingDate').value = '';
                document.getElementById('patientPhone').value = '';
                document.getElementById('searchInput').value = '';
                document.getElementById('searchInputService').value = '';
                //document.getElementById('Time').value = '';
            } *@
    @* 
            //document.addEventListener('DOMContentLoaded', function () {
            //    flatpickr('#example', {});
            //    flatpickr('.default', {
            //        enableTime: true,
            //        dateFormat: "Y-m-d H:i",
            //        minuteIncrement: 10
            //    });
            //}); *@

</script>
